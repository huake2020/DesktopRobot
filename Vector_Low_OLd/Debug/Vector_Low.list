
Vector_Low.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cea0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800cfb0  0800cfb0  0001cfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d37c  0800d37c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d37c  0800d37c  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d37c  0800d37c  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d37c  0800d37c  0001d37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d380  0800d380  0001d380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800d384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ba8  200000e0  0800d464  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c88  0800d464  00022c88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038878  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000073f0  00000000  00000000  00058981  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002430  00000000  00000000  0005fd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020f8  00000000  00000000  000621a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f153  00000000  00000000  000642a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025d63  00000000  00000000  000833f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d5f6  00000000  00000000  000a9156  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013674c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000937c  00000000  00000000  001367c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e0 	.word	0x200000e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cf98 	.word	0x0800cf98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e4 	.word	0x200000e4
 800014c:	0800cf98 	.word	0x0800cf98

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 fafd 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	2000      	movs	r0, #0
 8000168:	f00b fe1c 	bl	800bda4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f00b fde8 	bl	800bd40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x1c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <HAL_IncTick+0x20>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4413      	add	r3, r2
 800018c:	4a03      	ldr	r2, [pc, #12]	; (800019c <HAL_IncTick+0x20>)
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000004 	.word	0x20000004
 800019c:	20001f24 	.word	0x20001f24

080001a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  return uwTick;
 80001a4:	4b02      	ldr	r3, [pc, #8]	; (80001b0 <HAL_GetTick+0x10>)
 80001a6:	681b      	ldr	r3, [r3, #0]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	20001f24 	.word	0x20001f24

080001b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b084      	sub	sp, #16
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001bc:	f7ff fff0 	bl	80001a0 <HAL_GetTick>
 80001c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001cc:	d005      	beq.n	80001da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ce:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <HAL_Delay+0x40>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	461a      	mov	r2, r3
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	4413      	add	r3, r2
 80001d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001da:	bf00      	nop
 80001dc:	f7ff ffe0 	bl	80001a0 <HAL_GetTick>
 80001e0:	4602      	mov	r2, r0
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	1ad3      	subs	r3, r2, r3
 80001e6:	68fa      	ldr	r2, [r7, #12]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d8f7      	bhi.n	80001dc <HAL_Delay+0x28>
  {
  }
}
 80001ec:	bf00      	nop
 80001ee:	3710      	adds	r7, #16
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	20000004 	.word	0x20000004

080001f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000204:	2300      	movs	r3, #0
 8000206:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000208:	2300      	movs	r3, #0
 800020a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d101      	bne.n	800021a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000216:	2301      	movs	r3, #1
 8000218:	e0be      	b.n	8000398 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000224:	2b00      	cmp	r3, #0
 8000226:	d109      	bne.n	800023c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000236:	6878      	ldr	r0, [r7, #4]
 8000238:	f00a ff74 	bl	800b124 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f000 f9ab 	bl	8000598 <ADC_ConversionStop_Disable>
 8000242:	4603      	mov	r3, r0
 8000244:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800024a:	f003 0310 	and.w	r3, r3, #16
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8099 	bne.w	8000386 <HAL_ADC_Init+0x18e>
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	2b00      	cmp	r3, #0
 8000258:	f040 8095 	bne.w	8000386 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000260:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000264:	f023 0302 	bic.w	r3, r3, #2
 8000268:	f043 0202 	orr.w	r2, r3, #2
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000278:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	7b1b      	ldrb	r3, [r3, #12]
 800027e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000280:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	4313      	orrs	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000290:	d003      	beq.n	800029a <HAL_ADC_Init+0xa2>
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d102      	bne.n	80002a0 <HAL_ADC_Init+0xa8>
 800029a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800029e:	e000      	b.n	80002a2 <HAL_ADC_Init+0xaa>
 80002a0:	2300      	movs	r3, #0
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	4313      	orrs	r3, r2
 80002a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7d1b      	ldrb	r3, [r3, #20]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d119      	bne.n	80002e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	7b1b      	ldrb	r3, [r3, #12]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d109      	bne.n	80002cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	3b01      	subs	r3, #1
 80002be:	035a      	lsls	r2, r3, #13
 80002c0:	693b      	ldr	r3, [r7, #16]
 80002c2:	4313      	orrs	r3, r2
 80002c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002c8:	613b      	str	r3, [r7, #16]
 80002ca:	e00b      	b.n	80002e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002d0:	f043 0220 	orr.w	r2, r3, #32
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002dc:	f043 0201 	orr.w	r2, r3, #1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	693a      	ldr	r2, [r7, #16]
 80002f4:	430a      	orrs	r2, r1
 80002f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <HAL_ADC_Init+0x1a8>)
 8000300:	4013      	ands	r3, r2
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	6812      	ldr	r2, [r2, #0]
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	430b      	orrs	r3, r1
 800030a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000314:	d003      	beq.n	800031e <HAL_ADC_Init+0x126>
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d104      	bne.n	8000328 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	3b01      	subs	r3, #1
 8000324:	051b      	lsls	r3, r3, #20
 8000326:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	430a      	orrs	r2, r1
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	689a      	ldr	r2, [r3, #8]
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <HAL_ADC_Init+0x1ac>)
 8000344:	4013      	ands	r3, r2
 8000346:	68ba      	ldr	r2, [r7, #8]
 8000348:	429a      	cmp	r2, r3
 800034a:	d10b      	bne.n	8000364 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2200      	movs	r2, #0
 8000350:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000356:	f023 0303 	bic.w	r3, r3, #3
 800035a:	f043 0201 	orr.w	r2, r3, #1
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000362:	e018      	b.n	8000396 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000368:	f023 0312 	bic.w	r3, r3, #18
 800036c:	f043 0210 	orr.w	r2, r3, #16
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000378:	f043 0201 	orr.w	r2, r3, #1
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000380:	2301      	movs	r3, #1
 8000382:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000384:	e007      	b.n	8000396 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800038a:	f043 0210 	orr.w	r2, r3, #16
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000392:	2301      	movs	r3, #1
 8000394:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000396:	7dfb      	ldrb	r3, [r7, #23]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	ffe1f7fd 	.word	0xffe1f7fd
 80003a4:	ff1f0efe 	.word	0xff1f0efe

080003a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003b2:	2300      	movs	r3, #0
 80003b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d101      	bne.n	80003c8 <HAL_ADC_ConfigChannel+0x20>
 80003c4:	2302      	movs	r3, #2
 80003c6:	e0dc      	b.n	8000582 <HAL_ADC_ConfigChannel+0x1da>
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	2b06      	cmp	r3, #6
 80003d6:	d81c      	bhi.n	8000412 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	685a      	ldr	r2, [r3, #4]
 80003e2:	4613      	mov	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	3b05      	subs	r3, #5
 80003ea:	221f      	movs	r2, #31
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	43db      	mvns	r3, r3
 80003f2:	4019      	ands	r1, r3
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	685a      	ldr	r2, [r3, #4]
 80003fc:	4613      	mov	r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	4413      	add	r3, r2
 8000402:	3b05      	subs	r3, #5
 8000404:	fa00 f203 	lsl.w	r2, r0, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	430a      	orrs	r2, r1
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
 8000410:	e03c      	b.n	800048c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	2b0c      	cmp	r3, #12
 8000418:	d81c      	bhi.n	8000454 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	685a      	ldr	r2, [r3, #4]
 8000424:	4613      	mov	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4413      	add	r3, r2
 800042a:	3b23      	subs	r3, #35	; 0x23
 800042c:	221f      	movs	r2, #31
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	43db      	mvns	r3, r3
 8000434:	4019      	ands	r1, r3
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	6818      	ldr	r0, [r3, #0]
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	4613      	mov	r3, r2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	4413      	add	r3, r2
 8000444:	3b23      	subs	r3, #35	; 0x23
 8000446:	fa00 f203 	lsl.w	r2, r0, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	430a      	orrs	r2, r1
 8000450:	631a      	str	r2, [r3, #48]	; 0x30
 8000452:	e01b      	b.n	800048c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	4613      	mov	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	3b41      	subs	r3, #65	; 0x41
 8000466:	221f      	movs	r2, #31
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	4019      	ands	r1, r3
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	4613      	mov	r3, r2
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	4413      	add	r3, r2
 800047e:	3b41      	subs	r3, #65	; 0x41
 8000480:	fa00 f203 	lsl.w	r2, r0, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	430a      	orrs	r2, r1
 800048a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b09      	cmp	r3, #9
 8000492:	d91c      	bls.n	80004ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	68d9      	ldr	r1, [r3, #12]
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	4613      	mov	r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	4413      	add	r3, r2
 80004a4:	3b1e      	subs	r3, #30
 80004a6:	2207      	movs	r2, #7
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	43db      	mvns	r3, r3
 80004ae:	4019      	ands	r1, r3
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	6898      	ldr	r0, [r3, #8]
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4613      	mov	r3, r2
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	4413      	add	r3, r2
 80004be:	3b1e      	subs	r3, #30
 80004c0:	fa00 f203 	lsl.w	r2, r0, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	e019      	b.n	8000502 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6919      	ldr	r1, [r3, #16]
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4613      	mov	r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	4413      	add	r3, r2
 80004de:	2207      	movs	r2, #7
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	43db      	mvns	r3, r3
 80004e6:	4019      	ands	r1, r3
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	6898      	ldr	r0, [r3, #8]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	fa00 f203 	lsl.w	r2, r0, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	430a      	orrs	r2, r1
 8000500:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b10      	cmp	r3, #16
 8000508:	d003      	beq.n	8000512 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800050e:	2b11      	cmp	r3, #17
 8000510:	d132      	bne.n	8000578 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a1d      	ldr	r2, [pc, #116]	; (800058c <HAL_ADC_ConfigChannel+0x1e4>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d125      	bne.n	8000568 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000526:	2b00      	cmp	r3, #0
 8000528:	d126      	bne.n	8000578 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000538:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b10      	cmp	r3, #16
 8000540:	d11a      	bne.n	8000578 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <HAL_ADC_ConfigChannel+0x1e8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a13      	ldr	r2, [pc, #76]	; (8000594 <HAL_ADC_ConfigChannel+0x1ec>)
 8000548:	fba2 2303 	umull	r2, r3, r2, r3
 800054c:	0c9a      	lsrs	r2, r3, #18
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000558:	e002      	b.n	8000560 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	3b01      	subs	r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1f9      	bne.n	800055a <HAL_ADC_ConfigChannel+0x1b2>
 8000566:	e007      	b.n	8000578 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800056c:	f043 0220 	orr.w	r2, r3, #32
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000574:	2301      	movs	r3, #1
 8000576:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000580:	7bfb      	ldrb	r3, [r7, #15]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40012400 	.word	0x40012400
 8000590:	20000070 	.word	0x20000070
 8000594:	431bde83 	.word	0x431bde83

08000598 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d127      	bne.n	8000602 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	689a      	ldr	r2, [r3, #8]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f022 0201 	bic.w	r2, r2, #1
 80005c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80005c2:	f7ff fded 	bl	80001a0 <HAL_GetTick>
 80005c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80005c8:	e014      	b.n	80005f4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80005ca:	f7ff fde9 	bl	80001a0 <HAL_GetTick>
 80005ce:	4602      	mov	r2, r0
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d90d      	bls.n	80005f4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005dc:	f043 0210 	orr.w	r2, r3, #16
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e8:	f043 0201 	orr.w	r2, r3, #1
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e007      	b.n	8000604 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d0e3      	beq.n	80005ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4906      	ldr	r1, [pc, #24]	; (80006a4 <__NVIC_EnableIRQ+0x34>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff4f 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000788:	f7ff ff64 	bl	8000654 <__NVIC_GetPriorityGrouping>
 800078c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff ffb2 	bl	80006fc <NVIC_EncodePriority>
 8000798:	4602      	mov	r2, r0
 800079a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff81 	bl	80006a8 <__NVIC_SetPriority>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff57 	bl	8000670 <__NVIC_EnableIRQ>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	e00e      	b.n	80007fa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	795b      	ldrb	r3, [r3, #5]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d105      	bne.n	80007f2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f00a fd13 	bl	800b218 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2201      	movs	r2, #1
 80007f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e043      	b.n	80008a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <HAL_DMA_Init+0xa8>)
 8000822:	4413      	add	r3, r2
 8000824:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <HAL_DMA_Init+0xac>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	091b      	lsrs	r3, r3, #4
 800082c:	009a      	lsls	r2, r3, #2
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <HAL_DMA_Init+0xb0>)
 8000836:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2202      	movs	r2, #2
 800083c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800084e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000852:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800085c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4313      	orrs	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2201      	movs	r2, #1
 8000894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	bffdfff8 	.word	0xbffdfff8
 80008b0:	cccccccd 	.word	0xcccccccd
 80008b4:	40020000 	.word	0x40020000

080008b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d101      	bne.n	80008d8 <HAL_DMA_Start_IT+0x20>
 80008d4:	2302      	movs	r3, #2
 80008d6:	e04a      	b.n	800096e <HAL_DMA_Start_IT+0xb6>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2201      	movs	r2, #1
 80008dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d13a      	bne.n	8000960 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2202      	movs	r2, #2
 80008ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2200      	movs	r2, #0
 80008f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 0201 	bic.w	r2, r2, #1
 8000906:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f000 f9ae 	bl	8000c70 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	2b00      	cmp	r3, #0
 800091a:	d008      	beq.n	800092e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 020e 	orr.w	r2, r2, #14
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	e00f      	b.n	800094e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f022 0204 	bic.w	r2, r2, #4
 800093c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f042 020a 	orr.w	r2, r2, #10
 800094c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f042 0201 	orr.w	r2, r2, #1
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	e005      	b.n	800096c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000968:	2302      	movs	r3, #2
 800096a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800096c:	7dfb      	ldrb	r3, [r7, #23]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800098a:	2b02      	cmp	r3, #2
 800098c:	d005      	beq.n	800099a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2204      	movs	r2, #4
 8000992:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e051      	b.n	8000a3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 020e 	bic.w	r2, r2, #14
 80009a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0201 	bic.w	r2, r2, #1
 80009b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <HAL_DMA_Abort_IT+0xd0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d029      	beq.n	8000a18 <HAL_DMA_Abort_IT+0xa0>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <HAL_DMA_Abort_IT+0xd4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d022      	beq.n	8000a14 <HAL_DMA_Abort_IT+0x9c>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <HAL_DMA_Abort_IT+0xd8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d01a      	beq.n	8000a0e <HAL_DMA_Abort_IT+0x96>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <HAL_DMA_Abort_IT+0xdc>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d012      	beq.n	8000a08 <HAL_DMA_Abort_IT+0x90>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <HAL_DMA_Abort_IT+0xe0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d00a      	beq.n	8000a02 <HAL_DMA_Abort_IT+0x8a>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <HAL_DMA_Abort_IT+0xe4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d102      	bne.n	80009fc <HAL_DMA_Abort_IT+0x84>
 80009f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009fa:	e00e      	b.n	8000a1a <HAL_DMA_Abort_IT+0xa2>
 80009fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a00:	e00b      	b.n	8000a1a <HAL_DMA_Abort_IT+0xa2>
 8000a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a06:	e008      	b.n	8000a1a <HAL_DMA_Abort_IT+0xa2>
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	e005      	b.n	8000a1a <HAL_DMA_Abort_IT+0xa2>
 8000a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a12:	e002      	b.n	8000a1a <HAL_DMA_Abort_IT+0xa2>
 8000a14:	2310      	movs	r3, #16
 8000a16:	e000      	b.n	8000a1a <HAL_DMA_Abort_IT+0xa2>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <HAL_DMA_Abort_IT+0xe8>)
 8000a1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2201      	movs	r2, #1
 8000a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	4798      	blx	r3
    } 
  }
  return status;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40020008 	.word	0x40020008
 8000a4c:	4002001c 	.word	0x4002001c
 8000a50:	40020030 	.word	0x40020030
 8000a54:	40020044 	.word	0x40020044
 8000a58:	40020058 	.word	0x40020058
 8000a5c:	4002006c 	.word	0x4002006c
 8000a60:	40020000 	.word	0x40020000

08000a64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	2204      	movs	r2, #4
 8000a82:	409a      	lsls	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d04f      	beq.n	8000b2c <HAL_DMA_IRQHandler+0xc8>
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d04a      	beq.n	8000b2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0204 	bic.w	r2, r2, #4
 8000ab2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a66      	ldr	r2, [pc, #408]	; (8000c54 <HAL_DMA_IRQHandler+0x1f0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d029      	beq.n	8000b12 <HAL_DMA_IRQHandler+0xae>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a65      	ldr	r2, [pc, #404]	; (8000c58 <HAL_DMA_IRQHandler+0x1f4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d022      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xaa>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a63      	ldr	r2, [pc, #396]	; (8000c5c <HAL_DMA_IRQHandler+0x1f8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d01a      	beq.n	8000b08 <HAL_DMA_IRQHandler+0xa4>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a62      	ldr	r2, [pc, #392]	; (8000c60 <HAL_DMA_IRQHandler+0x1fc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d012      	beq.n	8000b02 <HAL_DMA_IRQHandler+0x9e>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a60      	ldr	r2, [pc, #384]	; (8000c64 <HAL_DMA_IRQHandler+0x200>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d00a      	beq.n	8000afc <HAL_DMA_IRQHandler+0x98>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a5f      	ldr	r2, [pc, #380]	; (8000c68 <HAL_DMA_IRQHandler+0x204>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d102      	bne.n	8000af6 <HAL_DMA_IRQHandler+0x92>
 8000af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af4:	e00e      	b.n	8000b14 <HAL_DMA_IRQHandler+0xb0>
 8000af6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000afa:	e00b      	b.n	8000b14 <HAL_DMA_IRQHandler+0xb0>
 8000afc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b00:	e008      	b.n	8000b14 <HAL_DMA_IRQHandler+0xb0>
 8000b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b06:	e005      	b.n	8000b14 <HAL_DMA_IRQHandler+0xb0>
 8000b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0c:	e002      	b.n	8000b14 <HAL_DMA_IRQHandler+0xb0>
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	e000      	b.n	8000b14 <HAL_DMA_IRQHandler+0xb0>
 8000b12:	2304      	movs	r3, #4
 8000b14:	4a55      	ldr	r2, [pc, #340]	; (8000c6c <HAL_DMA_IRQHandler+0x208>)
 8000b16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 8094 	beq.w	8000c4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000b2a:	e08e      	b.n	8000c4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	2202      	movs	r2, #2
 8000b32:	409a      	lsls	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d056      	beq.n	8000bea <HAL_DMA_IRQHandler+0x186>
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d051      	beq.n	8000bea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 0320 	and.w	r3, r3, #32
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10b      	bne.n	8000b6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 020a 	bic.w	r2, r2, #10
 8000b62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <HAL_DMA_IRQHandler+0x1f0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d029      	beq.n	8000bca <HAL_DMA_IRQHandler+0x166>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a37      	ldr	r2, [pc, #220]	; (8000c58 <HAL_DMA_IRQHandler+0x1f4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d022      	beq.n	8000bc6 <HAL_DMA_IRQHandler+0x162>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a35      	ldr	r2, [pc, #212]	; (8000c5c <HAL_DMA_IRQHandler+0x1f8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d01a      	beq.n	8000bc0 <HAL_DMA_IRQHandler+0x15c>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a34      	ldr	r2, [pc, #208]	; (8000c60 <HAL_DMA_IRQHandler+0x1fc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d012      	beq.n	8000bba <HAL_DMA_IRQHandler+0x156>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <HAL_DMA_IRQHandler+0x200>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d00a      	beq.n	8000bb4 <HAL_DMA_IRQHandler+0x150>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a31      	ldr	r2, [pc, #196]	; (8000c68 <HAL_DMA_IRQHandler+0x204>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d102      	bne.n	8000bae <HAL_DMA_IRQHandler+0x14a>
 8000ba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000bac:	e00e      	b.n	8000bcc <HAL_DMA_IRQHandler+0x168>
 8000bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bb2:	e00b      	b.n	8000bcc <HAL_DMA_IRQHandler+0x168>
 8000bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bb8:	e008      	b.n	8000bcc <HAL_DMA_IRQHandler+0x168>
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	e005      	b.n	8000bcc <HAL_DMA_IRQHandler+0x168>
 8000bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc4:	e002      	b.n	8000bcc <HAL_DMA_IRQHandler+0x168>
 8000bc6:	2320      	movs	r3, #32
 8000bc8:	e000      	b.n	8000bcc <HAL_DMA_IRQHandler+0x168>
 8000bca:	2302      	movs	r3, #2
 8000bcc:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <HAL_DMA_IRQHandler+0x208>)
 8000bce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d034      	beq.n	8000c4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000be8:	e02f      	b.n	8000c4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2208      	movs	r2, #8
 8000bf0:	409a      	lsls	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d028      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x1e8>
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d023      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 020e 	bic.w	r2, r2, #14
 8000c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	4798      	blx	r3
    }
  }
  return;
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
}
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40020008 	.word	0x40020008
 8000c58:	4002001c 	.word	0x4002001c
 8000c5c:	40020030 	.word	0x40020030
 8000c60:	40020044 	.word	0x40020044
 8000c64:	40020058 	.word	0x40020058
 8000c68:	4002006c 	.word	0x4002006c
 8000c6c:	40020000 	.word	0x40020000

08000c70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c86:	2101      	movs	r1, #1
 8000c88:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b10      	cmp	r3, #16
 8000c9c:	d108      	bne.n	8000cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000cae:	e007      	b.n	8000cc0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	60da      	str	r2, [r3, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
	...

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b08b      	sub	sp, #44	; 0x2c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cde:	e127      	b.n	8000f30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	f040 8116 	bne.w	8000f2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b12      	cmp	r3, #18
 8000d04:	d034      	beq.n	8000d70 <HAL_GPIO_Init+0xa4>
 8000d06:	2b12      	cmp	r3, #18
 8000d08:	d80d      	bhi.n	8000d26 <HAL_GPIO_Init+0x5a>
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d02b      	beq.n	8000d66 <HAL_GPIO_Init+0x9a>
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d804      	bhi.n	8000d1c <HAL_GPIO_Init+0x50>
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d031      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d01c      	beq.n	8000d54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d1a:	e048      	b.n	8000dae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d043      	beq.n	8000da8 <HAL_GPIO_Init+0xdc>
 8000d20:	2b11      	cmp	r3, #17
 8000d22:	d01b      	beq.n	8000d5c <HAL_GPIO_Init+0x90>
          break;
 8000d24:	e043      	b.n	8000dae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d26:	4a89      	ldr	r2, [pc, #548]	; (8000f4c <HAL_GPIO_Init+0x280>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d026      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d2c:	4a87      	ldr	r2, [pc, #540]	; (8000f4c <HAL_GPIO_Init+0x280>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d806      	bhi.n	8000d40 <HAL_GPIO_Init+0x74>
 8000d32:	4a87      	ldr	r2, [pc, #540]	; (8000f50 <HAL_GPIO_Init+0x284>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d020      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d38:	4a86      	ldr	r2, [pc, #536]	; (8000f54 <HAL_GPIO_Init+0x288>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01d      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
          break;
 8000d3e:	e036      	b.n	8000dae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d40:	4a85      	ldr	r2, [pc, #532]	; (8000f58 <HAL_GPIO_Init+0x28c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d019      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d46:	4a85      	ldr	r2, [pc, #532]	; (8000f5c <HAL_GPIO_Init+0x290>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d016      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
 8000d4c:	4a84      	ldr	r2, [pc, #528]	; (8000f60 <HAL_GPIO_Init+0x294>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d013      	beq.n	8000d7a <HAL_GPIO_Init+0xae>
          break;
 8000d52:	e02c      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	623b      	str	r3, [r7, #32]
          break;
 8000d5a:	e028      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	3304      	adds	r3, #4
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	e023      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	3308      	adds	r3, #8
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e01e      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	330c      	adds	r3, #12
 8000d76:	623b      	str	r3, [r7, #32]
          break;
 8000d78:	e019      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d82:	2304      	movs	r3, #4
 8000d84:	623b      	str	r3, [r7, #32]
          break;
 8000d86:	e012      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d105      	bne.n	8000d9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d90:	2308      	movs	r3, #8
 8000d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	611a      	str	r2, [r3, #16]
          break;
 8000d9a:	e008      	b.n	8000dae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	615a      	str	r2, [r3, #20]
          break;
 8000da6:	e002      	b.n	8000dae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	2bff      	cmp	r3, #255	; 0xff
 8000db2:	d801      	bhi.n	8000db8 <HAL_GPIO_Init+0xec>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	e001      	b.n	8000dbc <HAL_GPIO_Init+0xf0>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3304      	adds	r3, #4
 8000dbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	2bff      	cmp	r3, #255	; 0xff
 8000dc2:	d802      	bhi.n	8000dca <HAL_GPIO_Init+0xfe>
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x104>
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	401a      	ands	r2, r3
 8000de2:	6a39      	ldr	r1, [r7, #32]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	431a      	orrs	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 8096 	beq.w	8000f2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dfe:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <HAL_GPIO_Init+0x298>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a58      	ldr	r2, [pc, #352]	; (8000f64 <HAL_GPIO_Init+0x298>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6193      	str	r3, [r2, #24]
 8000e0a:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <HAL_GPIO_Init+0x298>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e16:	4a54      	ldr	r2, [pc, #336]	; (8000f68 <HAL_GPIO_Init+0x29c>)
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4013      	ands	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4b      	ldr	r2, [pc, #300]	; (8000f6c <HAL_GPIO_Init+0x2a0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x19e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4a      	ldr	r2, [pc, #296]	; (8000f70 <HAL_GPIO_Init+0x2a4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x19a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a49      	ldr	r2, [pc, #292]	; (8000f74 <HAL_GPIO_Init+0x2a8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x196>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2ac>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x192>
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x1a0>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x1a0>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x1a0>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x1a0>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e7c:	493a      	ldr	r1, [pc, #232]	; (8000f68 <HAL_GPIO_Init+0x29c>)
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d006      	beq.n	8000ea4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4938      	ldr	r1, [pc, #224]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
 8000ea2:	e006      	b.n	8000eb2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea4:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4933      	ldr	r1, [pc, #204]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	492e      	ldr	r1, [pc, #184]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	604b      	str	r3, [r1, #4]
 8000eca:	e006      	b.n	8000eda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	4929      	ldr	r1, [pc, #164]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	4924      	ldr	r1, [pc, #144]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	608b      	str	r3, [r1, #8]
 8000ef2:	e006      	b.n	8000f02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	491f      	ldr	r1, [pc, #124]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	491a      	ldr	r1, [pc, #104]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60cb      	str	r3, [r1, #12]
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4915      	ldr	r1, [pc, #84]	; (8000f7c <HAL_GPIO_Init+0x2b0>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f47f aed0 	bne.w	8000ce0 <HAL_GPIO_Init+0x14>
  }
}
 8000f40:	bf00      	nop
 8000f42:	372c      	adds	r7, #44	; 0x2c
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	10210000 	.word	0x10210000
 8000f50:	10110000 	.word	0x10110000
 8000f54:	10120000 	.word	0x10120000
 8000f58:	10310000 	.word	0x10310000
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10220000 	.word	0x10220000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	40011000 	.word	0x40011000
 8000f78:	40011400 	.word	0x40011400
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f9c:	e003      	b.n	8000fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	041a      	lsls	r2, r3, #16
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	611a      	str	r2, [r3, #16]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e10f      	b.n	80011e2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f00a fc2e 	bl	800b838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2224      	movs	r2, #36	; 0x24
 8000fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ff4:	f001 fbe6 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8000ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4a7b      	ldr	r2, [pc, #492]	; (80011ec <HAL_I2C_Init+0x23c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d807      	bhi.n	8001014 <HAL_I2C_Init+0x64>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <HAL_I2C_Init+0x240>)
 8001008:	4293      	cmp	r3, r2
 800100a:	bf94      	ite	ls
 800100c:	2301      	movls	r3, #1
 800100e:	2300      	movhi	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	e006      	b.n	8001022 <HAL_I2C_Init+0x72>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4a77      	ldr	r2, [pc, #476]	; (80011f4 <HAL_I2C_Init+0x244>)
 8001018:	4293      	cmp	r3, r2
 800101a:	bf94      	ite	ls
 800101c:	2301      	movls	r3, #1
 800101e:	2300      	movhi	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0db      	b.n	80011e2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4a72      	ldr	r2, [pc, #456]	; (80011f8 <HAL_I2C_Init+0x248>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0c9b      	lsrs	r3, r3, #18
 8001034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	430a      	orrs	r2, r1
 8001048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a64      	ldr	r2, [pc, #400]	; (80011ec <HAL_I2C_Init+0x23c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d802      	bhi.n	8001064 <HAL_I2C_Init+0xb4>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	3301      	adds	r3, #1
 8001062:	e009      	b.n	8001078 <HAL_I2C_Init+0xc8>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a63      	ldr	r2, [pc, #396]	; (80011fc <HAL_I2C_Init+0x24c>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	099b      	lsrs	r3, r3, #6
 8001076:	3301      	adds	r3, #1
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	430b      	orrs	r3, r1
 800107e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800108a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4956      	ldr	r1, [pc, #344]	; (80011ec <HAL_I2C_Init+0x23c>)
 8001094:	428b      	cmp	r3, r1
 8001096:	d80d      	bhi.n	80010b4 <HAL_I2C_Init+0x104>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1e59      	subs	r1, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a6:	3301      	adds	r3, #1
 80010a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	bf38      	it	cc
 80010b0:	2304      	movcc	r3, #4
 80010b2:	e04f      	b.n	8001154 <HAL_I2C_Init+0x1a4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d111      	bne.n	80010e0 <HAL_I2C_Init+0x130>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1e58      	subs	r0, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	440b      	add	r3, r1
 80010ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf0c      	ite	eq
 80010d8:	2301      	moveq	r3, #1
 80010da:	2300      	movne	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	e012      	b.n	8001106 <HAL_I2C_Init+0x156>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1e58      	subs	r0, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6859      	ldr	r1, [r3, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	0099      	lsls	r1, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010f6:	3301      	adds	r3, #1
 80010f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf0c      	ite	eq
 8001100:	2301      	moveq	r3, #1
 8001102:	2300      	movne	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_I2C_Init+0x15e>
 800110a:	2301      	movs	r3, #1
 800110c:	e022      	b.n	8001154 <HAL_I2C_Init+0x1a4>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10e      	bne.n	8001134 <HAL_I2C_Init+0x184>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1e58      	subs	r0, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6859      	ldr	r1, [r3, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	440b      	add	r3, r1
 8001124:	fbb0 f3f3 	udiv	r3, r0, r3
 8001128:	3301      	adds	r3, #1
 800112a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800112e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001132:	e00f      	b.n	8001154 <HAL_I2C_Init+0x1a4>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	1e58      	subs	r0, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	0099      	lsls	r1, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	fbb0 f3f3 	udiv	r3, r0, r3
 800114a:	3301      	adds	r3, #1
 800114c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	6809      	ldr	r1, [r1, #0]
 8001158:	4313      	orrs	r3, r2
 800115a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69da      	ldr	r2, [r3, #28]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6911      	ldr	r1, [r2, #16]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68d2      	ldr	r2, [r2, #12]
 800118e:	4311      	orrs	r1, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	430b      	orrs	r3, r1
 8001196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2220      	movs	r2, #32
 80011ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	000186a0 	.word	0x000186a0
 80011f0:	001e847f 	.word	0x001e847f
 80011f4:	003d08ff 	.word	0x003d08ff
 80011f8:	431bde83 	.word	0x431bde83
 80011fc:	10624dd3 	.word	0x10624dd3

08001200 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e02b      	b.n	800126a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800121a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f245 5255 	movw	r2, #21845	; 0x5555
 8001224:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6852      	ldr	r2, [r2, #4]
 800122e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6892      	ldr	r2, [r2, #8]
 8001238:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800123a:	f7fe ffb1 	bl	80001a0 <HAL_GetTick>
 800123e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 8001240:	e008      	b.n	8001254 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001242:	f7fe ffad 	bl	80001a0 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b30      	cmp	r3, #48	; 0x30
 800124e:	d901      	bls.n	8001254 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e00a      	b.n	800126a <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f1      	bne.n	8001242 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001266:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001274:	b08b      	sub	sp, #44	; 0x2c
 8001276:	af06      	add	r7, sp, #24
 8001278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0d3      	b.n	800142c <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d106      	bne.n	800129e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f00b fa25 	bl	800c6e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2203      	movs	r2, #3
 80012a2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fccf 	bl	8004c4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	687e      	ldr	r6, [r7, #4]
 80012b8:	466d      	mov	r5, sp
 80012ba:	f106 0410 	add.w	r4, r6, #16
 80012be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	602b      	str	r3, [r5, #0]
 80012c6:	1d33      	adds	r3, r6, #4
 80012c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f003 fc98 	bl	8004c00 <USB_CoreInit>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2202      	movs	r2, #2
 80012da:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0a4      	b.n	800142c <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fccc 	bl	8004c86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e035      	b.n	8001360 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	4413      	add	r3, r2
 80012fc:	3329      	adds	r3, #41	; 0x29
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	4413      	add	r3, r2
 800130a:	3328      	adds	r3, #40	; 0x28
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	b291      	uxth	r1, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	015b      	lsls	r3, r3, #5
 800131a:	4413      	add	r3, r2
 800131c:	3336      	adds	r3, #54	; 0x36
 800131e:	460a      	mov	r2, r1
 8001320:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	015b      	lsls	r3, r3, #5
 8001328:	4413      	add	r3, r2
 800132a:	332b      	adds	r3, #43	; 0x2b
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	015b      	lsls	r3, r3, #5
 8001336:	4413      	add	r3, r2
 8001338:	3338      	adds	r3, #56	; 0x38
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	4413      	add	r3, r2
 8001346:	333c      	adds	r3, #60	; 0x3c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	3302      	adds	r3, #2
 8001352:	015b      	lsls	r3, r3, #5
 8001354:	4413      	add	r3, r2
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	3301      	adds	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	d3c4      	bcc.n	80012f4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e031      	b.n	80013d4 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	015b      	lsls	r3, r3, #5
 8001376:	4413      	add	r3, r2
 8001378:	f203 1329 	addw	r3, r3, #297	; 0x129
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	4413      	add	r3, r2
 8001388:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	015b      	lsls	r3, r3, #5
 8001396:	4413      	add	r3, r2
 8001398:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	015b      	lsls	r3, r3, #5
 80013b6:	4413      	add	r3, r2
 80013b8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	330a      	adds	r3, #10
 80013c6:	015b      	lsls	r3, r3, #5
 80013c8:	4413      	add	r3, r2
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3c8      	bcc.n	8001370 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	687e      	ldr	r6, [r7, #4]
 80013e6:	466d      	mov	r5, sp
 80013e8:	f106 0410 	add.w	r4, r6, #16
 80013ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	602b      	str	r3, [r5, #0]
 80013f4:	1d33      	adds	r3, r6, #4
 80013f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	f003 fc50 	bl	8004c9e <USB_DevInit>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e00d      	b.n	800142c <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fb0e 	bl	8005a46 <USB_DevDisconnect>

  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001434 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_PCD_Start+0x16>
 8001446:	2302      	movs	r3, #2
 8001448:	e016      	b.n	8001478 <HAL_PCD_Start+0x44>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001452:	2101      	movs	r1, #1
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f00b fb7c 	bl	800cb52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f004 fae7 	bl	8005a32 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fbd9 	bl	8004c20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_PCD_Stop+0x16>
 8001492:	2302      	movs	r3, #2
 8001494:	e020      	b.n	80014d8 <HAL_PCD_Stop+0x58>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  __HAL_PCD_DISABLE(hpcd);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fbd3 	bl	8004c4e <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fa97 	bl	80059e0 <USB_StopDevice>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e009      	b.n	80014d8 <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fabc 	bl	8005a46 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fab4 	bl	8005a5a <USB_ReadInterrupts>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014fc:	d102      	bne.n	8001504 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fa9c 	bl	8001a3c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f004 faa6 	bl	8005a5a <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d112      	bne.n	8001540 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001522:	b29a      	uxth	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800152c:	b292      	uxth	r2, r2
 800152e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f00b f94d 	bl	800c7d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001538:	2100      	movs	r1, #0
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f8de 	bl	80016fc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f004 fa88 	bl	8005a5a <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001554:	d10b      	bne.n	800156e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001568:	b292      	uxth	r2, r2
 800156a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fa71 	bl	8005a5a <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800157e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001582:	d10b      	bne.n	800159c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001596:	b292      	uxth	r2, r2
 8001598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 fa5a 	bl	8005a5a <USB_ReadInterrupts>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b0:	d126      	bne.n	8001600 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0204 	bic.w	r2, r2, #4
 80015c4:	b292      	uxth	r2, r2
 80015c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0208 	bic.w	r2, r2, #8
 80015dc:	b292      	uxth	r2, r2
 80015de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f00b f92e 	bl	800c844 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015fa:	b292      	uxth	r2, r2
 80015fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f004 fa28 	bl	8005a5a <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001614:	d13d      	bne.n	8001692 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0208 	orr.w	r2, r2, #8
 8001628:	b292      	uxth	r2, r2
 800162a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001640:	b292      	uxth	r2, r2
 8001642:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0204 	orr.w	r2, r2, #4
 8001658:	b292      	uxth	r2, r2
 800165a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f004 f9f9 	bl	8005a5a <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001672:	d10b      	bne.n	800168c <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001686:	b292      	uxth	r2, r2
 8001688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f00b f8bf 	bl	800c810 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f004 f9df 	bl	8005a5a <USB_ReadInterrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a6:	d10e      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016ba:	b292      	uxth	r2, r2
 80016bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f00b f878 	bl	800c7b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f004 f9c5 	bl	8005a5a <USB_ReadInterrupts>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016da:	d10b      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ee:	b292      	uxth	r2, r2
 80016f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_PCD_SetAddress+0x1a>
 8001712:	2302      	movs	r3, #2
 8001714:	e013      	b.n	800173e <HAL_PCD_SetAddress+0x42>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	78fa      	ldrb	r2, [r7, #3]
 8001722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f004 f96c 	bl	8005a0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	4608      	mov	r0, r1
 8001750:	4611      	mov	r1, r2
 8001752:	461a      	mov	r2, r3
 8001754:	4603      	mov	r3, r0
 8001756:	70fb      	strb	r3, [r7, #3]
 8001758:	460b      	mov	r3, r1
 800175a:	803b      	strh	r3, [r7, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001768:	2b00      	cmp	r3, #0
 800176a:	da0b      	bge.n	8001784 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	015b      	lsls	r3, r3, #5
 8001774:	3328      	adds	r3, #40	; 0x28
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	705a      	strb	r2, [r3, #1]
 8001782:	e00b      	b.n	800179c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80017a8:	883a      	ldrh	r2, [r7, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	78ba      	ldrb	r2, [r7, #2]
 80017b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017c6:	78bb      	ldrb	r3, [r7, #2]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d102      	bne.n	80017d2 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_PCD_EP_Open+0x9a>
 80017dc:	2302      	movs	r3, #2
 80017de:	e00e      	b.n	80017fe <HAL_PCD_EP_Open+0xb8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fa7a 	bl	8004ce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80017fc:	7afb      	ldrb	r3, [r7, #11]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	460b      	mov	r3, r1
 8001814:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001816:	7afb      	ldrb	r3, [r7, #11]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4413      	add	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2200      	movs	r2, #0
 800183e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	b2da      	uxtb	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6979      	ldr	r1, [r7, #20]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fd31 	bl	80052c4 <USB_EPStartXfer>
 8001862:	e005      	b.n	8001870 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fd2a 	bl	80052c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	460b      	mov	r3, r1
 8001888:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188a:	7afb      	ldrb	r3, [r7, #11]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	015b      	lsls	r3, r3, #5
 8001892:	3328      	adds	r3, #40	; 0x28
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2201      	movs	r2, #1
 80018b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d106      	bne.n	80018d6 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6979      	ldr	r1, [r7, #20]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fcf8 	bl	80052c4 <USB_EPStartXfer>
 80018d4:	e005      	b.n	80018e2 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6979      	ldr	r1, [r7, #20]
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fcf1 	bl	80052c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	f003 0207 	and.w	r2, r3, #7
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d901      	bls.n	800190a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e046      	b.n	8001998 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800190a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800190e:	2b00      	cmp	r3, #0
 8001910:	da0b      	bge.n	800192a <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	015b      	lsls	r3, r3, #5
 800191a:	3328      	adds	r3, #40	; 0x28
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	705a      	strb	r2, [r3, #1]
 8001928:	e009      	b.n	800193e <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	015b      	lsls	r3, r3, #5
 800192e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_PCD_EP_SetStall+0x72>
 800195a:	2302      	movs	r3, #2
 800195c:	e01c      	b.n	8001998 <HAL_PCD_EP_SetStall+0xac>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68f9      	ldr	r1, [r7, #12]
 800196c:	4618      	mov	r0, r3
 800196e:	f003 ff61 	bl	8005834 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	2b00      	cmp	r3, #0
 800197a:	d108      	bne.n	800198e <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001986:	4619      	mov	r1, r3
 8001988:	4610      	mov	r0, r2
 800198a:	f004 f875 	bl	8005a78 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	f003 020f 	and.w	r2, r3, #15
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d901      	bls.n	80019be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e03a      	b.n	8001a34 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	da0b      	bge.n	80019de <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	015b      	lsls	r3, r3, #5
 80019ce:	3328      	adds	r3, #40	; 0x28
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	705a      	strb	r2, [r3, #1]
 80019dc:	e00b      	b.n	80019f6 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	015b      	lsls	r3, r3, #5
 80019e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_PCD_EP_ClrStall+0x76>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e00e      	b.n	8001a34 <HAL_PCD_EP_ClrStall+0x94>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68f9      	ldr	r1, [r7, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 ff47 	bl	80058b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a44:	e282      	b.n	8001f4c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a4e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a50:	8afb      	ldrh	r3, [r7, #22]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001a5a:	7d7b      	ldrb	r3, [r7, #21]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 8142 	bne.w	8001ce6 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a62:	8afb      	ldrh	r3, [r7, #22]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d151      	bne.n	8001b10 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7c:	b29c      	uxth	r4, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3328      	adds	r3, #40	; 0x28
 8001a92:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	441a      	add	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f00a fe59 	bl	800c788 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8234 	beq.w	8001f4c <PCD_EP_ISR_Handler+0x510>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 822f 	bne.w	8001f4c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b292      	uxth	r2, r2
 8001b02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b0e:	e21d      	b.n	8001f4c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b16:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b20:	8a7b      	ldrh	r3, [r7, #18]
 8001b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d033      	beq.n	8001b92 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3306      	adds	r3, #6
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	f003 ffd4 	bl	8005b16 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	b29c      	uxth	r4, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001b86:	b292      	uxth	r2, r2
 8001b88:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f00a fdd2 	bl	800c734 <HAL_PCD_SetupStageCallback>
 8001b90:	e1dc      	b.n	8001f4c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f280 81d8 	bge.w	8001f4c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ba8:	4013      	ands	r3, r2
 8001baa:	b29c      	uxth	r4, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001bb4:	b292      	uxth	r2, r2
 8001bb6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3306      	adds	r3, #6
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d019      	beq.n	8001c20 <PCD_EP_ISR_Handler+0x1e4>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d015      	beq.n	8001c20 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6959      	ldr	r1, [r3, #20]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	f003 ff86 	bl	8005b16 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	441a      	add	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c18:	2100      	movs	r1, #0
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f00a fd9c 	bl	800c758 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461c      	mov	r4, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	441c      	add	r4, r3
 8001c32:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001c36:	461c      	mov	r4, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10e      	bne.n	8001c5e <PCD_EP_ISR_Handler+0x222>
 8001c40:	8823      	ldrh	r3, [r4, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	8023      	strh	r3, [r4, #0]
 8001c4c:	8823      	ldrh	r3, [r4, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	8023      	strh	r3, [r4, #0]
 8001c5c:	e02d      	b.n	8001cba <PCD_EP_ISR_Handler+0x27e>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b3e      	cmp	r3, #62	; 0x3e
 8001c64:	d812      	bhi.n	8001c8c <PCD_EP_ISR_Handler+0x250>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <PCD_EP_ISR_Handler+0x244>
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	029b      	lsls	r3, r3, #10
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	8023      	strh	r3, [r4, #0]
 8001c8a:	e016      	b.n	8001cba <PCD_EP_ISR_Handler+0x27e>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <PCD_EP_ISR_Handler+0x26a>
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	029b      	lsls	r3, r3, #10
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cca:	b29c      	uxth	r4, r3
 8001ccc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001cd0:	b29c      	uxth	r4, r3
 8001cd2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001cd6:	b29c      	uxth	r4, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4ba2      	ldr	r3, [pc, #648]	; (8001f68 <PCD_EP_ISR_Handler+0x52c>)
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	8013      	strh	r3, [r2, #0]
 8001ce4:	e132      	b.n	8001f4c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	7d7b      	ldrb	r3, [r7, #21]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f280 80d1 	bge.w	8001ea2 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	7d7b      	ldrb	r3, [r7, #21]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d14:	4013      	ands	r3, r2
 8001d16:	b29c      	uxth	r4, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	7d7b      	ldrb	r3, [r7, #21]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d2c:	7d7b      	ldrb	r3, [r7, #21]
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	7b1b      	ldrb	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d121      	bne.n	8001d86 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	3306      	adds	r3, #6
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d6a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d072      	beq.n	8001e58 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6959      	ldr	r1, [r3, #20]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	88da      	ldrh	r2, [r3, #6]
 8001d7e:	8bfb      	ldrh	r3, [r7, #30]
 8001d80:	f003 fec9 	bl	8005b16 <USB_ReadPMA>
 8001d84:	e068      	b.n	8001e58 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d021      	beq.n	8001de4 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	3302      	adds	r3, #2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dc8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001dca:	8bfb      	ldrh	r3, [r7, #30]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d02a      	beq.n	8001e26 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6959      	ldr	r1, [r3, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	891a      	ldrh	r2, [r3, #8]
 8001ddc:	8bfb      	ldrh	r3, [r7, #30]
 8001dde:	f003 fe9a 	bl	8005b16 <USB_ReadPMA>
 8001de2:	e020      	b.n	8001e26 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	3306      	adds	r3, #6
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e0c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6959      	ldr	r1, [r3, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	895a      	ldrh	r2, [r3, #10]
 8001e20:	8bfb      	ldrh	r3, [r7, #30]
 8001e22:	f003 fe78 	bl	8005b16 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e40:	b29c      	uxth	r4, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	441a      	add	r2, r3
 8001e50:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <PCD_EP_ISR_Handler+0x530>)
 8001e52:	4323      	orrs	r3, r4
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	8bfb      	ldrh	r3, [r7, #30]
 8001e5e:	441a      	add	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	8bfb      	ldrh	r3, [r7, #30]
 8001e6a:	441a      	add	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <PCD_EP_ISR_Handler+0x446>
 8001e78:	8bfa      	ldrh	r2, [r7, #30]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d206      	bcs.n	8001e90 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4619      	mov	r1, r3
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f00a fc65 	bl	800c758 <HAL_PCD_DataOutStageCallback>
 8001e8e:	e008      	b.n	8001ea2 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	7819      	ldrb	r1, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fcb2 	bl	8001806 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ea2:	8a7b      	ldrh	r3, [r7, #18]
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d04f      	beq.n	8001f4c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001eac:	7d7b      	ldrb	r3, [r7, #21]
 8001eae:	015b      	lsls	r3, r3, #5
 8001eb0:	3328      	adds	r3, #40	; 0x28
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	7d7b      	ldrb	r3, [r7, #21]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed0:	b29c      	uxth	r4, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	7d7b      	ldrb	r3, [r7, #21]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	441a      	add	r2, r3
 8001ede:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	3302      	adds	r3, #2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	441a      	add	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d106      	bne.n	8001f3a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f00a fc28 	bl	800c788 <HAL_PCD_DataInStageCallback>
 8001f38:	e008      	b.n	8001f4c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	7819      	ldrb	r1, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fc97 	bl	800187a <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f6ff ad74 	blt.w	8001a46 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3724      	adds	r7, #36	; 0x24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	ffff8080 	.word	0xffff8080
 8001f6c:	ffff80c0 	.word	0xffff80c0

08001f70 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	817b      	strh	r3, [r7, #10]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001f82:	897b      	ldrh	r3, [r7, #10]
 8001f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8e:	897b      	ldrh	r3, [r7, #10]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	015b      	lsls	r3, r3, #5
 8001f96:	3328      	adds	r3, #40	; 0x28
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e006      	b.n	8001fae <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fa0:	897b      	ldrh	r3, [r7, #10]
 8001fa2:	015b      	lsls	r3, r3, #5
 8001fa4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001fae:	893b      	ldrh	r3, [r7, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	80da      	strh	r2, [r3, #6]
 8001fc2:	e00b      	b.n	8001fdc <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_PWR_EnableBkUpAccess+0x14>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	420e0020 	.word	0x420e0020

08002000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e26c      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8087 	beq.w	800212e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002020:	4b92      	ldr	r3, [pc, #584]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b04      	cmp	r3, #4
 800202a:	d00c      	beq.n	8002046 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800202c:	4b8f      	ldr	r3, [pc, #572]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b08      	cmp	r3, #8
 8002036:	d112      	bne.n	800205e <HAL_RCC_OscConfig+0x5e>
 8002038:	4b8c      	ldr	r3, [pc, #560]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002044:	d10b      	bne.n	800205e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002046:	4b89      	ldr	r3, [pc, #548]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d06c      	beq.n	800212c <HAL_RCC_OscConfig+0x12c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d168      	bne.n	800212c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e246      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x76>
 8002068:	4b80      	ldr	r3, [pc, #512]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a7f      	ldr	r2, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 800206e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	e02e      	b.n	80020d4 <HAL_RCC_OscConfig+0xd4>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x98>
 800207e:	4b7b      	ldr	r3, [pc, #492]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a7a      	ldr	r2, [pc, #488]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b78      	ldr	r3, [pc, #480]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a77      	ldr	r2, [pc, #476]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e01d      	b.n	80020d4 <HAL_RCC_OscConfig+0xd4>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0xbc>
 80020a2:	4b72      	ldr	r3, [pc, #456]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a71      	ldr	r2, [pc, #452]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b6f      	ldr	r3, [pc, #444]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a6e      	ldr	r2, [pc, #440]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e00b      	b.n	80020d4 <HAL_RCC_OscConfig+0xd4>
 80020bc:	4b6b      	ldr	r3, [pc, #428]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a6a      	ldr	r2, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80020c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a67      	ldr	r2, [pc, #412]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7fe f860 	bl	80001a0 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7fe f85c 	bl	80001a0 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1fa      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b5d      	ldr	r3, [pc, #372]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0xe4>
 8002102:	e014      	b.n	800212e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe f84c 	bl	80001a0 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7fe f848 	bl	80001a0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e1e6      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x10c>
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d063      	beq.n	8002202 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800213a:	4b4c      	ldr	r3, [pc, #304]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002146:	4b49      	ldr	r3, [pc, #292]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b08      	cmp	r3, #8
 8002150:	d11c      	bne.n	800218c <HAL_RCC_OscConfig+0x18c>
 8002152:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d116      	bne.n	800218c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_RCC_OscConfig+0x176>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e1ba      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4939      	ldr	r1, [pc, #228]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	e03a      	b.n	8002202 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d020      	beq.n	80021d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002194:	4b36      	ldr	r3, [pc, #216]	; (8002270 <HAL_RCC_OscConfig+0x270>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe f801 	bl	80001a0 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a2:	f7fd fffd 	bl	80001a0 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e19b      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c0:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4927      	ldr	r1, [pc, #156]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
 80021d4:	e015      	b.n	8002202 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d6:	4b26      	ldr	r3, [pc, #152]	; (8002270 <HAL_RCC_OscConfig+0x270>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fd ffe0 	bl	80001a0 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e4:	f7fd ffdc 	bl	80001a0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e17a      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d03a      	beq.n	8002284 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d019      	beq.n	800224a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_RCC_OscConfig+0x274>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221c:	f7fd ffc0 	bl	80001a0 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002224:	f7fd ffbc 	bl	80001a0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e15a      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCC_OscConfig+0x26c>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002242:	2001      	movs	r0, #1
 8002244:	f000 fb2a 	bl	800289c <RCC_Delay>
 8002248:	e01c      	b.n	8002284 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_RCC_OscConfig+0x274>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002250:	f7fd ffa6 	bl	80001a0 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002256:	e00f      	b.n	8002278 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002258:	f7fd ffa2 	bl	80001a0 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d908      	bls.n	8002278 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e140      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	42420000 	.word	0x42420000
 8002274:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	4b9e      	ldr	r3, [pc, #632]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1e9      	bne.n	8002258 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80a6 	beq.w	80023de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002296:	4b97      	ldr	r3, [pc, #604]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10d      	bne.n	80022be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b94      	ldr	r3, [pc, #592]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4a93      	ldr	r2, [pc, #588]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	61d3      	str	r3, [r2, #28]
 80022ae:	4b91      	ldr	r3, [pc, #580]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b8e      	ldr	r3, [pc, #568]	; (80024f8 <HAL_RCC_OscConfig+0x4f8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b8b      	ldr	r3, [pc, #556]	; (80024f8 <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a8a      	ldr	r2, [pc, #552]	; (80024f8 <HAL_RCC_OscConfig+0x4f8>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7fd ff63 	bl	80001a0 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7fd ff5f 	bl	80001a0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b64      	cmp	r3, #100	; 0x64
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0fd      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b81      	ldr	r3, [pc, #516]	; (80024f8 <HAL_RCC_OscConfig+0x4f8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x312>
 8002304:	4b7b      	ldr	r3, [pc, #492]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4a7a      	ldr	r2, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6213      	str	r3, [r2, #32]
 8002310:	e02d      	b.n	800236e <HAL_RCC_OscConfig+0x36e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x334>
 800231a:	4b76      	ldr	r3, [pc, #472]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a75      	ldr	r2, [pc, #468]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	4b73      	ldr	r3, [pc, #460]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a72      	ldr	r2, [pc, #456]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	e01c      	b.n	800236e <HAL_RCC_OscConfig+0x36e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d10c      	bne.n	8002356 <HAL_RCC_OscConfig+0x356>
 800233c:	4b6d      	ldr	r3, [pc, #436]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4a6c      	ldr	r2, [pc, #432]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	6213      	str	r3, [r2, #32]
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a69      	ldr	r2, [pc, #420]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6213      	str	r3, [r2, #32]
 8002354:	e00b      	b.n	800236e <HAL_RCC_OscConfig+0x36e>
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a66      	ldr	r2, [pc, #408]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	4b64      	ldr	r3, [pc, #400]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a63      	ldr	r2, [pc, #396]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d015      	beq.n	80023a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7fd ff13 	bl	80001a0 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fd ff0f 	bl	80001a0 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0ab      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	4b57      	ldr	r3, [pc, #348]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ee      	beq.n	800237e <HAL_RCC_OscConfig+0x37e>
 80023a0:	e014      	b.n	80023cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7fd fefd 	bl	80001a0 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fd fef9 	bl	80001a0 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e095      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c0:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ee      	bne.n	80023aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d105      	bne.n	80023de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d2:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a47      	ldr	r2, [pc, #284]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8081 	beq.w	80024ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e8:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d061      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d146      	bne.n	800248a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fc:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <HAL_RCC_OscConfig+0x4fc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7fd fecd 	bl	80001a0 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7fd fec9 	bl	80001a0 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e067      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241c:	4b35      	ldr	r3, [pc, #212]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d108      	bne.n	8002444 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002432:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	492d      	ldr	r1, [pc, #180]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a19      	ldr	r1, [r3, #32]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	430b      	orrs	r3, r1
 8002456:	4927      	ldr	r1, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <HAL_RCC_OscConfig+0x4fc>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7fd fe9d 	bl	80001a0 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7fd fe99 	bl	80001a0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e037      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x46a>
 8002488:	e02f      	b.n	80024ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_RCC_OscConfig+0x4fc>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fd fe86 	bl	80001a0 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002498:	f7fd fe82 	bl	80001a0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e020      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x498>
 80024b6:	e018      	b.n	80024ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e013      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40007000 	.word	0x40007000
 80024fc:	42420060 	.word	0x42420060

08002500 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0d0      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b6a      	ldr	r3, [pc, #424]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d910      	bls.n	8002544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	4965      	ldr	r1, [pc, #404]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b8      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800255c:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002566:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002574:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800257e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b50      	ldr	r3, [pc, #320]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	494d      	ldr	r1, [pc, #308]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d040      	beq.n	8002620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d115      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e07f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025be:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e073      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e06b      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4936      	ldr	r1, [pc, #216]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fd fdd6 	bl	80001a0 <HAL_GetTick>
 80025f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fd fdd2 	bl	80001a0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e053      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 020c 	and.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1eb      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d210      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	4922      	ldr	r1, [pc, #136]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e032      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4916      	ldr	r1, [pc, #88]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	490e      	ldr	r1, [pc, #56]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800268e:	f000 f82d 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8002692:	4601      	mov	r1, r0
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	fa21 f303 	lsr.w	r3, r1, r3
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x1cc>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1d0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f009 fb78 	bl	800bda4 <HAL_InitTick>

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40022000 	.word	0x40022000
 80026c4:	40021000 	.word	0x40021000
 80026c8:	0800d364 	.word	0x0800d364
 80026cc:	20000070 	.word	0x20000070
 80026d0:	20000000 	.word	0x20000000

080026d4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_RCC_EnableCSS+0x14>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	4242004c 	.word	0x4242004c

080026ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b490      	push	{r4, r7}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026f4:	1d3c      	adds	r4, r7, #4
 80026f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026fc:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b04      	cmp	r3, #4
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x40>
 8002726:	2b08      	cmp	r3, #8
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x46>
 800272a:	e02d      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800272e:	623b      	str	r3, [r7, #32]
      break;
 8002730:	e02d      	b.n	800278e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	0c9b      	lsrs	r3, r3, #18
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800273e:	4413      	add	r3, r2
 8002740:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002744:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0c5b      	lsrs	r3, r3, #17
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800275e:	4413      	add	r3, r2
 8002760:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002764:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	4a0f      	ldr	r2, [pc, #60]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800276a:	fb02 f203 	mul.w	r2, r2, r3
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	fbb2 f3f3 	udiv	r3, r2, r3
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
 8002776:	e004      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	623b      	str	r3, [r7, #32]
      break;
 8002786:	e002      	b.n	800278e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800278a:	623b      	str	r3, [r7, #32]
      break;
 800278c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278e:	6a3b      	ldr	r3, [r7, #32]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3728      	adds	r7, #40	; 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bc90      	pop	{r4, r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	0800cfb0 	.word	0x0800cfb0
 80027a0:	0800cfc0 	.word	0x0800cfc0
 80027a4:	40021000 	.word	0x40021000
 80027a8:	007a1200 	.word	0x007a1200
 80027ac:	003d0900 	.word	0x003d0900

080027b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b4:	4b02      	ldr	r3, [pc, #8]	; (80027c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	20000070 	.word	0x20000070

080027c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c8:	f7ff fff2 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027cc:	4601      	mov	r1, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4a03      	ldr	r2, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	0800d374 	.word	0x0800d374

080027ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f0:	f7ff ffde 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027f4:	4601      	mov	r1, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	0adb      	lsrs	r3, r3, #11
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	0800d374 	.word	0x0800d374

08002814 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	220f      	movs	r2, #15
 8002822:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_RCC_GetClockConfig+0x58>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <HAL_RCC_GetClockConfig+0x58>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_GetClockConfig+0x58>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <HAL_RCC_GetClockConfig+0x58>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	08db      	lsrs	r3, r3, #3
 800284e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_GetClockConfig+0x5c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0207 	and.w	r2, r3, #7
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40021000 	.word	0x40021000
 8002870:	40022000 	.word	0x40022000

08002874 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCC_NMI_IRQHandler+0x20>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d104      	bne.n	800288e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002884:	f000 f828 	bl	80028d8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_RCC_NMI_IRQHandler+0x24>)
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	701a      	strb	r2, [r3, #0]
  }
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	4002100a 	.word	0x4002100a

0800289c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <RCC_Delay+0x34>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <RCC_Delay+0x38>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0a5b      	lsrs	r3, r3, #9
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b8:	bf00      	nop
  }
  while (Delay --);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	60fa      	str	r2, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f9      	bne.n	80028b8 <RCC_Delay+0x1c>
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000070 	.word	0x20000070
 80028d4:	10624dd3 	.word	0x10624dd3

080028d8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d07d      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002900:	2300      	movs	r3, #0
 8002902:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002904:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10d      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	4a4b      	ldr	r2, [pc, #300]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291a:	61d3      	str	r3, [r2, #28]
 800291c:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002928:	2301      	movs	r3, #1
 800292a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d118      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002938:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a42      	ldr	r2, [pc, #264]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800293e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002942:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002944:	f7fd fc2c 	bl	80001a0 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294a:	e008      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294c:	f7fd fc28 	bl	80001a0 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e06d      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800296a:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d02e      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	429a      	cmp	r2, r3
 8002986:	d027      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002988:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002990:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002992:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002994:	2201      	movs	r2, #1
 8002996:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002998:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800299e:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d014      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fd fbf7 	bl	80001a0 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fd fbf3 	bl	80001a0 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e036      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ee      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4917      	ldr	r1, [pc, #92]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	490b      	ldr	r1, [pc, #44]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4904      	ldr	r1, [pc, #16]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	42420440 	.word	0x42420440

08002a50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b08d      	sub	sp, #52	; 0x34
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a58:	4b55      	ldr	r3, [pc, #340]	; (8002bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a5a:	f107 040c 	add.w	r4, r7, #12
 8002a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a72:	2300      	movs	r3, #0
 8002a74:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d07f      	beq.n	8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d002      	beq.n	8002a8e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d048      	beq.n	8002b1e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a8c:	e08b      	b.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a94:	4b48      	ldr	r3, [pc, #288]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d07f      	beq.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	0c9b      	lsrs	r3, r3, #18
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002aac:	4413      	add	r3, r2
 8002aae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ab2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002abe:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0c5b      	lsrs	r3, r3, #17
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002acc:	4413      	add	r3, r2
 8002ace:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ade:	4a37      	ldr	r2, [pc, #220]	; (8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aee:	e004      	b.n	8002afa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	4a33      	ldr	r2, [pc, #204]	; (8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002afa:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b06:	d102      	bne.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b0c:	e048      	b.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b1c:	e040      	b.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b2e:	d108      	bne.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b40:	e01f      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002b5a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b60:	e00f      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b6c:	d11a      	bne.n	8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b6e:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d014      	beq.n	8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002b7a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b80:	e010      	b.n	8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b84:	f7ff fe32 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0b9b      	lsrs	r3, r3, #14
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	3301      	adds	r3, #1
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b9e:	e002      	b.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002ba0:	bf00      	nop
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002ba4:	bf00      	nop
    }
  }
  return (frequency);
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3734      	adds	r7, #52	; 0x34
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd90      	pop	{r4, r7, pc}
 8002bb0:	0800cfc4 	.word	0x0800cfc4
 8002bb4:	0800cfd4 	.word	0x0800cfd4
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	007a1200 	.word	0x007a1200
 8002bc0:	003d0900 	.word	0x003d0900
 8002bc4:	aaaaaaab 	.word	0xaaaaaaab

08002bc8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e084      	b.n	8002ce8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7c5b      	ldrb	r3, [r3, #17]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f009 f800 	bl	800bbf4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f9c8 	bl	8002f90 <HAL_RTC_WaitForSynchro>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e06b      	b.n	8002ce8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fa81 	bl	8003118 <RTC_EnterInitMode>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e060      	b.n	8002ce8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0207 	bic.w	r2, r2, #7
 8002c34:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <HAL_RTC_Init+0x128>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a2b      	ldr	r2, [pc, #172]	; (8002cf0 <HAL_RTC_Init+0x128>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <HAL_RTC_Init+0x128>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4926      	ldr	r1, [pc, #152]	; (8002cf0 <HAL_RTC_Init+0x128>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d003      	beq.n	8002c6e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e00e      	b.n	8002c8c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7ff feee 	bl	8002a50 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c74:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e030      	b.n	8002ce8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 010f 	bic.w	r1, r3, #15
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	0c1a      	lsrs	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	041b      	lsls	r3, r3, #16
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	b291      	uxth	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fa55 	bl	8003168 <RTC_ExitInitMode>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d004      	beq.n	8002cce <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00c      	b.n	8002ce8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40006c00 	.word	0x40006c00

08002cf4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_RTC_SetTime+0x20>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e080      	b.n	8002e1a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	7c1b      	ldrb	r3, [r3, #16]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_RTC_SetTime+0x30>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e07a      	b.n	8002e1a <HAL_RTC_SetTime+0x126>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d113      	bne.n	8002d5e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002d40:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	785b      	ldrb	r3, [r3, #1]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a5b      	subs	r3, r3, r1
 8002d50:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d52:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d58:	4413      	add	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e01e      	b.n	8002d9c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fa28 	bl	80031b8 <RTC_Bcd2ToByte>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002d70:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fa1d 	bl	80031b8 <RTC_Bcd2ToByte>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002d8a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	789b      	ldrb	r3, [r3, #2]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fa11 	bl	80031b8 <RTC_Bcd2ToByte>
 8002d96:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002d98:	4423      	add	r3, r4
 8002d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f953 	bl	800304a <RTC_WriteTimeCounter>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2204      	movs	r2, #4
 8002dae:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e02f      	b.n	8002e1a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0205 	bic.w	r2, r2, #5
 8002dc8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f964 	bl	8003098 <RTC_ReadAlarmCounter>
 8002dd0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d018      	beq.n	8002e0c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d214      	bcs.n	8002e0c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002de8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dec:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002dee:	6939      	ldr	r1, [r7, #16]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f96a 	bl	80030ca <RTC_WriteAlarmCounter>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e006      	b.n	8002e1a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
	...

08002e24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_RTC_SetDate+0x24>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e097      	b.n	8002f7c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	7c1b      	ldrb	r3, [r3, #16]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_RTC_SetDate+0x34>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e091      	b.n	8002f7c <HAL_RTC_SetDate+0x158>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2202      	movs	r2, #2
 8002e62:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	78da      	ldrb	r2, [r3, #3]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785a      	ldrb	r2, [r3, #1]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	789a      	ldrb	r2, [r3, #2]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	739a      	strb	r2, [r3, #14]
 8002e82:	e01a      	b.n	8002eba <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	78db      	ldrb	r3, [r3, #3]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f995 	bl	80031b8 <RTC_Bcd2ToByte>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f98c 	bl	80031b8 <RTC_Bcd2ToByte>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	789b      	ldrb	r3, [r3, #2]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 f983 	bl	80031b8 <RTC_Bcd2ToByte>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	7bdb      	ldrb	r3, [r3, #15]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	7b59      	ldrb	r1, [r3, #13]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	7b9b      	ldrb	r3, [r3, #14]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f000 f993 	bl	80031f4 <RTC_WeekDayNum>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	7b1a      	ldrb	r2, [r3, #12]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f883 	bl	8002fea <RTC_ReadTimeCounter>
 8002ee4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4a26      	ldr	r2, [pc, #152]	; (8002f84 <HAL_RTC_SetDate+0x160>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	0adb      	lsrs	r3, r3, #11
 8002ef0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b18      	cmp	r3, #24
 8002ef6:	d93a      	bls.n	8002f6e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <HAL_RTC_SetDate+0x164>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <HAL_RTC_SetDate+0x168>)
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002f0e:	69f9      	ldr	r1, [r7, #28]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f89a 	bl	800304a <RTC_WriteTimeCounter>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e027      	b.n	8002f7c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f8b3 	bl	8003098 <RTC_ReadAlarmCounter>
 8002f32:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d018      	beq.n	8002f6e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d214      	bcs.n	8002f6e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002f4a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f4e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f50:	69b9      	ldr	r1, [r7, #24]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f8b9 	bl	80030ca <RTC_WriteAlarmCounter>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2204      	movs	r2, #4
 8002f62:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e006      	b.n	8002f7c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3720      	adds	r7, #32
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	91a2b3c5 	.word	0x91a2b3c5
 8002f88:	aaaaaaab 	.word	0xaaaaaaab
 8002f8c:	00015180 	.word	0x00015180

08002f90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e01d      	b.n	8002fe2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0208 	bic.w	r2, r2, #8
 8002fb4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002fb6:	f7fd f8f3 	bl	80001a0 <HAL_GetTick>
 8002fba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002fbc:	e009      	b.n	8002fd2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002fbe:	f7fd f8ef 	bl	80001a0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e007      	b.n	8002fe2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ee      	beq.n	8002fbe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b087      	sub	sp, #28
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	827b      	strh	r3, [r7, #18]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	823b      	strh	r3, [r7, #16]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800301a:	8a7a      	ldrh	r2, [r7, #18]
 800301c:	8a3b      	ldrh	r3, [r7, #16]
 800301e:	429a      	cmp	r2, r3
 8003020:	d008      	beq.n	8003034 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003022:	8a3b      	ldrh	r3, [r7, #16]
 8003024:	041a      	lsls	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	b29b      	uxth	r3, r3
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e004      	b.n	800303e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003034:	8a7b      	ldrh	r3, [r7, #18]
 8003036:	041a      	lsls	r2, r3, #16
 8003038:	89fb      	ldrh	r3, [r7, #14]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800303e:	697b      	ldr	r3, [r7, #20]
}
 8003040:	4618      	mov	r0, r3
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f85d 	bl	8003118 <RTC_EnterInitMode>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e011      	b.n	800308e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	0c12      	lsrs	r2, r2, #16
 8003072:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b292      	uxth	r2, r2
 800307c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f872 	bl	8003168 <RTC_ExitInitMode>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	81fb      	strh	r3, [r7, #14]
 80030a4:	2300      	movs	r3, #0
 80030a6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80030b8:	89fb      	ldrh	r3, [r7, #14]
 80030ba:	041a      	lsls	r2, r3, #16
 80030bc:	89bb      	ldrh	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f81d 	bl	8003118 <RTC_EnterInitMode>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e011      	b.n	800310e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	0c12      	lsrs	r2, r2, #16
 80030f2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b292      	uxth	r2, r2
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f832 	bl	8003168 <RTC_ExitInitMode>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003124:	f7fd f83c 	bl	80001a0 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800312a:	e009      	b.n	8003140 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800312c:	f7fd f838 	bl	80001a0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800313a:	d901      	bls.n	8003140 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e00f      	b.n	8003160 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ee      	beq.n	800312c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0210 	orr.w	r2, r2, #16
 800315c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0210 	bic.w	r2, r2, #16
 8003182:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003184:	f7fd f80c 	bl	80001a0 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800318a:	e009      	b.n	80031a0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800318c:	f7fd f808 	bl	80001a0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800319a:	d901      	bls.n	80031a0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e007      	b.n	80031b0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	b2db      	uxtb	r3, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
	...

080031f4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
 8003200:	4613      	mov	r3, r2
 8003202:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003212:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d82d      	bhi.n	8003276 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <RTC_WeekDayNum+0xe4>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	085a      	lsrs	r2, r3, #1
 800322e:	78bb      	ldrb	r3, [r7, #2]
 8003230:	441a      	add	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	441a      	add	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3b01      	subs	r3, #1
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	3b01      	subs	r3, #1
 8003242:	4926      	ldr	r1, [pc, #152]	; (80032dc <RTC_WeekDayNum+0xe8>)
 8003244:	fba1 1303 	umull	r1, r3, r1, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3b01      	subs	r3, #1
 8003250:	4922      	ldr	r1, [pc, #136]	; (80032dc <RTC_WeekDayNum+0xe8>)
 8003252:	fba1 1303 	umull	r1, r3, r1, r3
 8003256:	09db      	lsrs	r3, r3, #7
 8003258:	4413      	add	r3, r2
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <RTC_WeekDayNum+0xec>)
 800325e:	fba3 1302 	umull	r1, r3, r3, r2
 8003262:	1ad1      	subs	r1, r2, r3
 8003264:	0849      	lsrs	r1, r1, #1
 8003266:	440b      	add	r3, r1
 8003268:	0899      	lsrs	r1, r3, #2
 800326a:	460b      	mov	r3, r1
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	1a5b      	subs	r3, r3, r1
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e029      	b.n	80032ca <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <RTC_WeekDayNum+0xe4>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	085a      	lsrs	r2, r3, #1
 800328a:	78bb      	ldrb	r3, [r7, #2]
 800328c:	441a      	add	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	441a      	add	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4910      	ldr	r1, [pc, #64]	; (80032dc <RTC_WeekDayNum+0xe8>)
 800329c:	fba1 1303 	umull	r1, r3, r1, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	1ad2      	subs	r2, r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	490d      	ldr	r1, [pc, #52]	; (80032dc <RTC_WeekDayNum+0xe8>)
 80032a8:	fba1 1303 	umull	r1, r3, r1, r3
 80032ac:	09db      	lsrs	r3, r3, #7
 80032ae:	4413      	add	r3, r2
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <RTC_WeekDayNum+0xec>)
 80032b4:	fba3 1302 	umull	r1, r3, r3, r2
 80032b8:	1ad1      	subs	r1, r2, r3
 80032ba:	0849      	lsrs	r1, r1, #1
 80032bc:	440b      	add	r3, r1
 80032be:	0899      	lsrs	r1, r3, #2
 80032c0:	460b      	mov	r3, r1
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	1a5b      	subs	r3, r3, r1
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	b2db      	uxtb	r3, r3
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	38e38e39 	.word	0x38e38e39
 80032dc:	51eb851f 	.word	0x51eb851f
 80032e0:	24924925 	.word	0x24924925

080032e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e053      	b.n	800339e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f008 fcc9 	bl	800bca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	ea42 0103 	orr.w	r1, r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	0c1a      	lsrs	r2, r3, #16
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f002 0204 	and.w	r2, r2, #4
 800337c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800338c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e01d      	b.n	80033f4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f008 fefd 	bl	800c1cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	f000 fbcb 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b06      	cmp	r3, #6
 8003424:	d007      	beq.n	8003436 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e01d      	b.n	8003490 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d106      	bne.n	800346e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f815 	bl	8003498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f000 fb7d 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
	...

080034ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2201      	movs	r2, #1
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fdde 	bl	8004080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a10      	ldr	r2, [pc, #64]	; (800350c <HAL_TIM_PWM_Start+0x60>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d107      	bne.n	80034de <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d007      	beq.n	8003500 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00

08003510 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e07f      	b.n	8003624 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d106      	bne.n	800353e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f008 fe63 	bl	800c204 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003554:	f023 0307 	bic.w	r3, r3, #7
 8003558:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	4619      	mov	r1, r3
 8003564:	4610      	mov	r0, r2
 8003566:	f000 fb0b 	bl	8003b80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003592:	f023 0303 	bic.w	r3, r3, #3
 8003596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	4313      	orrs	r3, r2
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80035b0:	f023 030c 	bic.w	r3, r3, #12
 80035b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	4313      	orrs	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	011a      	lsls	r2, r3, #4
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	031b      	lsls	r3, r3, #12
 80035e0:	4313      	orrs	r3, r2
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	4313      	orrs	r3, r2
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d122      	bne.n	8003688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b02      	cmp	r3, #2
 800364e:	d11b      	bne.n	8003688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0202 	mvn.w	r2, #2
 8003658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa6a 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa5d 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fa6c 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b04      	cmp	r3, #4
 8003694:	d122      	bne.n	80036dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d11b      	bne.n	80036dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0204 	mvn.w	r2, #4
 80036ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa40 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fa33 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fa42 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d122      	bne.n	8003730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d11b      	bne.n	8003730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0208 	mvn.w	r2, #8
 8003700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2204      	movs	r2, #4
 8003706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fa16 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 800371c:	e005      	b.n	800372a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa09 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fa18 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b10      	cmp	r3, #16
 800373c:	d122      	bne.n	8003784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b10      	cmp	r3, #16
 800374a:	d11b      	bne.n	8003784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0210 	mvn.w	r2, #16
 8003754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2208      	movs	r2, #8
 800375a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9ec 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9df 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f9ee 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d10e      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d107      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0201 	mvn.w	r2, #1
 80037a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f008 f9c0 	bl	800bb30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d10e      	bne.n	80037dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	2b80      	cmp	r3, #128	; 0x80
 80037ca:	d107      	bne.n	80037dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fcc3 	bl	8004162 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d10e      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d107      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9b2 	bl	8003b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b20      	cmp	r3, #32
 8003814:	d10e      	bne.n	8003834 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b20      	cmp	r3, #32
 8003822:	d107      	bne.n	8003834 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0220 	mvn.w	r2, #32
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fc8e 	bl	8004150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003852:	2302      	movs	r3, #2
 8003854:	e0b4      	b.n	80039c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b0c      	cmp	r3, #12
 800386a:	f200 809f 	bhi.w	80039ac <HAL_TIM_PWM_ConfigChannel+0x170>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080039ad 	.word	0x080039ad
 800387c:	080039ad 	.word	0x080039ad
 8003880:	080039ad 	.word	0x080039ad
 8003884:	080038e9 	.word	0x080038e9
 8003888:	080039ad 	.word	0x080039ad
 800388c:	080039ad 	.word	0x080039ad
 8003890:	080039ad 	.word	0x080039ad
 8003894:	0800392b 	.word	0x0800392b
 8003898:	080039ad 	.word	0x080039ad
 800389c:	080039ad 	.word	0x080039ad
 80038a0:	080039ad 	.word	0x080039ad
 80038a4:	0800396b 	.word	0x0800396b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f9c8 	bl	8003c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	619a      	str	r2, [r3, #24]
      break;
 80038e6:	e062      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fa0e 	bl	8003d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6999      	ldr	r1, [r3, #24]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	021a      	lsls	r2, r3, #8
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	619a      	str	r2, [r3, #24]
      break;
 8003928:	e041      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fa57 	bl	8003de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0208 	orr.w	r2, r2, #8
 8003944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0204 	bic.w	r2, r2, #4
 8003954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69d9      	ldr	r1, [r3, #28]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	61da      	str	r2, [r3, #28]
      break;
 8003968:	e021      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 faa1 	bl	8003eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69d9      	ldr	r1, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	61da      	str	r2, [r3, #28]
      break;
 80039aa:	e000      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80039ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0x18>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0a6      	b.n	8003b2e <HAL_TIM_ConfigClockSource+0x166>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d067      	beq.n	8003ae8 <HAL_TIM_ConfigClockSource+0x120>
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d80b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x6c>
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d073      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0x140>
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d802      	bhi.n	8003a2a <HAL_TIM_ConfigClockSource+0x62>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d06f      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a28:	e078      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d06c      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0x140>
 8003a2e:	2b30      	cmp	r3, #48	; 0x30
 8003a30:	d06a      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a32:	e073      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a34:	2b70      	cmp	r3, #112	; 0x70
 8003a36:	d00d      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0x8c>
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d804      	bhi.n	8003a46 <HAL_TIM_ConfigClockSource+0x7e>
 8003a3c:	2b50      	cmp	r3, #80	; 0x50
 8003a3e:	d033      	beq.n	8003aa8 <HAL_TIM_ConfigClockSource+0xe0>
 8003a40:	2b60      	cmp	r3, #96	; 0x60
 8003a42:	d041      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a44:	e06a      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4a:	d066      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x152>
 8003a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a50:	d017      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a52:	e063      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6899      	ldr	r1, [r3, #8]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f000 faed 	bl	8004042 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]
      break;
 8003a80:	e04c      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f000 fad6 	bl	8004042 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aa4:	609a      	str	r2, [r3, #8]
      break;
 8003aa6:	e039      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f000 fa4d 	bl	8003f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2150      	movs	r1, #80	; 0x50
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 faa4 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003ac6:	e029      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f000 fa6b 	bl	8003fb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2160      	movs	r1, #96	; 0x60
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fa94 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003ae6:	e019      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	461a      	mov	r2, r3
 8003af6:	f000 fa2d 	bl	8003f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2140      	movs	r1, #64	; 0x40
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fa84 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003b06:	e009      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f000 fa7b 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003b18:	e000      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
	...

08003b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <TIM_Base_SetConfig+0xb8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00b      	beq.n	8003bb0 <TIM_Base_SetConfig+0x30>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d007      	beq.n	8003bb0 <TIM_Base_SetConfig+0x30>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a26      	ldr	r2, [pc, #152]	; (8003c3c <TIM_Base_SetConfig+0xbc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_Base_SetConfig+0x30>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <TIM_Base_SetConfig+0xc0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d108      	bne.n	8003bc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <TIM_Base_SetConfig+0xb8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_Base_SetConfig+0x62>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d007      	beq.n	8003be2 <TIM_Base_SetConfig+0x62>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <TIM_Base_SetConfig+0xbc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_Base_SetConfig+0x62>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <TIM_Base_SetConfig+0xc0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d108      	bne.n	8003bf4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <TIM_Base_SetConfig+0xb8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d103      	bne.n	8003c28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800

08003c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0302 	bic.w	r3, r3, #2
 8003c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <TIM_OC1_SetConfig+0xc8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d10c      	bne.n	8003cba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 0308 	bic.w	r3, r3, #8
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <TIM_OC1_SetConfig+0xc8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40012c00 	.word	0x40012c00

08003d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f023 0210 	bic.w	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f023 0320 	bic.w	r3, r3, #32
 8003d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <TIM_OC2_SetConfig+0xd0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10d      	bne.n	8003d8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <TIM_OC2_SetConfig+0xd0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d113      	bne.n	8003dbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	40012c00 	.word	0x40012c00

08003de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <TIM_OC3_SetConfig+0xd0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10d      	bne.n	8003e5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <TIM_OC3_SetConfig+0xd0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d113      	bne.n	8003e8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00

08003eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	031b      	lsls	r3, r3, #12
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <TIM_OC4_SetConfig+0x98>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d109      	bne.n	8003f2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	40012c00 	.word	0x40012c00

08003f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 030a 	bic.w	r3, r3, #10
 8003f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f023 0210 	bic.w	r2, r3, #16
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	031b      	lsls	r3, r3, #12
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	621a      	str	r2, [r3, #32]
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	f043 0307 	orr.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	021a      	lsls	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	431a      	orrs	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4313      	orrs	r3, r2
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	609a      	str	r2, [r3, #8]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2201      	movs	r2, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1a      	ldr	r2, [r3, #32]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	401a      	ands	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e032      	b.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004118:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	4313      	orrs	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e03f      	b.n	8004206 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f008 f982 	bl	800c4a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	; 0x24
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fc23 	bl	8004a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b20      	cmp	r3, #32
 8004228:	d153      	bne.n	80042d2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_UART_Transmit_DMA+0x26>
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e04c      	b.n	80042d4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_UART_Transmit_DMA+0x38>
 8004244:	2302      	movs	r3, #2
 8004246:	e045      	b.n	80042d4 <HAL_UART_Transmit_DMA+0xc4>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	88fa      	ldrh	r2, [r7, #6]
 800425a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2221      	movs	r2, #33	; 0x21
 800426c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_UART_Transmit_DMA+0xcc>)
 8004276:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_UART_Transmit_DMA+0xd0>)
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <HAL_UART_Transmit_DMA+0xd4>)
 8004286:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	6819      	ldr	r1, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3304      	adds	r3, #4
 80042a4:	461a      	mov	r2, r3
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	f7fc fb06 	bl	80008b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042cc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80042d2:	2302      	movs	r3, #2
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	08004617 	.word	0x08004617
 80042e0:	08004669 	.word	0x08004669
 80042e4:	08004709 	.word	0x08004709

080042e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d166      	bne.n	80043d0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_UART_Receive_DMA+0x26>
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e05f      	b.n	80043d2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UART_Receive_DMA+0x38>
 800431c:	2302      	movs	r3, #2
 800431e:	e058      	b.n	80043d2 <HAL_UART_Receive_DMA+0xea>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	88fa      	ldrh	r2, [r7, #6]
 8004332:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2222      	movs	r2, #34	; 0x22
 800433e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	4a25      	ldr	r2, [pc, #148]	; (80043dc <HAL_UART_Receive_DMA+0xf4>)
 8004348:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <HAL_UART_Receive_DMA+0xf8>)
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	4a23      	ldr	r2, [pc, #140]	; (80043e4 <HAL_UART_Receive_DMA+0xfc>)
 8004358:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	2200      	movs	r2, #0
 8004360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8004362:	f107 0308 	add.w	r3, r7, #8
 8004366:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	f7fc fa9d 	bl	80008b8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043aa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	08004685 	.word	0x08004685
 80043e0:	080046ed 	.word	0x080046ed
 80043e4:	08004709 	.word	0x08004709

080043e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_UART_IRQHandler+0x52>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fa65 	bl	8004902 <UART_Receive_IT>
      return;
 8004438:	e0cc      	b.n	80045d4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80ab 	beq.w	8004598 <HAL_UART_IRQHandler+0x1b0>
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <HAL_UART_IRQHandler+0x70>
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80a0 	beq.w	8004598 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_UART_IRQHandler+0x90>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	f043 0201 	orr.w	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_UART_IRQHandler+0xb0>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	f043 0202 	orr.w	r2, r3, #2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_UART_IRQHandler+0xd0>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	f043 0204 	orr.w	r2, r3, #4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_UART_IRQHandler+0xf0>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	f043 0208 	orr.w	r2, r3, #8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d078      	beq.n	80045d2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <HAL_UART_IRQHandler+0x112>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fa04 	bl	8004902 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_UART_IRQHandler+0x13a>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d031      	beq.n	8004586 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f94f 	bl	80047c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d023      	beq.n	800457e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004544:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	2b00      	cmp	r3, #0
 800454c:	d013      	beq.n	8004576 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	4a22      	ldr	r2, [pc, #136]	; (80045dc <HAL_UART_IRQHandler+0x1f4>)
 8004554:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	4618      	mov	r0, r3
 800455c:	f7fc fa0c 	bl	8000978 <HAL_DMA_Abort_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004570:	4610      	mov	r0, r2
 8004572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	e00e      	b.n	8004594 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f844 	bl	8004604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	e00a      	b.n	8004594 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f840 	bl	8004604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	e006      	b.n	8004594 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f83c 	bl	8004604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004592:	e01e      	b.n	80045d2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	bf00      	nop
    return;
 8004596:	e01c      	b.n	80045d2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_UART_IRQHandler+0x1cc>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f93b 	bl	8004828 <UART_Transmit_IT>
    return;
 80045b2:	e00f      	b.n	80045d4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_UART_IRQHandler+0x1ec>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f982 	bl	80048d2 <UART_EndTransmit_IT>
    return;
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80045d2:	bf00      	nop
  }
}
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	08004801 	.word	0x08004801

080045e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d113      	bne.n	800465a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004646:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004656:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004658:	e002      	b.n	8004660 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f008 f802 	bl	800c664 <HAL_UART_TxCpltCallback>
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff ffb2 	bl	80045e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11e      	bne.n	80046de <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f007 ffc9 	bl	800c676 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff ff79 	bl	80045f2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b21      	cmp	r3, #33	; 0x21
 800473a:	d108      	bne.n	800474e <UART_DMAError+0x46>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f000 f827 	bl	800479c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b22      	cmp	r3, #34	; 0x22
 800476e:	d108      	bne.n	8004782 <UART_DMAError+0x7a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2200      	movs	r2, #0
 800477a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800477c:	68b8      	ldr	r0, [r7, #8]
 800477e:	f000 f822 	bl	80047c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	f043 0210 	orr.w	r2, r3, #16
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f7ff ff38 	bl	8004604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80047b2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695a      	ldr	r2, [r3, #20]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff fef2 	bl	8004604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b21      	cmp	r3, #33	; 0x21
 800483a:	d144      	bne.n	80048c6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d11a      	bne.n	800487c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800485a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	1c9a      	adds	r2, r3, #2
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	621a      	str	r2, [r3, #32]
 800486e:	e00e      	b.n	800488e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	621a      	str	r2, [r3, #32]
 800487a:	e008      	b.n	800488e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6211      	str	r1, [r2, #32]
 8004886:	781a      	ldrb	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29b      	uxth	r3, r3
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	4619      	mov	r1, r3
 800489c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
  }
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f007 feb6 	bl	800c664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b22      	cmp	r3, #34	; 0x22
 8004914:	d171      	bne.n	80049fa <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491e:	d123      	bne.n	8004968 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10e      	bne.n	800494c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	1c9a      	adds	r2, r3, #2
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
 800494a:	e029      	b.n	80049a0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	b29b      	uxth	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	629a      	str	r2, [r3, #40]	; 0x28
 8004966:	e01b      	b.n	80049a0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6858      	ldr	r0, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	1c59      	adds	r1, r3, #1
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6291      	str	r1, [r2, #40]	; 0x28
 8004980:	b2c2      	uxtb	r2, r0
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	e00c      	b.n	80049a0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	1c58      	adds	r0, r3, #1
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	6288      	str	r0, [r1, #40]	; 0x28
 8004998:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4619      	mov	r1, r3
 80049ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d120      	bne.n	80049f6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0220 	bic.w	r2, r2, #32
 80049c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695a      	ldr	r2, [r3, #20]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f007 fe42 	bl	800c676 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e002      	b.n	80049fc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e000      	b.n	80049fc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80049fa:	2302      	movs	r3, #2
  }
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a3e:	f023 030c 	bic.w	r3, r3, #12
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a52      	ldr	r2, [pc, #328]	; (8004bb0 <UART_SetConfig+0x1ac>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d14e      	bne.n	8004b0a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a6c:	f7fd febe 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 8004a70:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009a      	lsls	r2, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	4a4a      	ldr	r2, [pc, #296]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	0119      	lsls	r1, r3, #4
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009a      	lsls	r2, r3, #2
 8004a9c:	441a      	add	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aa8:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2064      	movs	r0, #100	; 0x64
 8004ab2:	fb00 f303 	mul.w	r3, r0, r3
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	3332      	adds	r3, #50	; 0x32
 8004abc:	4a3d      	ldr	r2, [pc, #244]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac8:	4419      	add	r1, r3
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009a      	lsls	r2, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae0:	4b34      	ldr	r3, [pc, #208]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	2064      	movs	r0, #100	; 0x64
 8004aea:	fb00 f303 	mul.w	r3, r0, r3
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	3332      	adds	r3, #50	; 0x32
 8004af4:	4a2f      	ldr	r2, [pc, #188]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	f003 020f 	and.w	r2, r3, #15
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	440a      	add	r2, r1
 8004b06:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004b08:	e04d      	b.n	8004ba6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b0a:	f7fd fe5b 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8004b0e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009a      	lsls	r2, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	0119      	lsls	r1, r3, #4
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	009a      	lsls	r2, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004b48:	fba3 0302 	umull	r0, r3, r3, r2
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	2064      	movs	r0, #100	; 0x64
 8004b50:	fb00 f303 	mul.w	r3, r0, r3
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	3332      	adds	r3, #50	; 0x32
 8004b5a:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b66:	4419      	add	r1, r3
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009a      	lsls	r2, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004b80:	fba3 0302 	umull	r0, r3, r3, r2
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	2064      	movs	r0, #100	; 0x64
 8004b88:	fb00 f303 	mul.w	r3, r0, r3
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	3332      	adds	r3, #50	; 0x32
 8004b92:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <UART_SetConfig+0x1b0>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	f003 020f 	and.w	r2, r3, #15
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40013800 	.word	0x40013800
 8004bb4:	51eb851f 	.word	0x51eb851f

08004bb8 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e016      	b.n	8004bf8 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f008 f968 	bl	800cea0 <HAL_WWDG_MspInit>
#endif

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	ea42 0103 	orr.w	r1, r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c00:	b084      	sub	sp, #16
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	f107 0014 	add.w	r0, r7, #20
 8004c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	b004      	add	sp, #16
 8004c1e:	4770      	bx	lr

08004c20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c2c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	89fb      	ldrh	r3, [r7, #14]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c56:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c5a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	b21a      	sxth	r2, r3
 8004c66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	b21b      	sxth	r3, r3
 8004c6e:	4013      	ands	r3, r2
 8004c70:	b21b      	sxth	r3, r3
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr

08004c86 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	f107 0014 	add.w	r0, r7, #20
 8004cac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ffa5 	bl	8004c20 <USB_EnableGlobalInt>

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ce2:	b004      	add	sp, #16
 8004ce4:	4770      	bx	lr
	...

08004ce8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ce8:	b490      	push	{r4, r7}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	78db      	ldrb	r3, [r3, #3]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d819      	bhi.n	8004d4a <USB_ActivateEndpoint+0x62>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <USB_ActivateEndpoint+0x34>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d41 	.word	0x08004d41
 8004d24:	08004d51 	.word	0x08004d51
 8004d28:	08004d37 	.word	0x08004d37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d2c:	89bb      	ldrh	r3, [r7, #12]
 8004d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d32:	81bb      	strh	r3, [r7, #12]
      break;
 8004d34:	e00d      	b.n	8004d52 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d36:	89bb      	ldrh	r3, [r7, #12]
 8004d38:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d3c:	81bb      	strh	r3, [r7, #12]
      break;
 8004d3e:	e008      	b.n	8004d52 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d40:	89bb      	ldrh	r3, [r7, #12]
 8004d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d46:	81bb      	strh	r3, [r7, #12]
      break;
 8004d48:	e003      	b.n	8004d52 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4e:	e000      	b.n	8004d52 <USB_ActivateEndpoint+0x6a>
      break;
 8004d50:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	89bb      	ldrh	r3, [r7, #12]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b29c      	uxth	r4, r3
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	4b8a      	ldr	r3, [pc, #552]	; (8004fc8 <USB_ActivateEndpoint+0x2e0>)
 8004da0:	4323      	orrs	r3, r4
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	7b1b      	ldrb	r3, [r3, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f040 8112 	bne.w	8004fd4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d067      	beq.n	8004e88 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004db8:	687c      	ldr	r4, [r7, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	441c      	add	r4, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	4423      	add	r3, r4
 8004dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd0:	461c      	mov	r4, r3
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	88db      	ldrh	r3, [r3, #6]
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29c      	uxth	r4, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d014      	beq.n	8004e22 <USB_ActivateEndpoint+0x13a>
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	b29c      	uxth	r4, r3
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	4b6c      	ldr	r3, [pc, #432]	; (8004fcc <USB_ActivateEndpoint+0x2e4>)
 8004e1c:	4323      	orrs	r3, r4
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	78db      	ldrb	r3, [r3, #3]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d018      	beq.n	8004e5c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e40:	b29c      	uxth	r4, r3
 8004e42:	f084 0320 	eor.w	r3, r4, #32
 8004e46:	b29c      	uxth	r4, r3
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	441a      	add	r2, r3
 8004e52:	4b5d      	ldr	r3, [pc, #372]	; (8004fc8 <USB_ActivateEndpoint+0x2e0>)
 8004e54:	4323      	orrs	r3, r4
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]
 8004e5a:	e22b      	b.n	80052b4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e72:	b29c      	uxth	r4, r3
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	4b52      	ldr	r3, [pc, #328]	; (8004fc8 <USB_ActivateEndpoint+0x2e0>)
 8004e80:	4323      	orrs	r3, r4
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]
 8004e86:	e215      	b.n	80052b4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e88:	687c      	ldr	r4, [r7, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	441c      	add	r4, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	4423      	add	r3, r4
 8004e9c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ea0:	461c      	mov	r4, r3
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	88db      	ldrh	r3, [r3, #6]
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004eb0:	687c      	ldr	r4, [r7, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	441c      	add	r4, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	4423      	add	r3, r4
 8004ec4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ec8:	461c      	mov	r4, r3
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10e      	bne.n	8004ef0 <USB_ActivateEndpoint+0x208>
 8004ed2:	8823      	ldrh	r3, [r4, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8023      	strh	r3, [r4, #0]
 8004ede:	8823      	ldrh	r3, [r4, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	8023      	strh	r3, [r4, #0]
 8004eee:	e02d      	b.n	8004f4c <USB_ActivateEndpoint+0x264>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ef6:	d812      	bhi.n	8004f1e <USB_ActivateEndpoint+0x236>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <USB_ActivateEndpoint+0x22a>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	029b      	lsls	r3, r3, #10
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8023      	strh	r3, [r4, #0]
 8004f1c:	e016      	b.n	8004f4c <USB_ActivateEndpoint+0x264>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d102      	bne.n	8004f38 <USB_ActivateEndpoint+0x250>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	029b      	lsls	r3, r3, #10
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29c      	uxth	r4, r3
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d014      	beq.n	8004f8e <USB_ActivateEndpoint+0x2a6>
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	b29c      	uxth	r4, r3
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	441a      	add	r2, r3
 8004f86:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <USB_ActivateEndpoint+0x2e8>)
 8004f88:	4323      	orrs	r3, r4
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa4:	b29c      	uxth	r4, r3
 8004fa6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004faa:	b29c      	uxth	r4, r3
 8004fac:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004fb0:	b29c      	uxth	r4, r3
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	441a      	add	r2, r3
 8004fbc:	4b02      	ldr	r3, [pc, #8]	; (8004fc8 <USB_ActivateEndpoint+0x2e0>)
 8004fbe:	4323      	orrs	r3, r4
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	8013      	strh	r3, [r2, #0]
 8004fc4:	e176      	b.n	80052b4 <USB_ActivateEndpoint+0x5cc>
 8004fc6:	bf00      	nop
 8004fc8:	ffff8080 	.word	0xffff8080
 8004fcc:	ffff80c0 	.word	0xffff80c0
 8004fd0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	b29c      	uxth	r4, r3
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	4b96      	ldr	r3, [pc, #600]	; (8005250 <USB_ActivateEndpoint+0x568>)
 8004ff8:	4323      	orrs	r3, r4
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ffe:	687c      	ldr	r4, [r7, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005006:	b29b      	uxth	r3, r3
 8005008:	441c      	add	r4, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	4423      	add	r3, r4
 8005012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005016:	461c      	mov	r4, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	891b      	ldrh	r3, [r3, #8]
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	b29b      	uxth	r3, r3
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	8023      	strh	r3, [r4, #0]
 8005026:	687c      	ldr	r4, [r7, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502e:	b29b      	uxth	r3, r3
 8005030:	441c      	add	r4, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	4423      	add	r3, r4
 800503a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800503e:	461c      	mov	r4, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	895b      	ldrh	r3, [r3, #10]
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	b29b      	uxth	r3, r3
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	b29b      	uxth	r3, r3
 800504c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	785b      	ldrb	r3, [r3, #1]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f040 8088 	bne.w	8005168 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29c      	uxth	r4, r3
 8005066:	4623      	mov	r3, r4
 8005068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d014      	beq.n	800509a <USB_ActivateEndpoint+0x3b2>
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	b29c      	uxth	r4, r3
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	4b70      	ldr	r3, [pc, #448]	; (8005254 <USB_ActivateEndpoint+0x56c>)
 8005094:	4323      	orrs	r3, r4
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29c      	uxth	r4, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d014      	beq.n	80050dc <USB_ActivateEndpoint+0x3f4>
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	b29c      	uxth	r4, r3
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	4b60      	ldr	r3, [pc, #384]	; (8005258 <USB_ActivateEndpoint+0x570>)
 80050d6:	4323      	orrs	r3, r4
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	b29c      	uxth	r4, r3
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	4b56      	ldr	r3, [pc, #344]	; (8005258 <USB_ActivateEndpoint+0x570>)
 8005100:	4323      	orrs	r3, r4
 8005102:	b29b      	uxth	r3, r3
 8005104:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511c:	b29c      	uxth	r4, r3
 800511e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005122:	b29c      	uxth	r4, r3
 8005124:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005128:	b29c      	uxth	r4, r3
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	4b49      	ldr	r3, [pc, #292]	; (800525c <USB_ActivateEndpoint+0x574>)
 8005136:	4323      	orrs	r3, r4
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005152:	b29c      	uxth	r4, r3
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	4b3f      	ldr	r3, [pc, #252]	; (800525c <USB_ActivateEndpoint+0x574>)
 8005160:	4323      	orrs	r3, r4
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]
 8005166:	e0a5      	b.n	80052b4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29c      	uxth	r4, r3
 8005176:	4623      	mov	r3, r4
 8005178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d014      	beq.n	80051aa <USB_ActivateEndpoint+0x4c2>
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	b29c      	uxth	r4, r3
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	441a      	add	r2, r3
 80051a2:	4b2c      	ldr	r3, [pc, #176]	; (8005254 <USB_ActivateEndpoint+0x56c>)
 80051a4:	4323      	orrs	r3, r4
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29c      	uxth	r4, r3
 80051b8:	4623      	mov	r3, r4
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d014      	beq.n	80051ec <USB_ActivateEndpoint+0x504>
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	b29c      	uxth	r4, r3
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <USB_ActivateEndpoint+0x570>)
 80051e6:	4323      	orrs	r3, r4
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	b29c      	uxth	r4, r3
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	441a      	add	r2, r3
 800520e:	4b11      	ldr	r3, [pc, #68]	; (8005254 <USB_ActivateEndpoint+0x56c>)
 8005210:	4323      	orrs	r3, r4
 8005212:	b29b      	uxth	r3, r3
 8005214:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	78db      	ldrb	r3, [r3, #3]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d020      	beq.n	8005260 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005234:	b29c      	uxth	r4, r3
 8005236:	f084 0320 	eor.w	r3, r4, #32
 800523a:	b29c      	uxth	r4, r3
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <USB_ActivateEndpoint+0x574>)
 8005248:	4323      	orrs	r3, r4
 800524a:	b29b      	uxth	r3, r3
 800524c:	8013      	strh	r3, [r2, #0]
 800524e:	e01c      	b.n	800528a <USB_ActivateEndpoint+0x5a2>
 8005250:	ffff8180 	.word	0xffff8180
 8005254:	ffffc080 	.word	0xffffc080
 8005258:	ffff80c0 	.word	0xffff80c0
 800525c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005276:	b29c      	uxth	r4, r3
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <USB_ActivateEndpoint+0x5d8>)
 8005284:	4323      	orrs	r3, r4
 8005286:	b29b      	uxth	r3, r3
 8005288:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800529c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a0:	b29c      	uxth	r4, r3
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <USB_ActivateEndpoint+0x5d8>)
 80052ae:	4323      	orrs	r3, r4
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc90      	pop	{r4, r7}
 80052be:	4770      	bx	lr
 80052c0:	ffff8080 	.word	0xffff8080

080052c4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b08d      	sub	sp, #52	; 0x34
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	f040 8160 	bne.w	8005598 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d909      	bls.n	80052f8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	1ad2      	subs	r2, r2, r3
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	619a      	str	r2, [r3, #24]
 80052f6:	e005      	b.n	8005304 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2200      	movs	r2, #0
 8005302:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	7b1b      	ldrb	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d119      	bne.n	8005340 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	6959      	ldr	r1, [r3, #20]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	88da      	ldrh	r2, [r3, #6]
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	b29b      	uxth	r3, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fbb8 	bl	8005a8e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800531e:	687c      	ldr	r4, [r7, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005326:	b29b      	uxth	r3, r3
 8005328:	441c      	add	r4, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	4423      	add	r3, r4
 8005332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005336:	461c      	mov	r4, r3
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	b29b      	uxth	r3, r3
 800533c:	8023      	strh	r3, [r4, #0]
 800533e:	e10f      	b.n	8005560 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d065      	beq.n	8005422 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005356:	687c      	ldr	r4, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d148      	bne.n	80053f2 <USB_EPStartXfer+0x12e>
 8005360:	687c      	ldr	r4, [r7, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005368:	b29b      	uxth	r3, r3
 800536a:	441c      	add	r4, r3
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	4423      	add	r3, r4
 8005374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005378:	461c      	mov	r4, r3
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10e      	bne.n	800539e <USB_EPStartXfer+0xda>
 8005380:	8823      	ldrh	r3, [r4, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005388:	b29b      	uxth	r3, r3
 800538a:	8023      	strh	r3, [r4, #0]
 800538c:	8823      	ldrh	r3, [r4, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005398:	b29b      	uxth	r3, r3
 800539a:	8023      	strh	r3, [r4, #0]
 800539c:	e03d      	b.n	800541a <USB_EPStartXfer+0x156>
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	2b3e      	cmp	r3, #62	; 0x3e
 80053a2:	d810      	bhi.n	80053c6 <USB_EPStartXfer+0x102>
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <USB_EPStartXfer+0xf6>
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	3301      	adds	r3, #1
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	b29b      	uxth	r3, r3
 80053be:	029b      	lsls	r3, r3, #10
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8023      	strh	r3, [r4, #0]
 80053c4:	e029      	b.n	800541a <USB_EPStartXfer+0x156>
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <USB_EPStartXfer+0x118>
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	3b01      	subs	r3, #1
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	b29b      	uxth	r3, r3
 80053e0:	029b      	lsls	r3, r3, #10
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8023      	strh	r3, [r4, #0]
 80053f0:	e013      	b.n	800541a <USB_EPStartXfer+0x156>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d10f      	bne.n	800541a <USB_EPStartXfer+0x156>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005400:	b29b      	uxth	r3, r3
 8005402:	441c      	add	r4, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4423      	add	r3, r4
 800540c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	895b      	ldrh	r3, [r3, #10]
 800541e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005420:	e063      	b.n	80054ea <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d148      	bne.n	80054bc <USB_EPStartXfer+0x1f8>
 800542a:	687c      	ldr	r4, [r7, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005432:	b29b      	uxth	r3, r3
 8005434:	441c      	add	r4, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	4423      	add	r3, r4
 800543e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005442:	461c      	mov	r4, r3
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10e      	bne.n	8005468 <USB_EPStartXfer+0x1a4>
 800544a:	8823      	ldrh	r3, [r4, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005452:	b29b      	uxth	r3, r3
 8005454:	8023      	strh	r3, [r4, #0]
 8005456:	8823      	ldrh	r3, [r4, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005462:	b29b      	uxth	r3, r3
 8005464:	8023      	strh	r3, [r4, #0]
 8005466:	e03d      	b.n	80054e4 <USB_EPStartXfer+0x220>
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	2b3e      	cmp	r3, #62	; 0x3e
 800546c:	d810      	bhi.n	8005490 <USB_EPStartXfer+0x1cc>
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	623b      	str	r3, [r7, #32]
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <USB_EPStartXfer+0x1c0>
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	3301      	adds	r3, #1
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	b29b      	uxth	r3, r3
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	b29b      	uxth	r3, r3
 800548c:	8023      	strh	r3, [r4, #0]
 800548e:	e029      	b.n	80054e4 <USB_EPStartXfer+0x220>
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	623b      	str	r3, [r7, #32]
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <USB_EPStartXfer+0x1e2>
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	029b      	lsls	r3, r3, #10
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	8023      	strh	r3, [r4, #0]
 80054ba:	e013      	b.n	80054e4 <USB_EPStartXfer+0x220>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	785b      	ldrb	r3, [r3, #1]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d10f      	bne.n	80054e4 <USB_EPStartXfer+0x220>
 80054c4:	687c      	ldr	r4, [r7, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	441c      	add	r4, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	4423      	add	r3, r4
 80054d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054dc:	461c      	mov	r4, r3
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	891b      	ldrh	r3, [r3, #8]
 80054e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6959      	ldr	r1, [r3, #20]
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 faca 	bl	8005a8e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d115      	bne.n	800552e <USB_EPStartXfer+0x26a>
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005518:	b29c      	uxth	r4, r3
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	441a      	add	r2, r3
 8005524:	4b9a      	ldr	r3, [pc, #616]	; (8005790 <USB_EPStartXfer+0x4cc>)
 8005526:	4323      	orrs	r3, r4
 8005528:	b29b      	uxth	r3, r3
 800552a:	8013      	strh	r3, [r2, #0]
 800552c:	e018      	b.n	8005560 <USB_EPStartXfer+0x29c>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d114      	bne.n	8005560 <USB_EPStartXfer+0x29c>
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554c:	b29c      	uxth	r4, r3
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	441a      	add	r2, r3
 8005558:	4b8e      	ldr	r3, [pc, #568]	; (8005794 <USB_EPStartXfer+0x4d0>)
 800555a:	4323      	orrs	r3, r4
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005576:	b29c      	uxth	r4, r3
 8005578:	f084 0310 	eor.w	r3, r4, #16
 800557c:	b29c      	uxth	r4, r3
 800557e:	f084 0320 	eor.w	r3, r4, #32
 8005582:	b29c      	uxth	r4, r3
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	441a      	add	r2, r3
 800558e:	4b82      	ldr	r3, [pc, #520]	; (8005798 <USB_EPStartXfer+0x4d4>)
 8005590:	4323      	orrs	r3, r4
 8005592:	b29b      	uxth	r3, r3
 8005594:	8013      	strh	r3, [r2, #0]
 8005596:	e146      	b.n	8005826 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699a      	ldr	r2, [r3, #24]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d909      	bls.n	80055b8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	1ad2      	subs	r2, r2, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	619a      	str	r2, [r3, #24]
 80055b6:	e005      	b.n	80055c4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	7b1b      	ldrb	r3, [r3, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d148      	bne.n	800565e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80055cc:	687c      	ldr	r4, [r7, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	441c      	add	r4, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	4423      	add	r3, r4
 80055e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055e4:	461c      	mov	r4, r3
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10e      	bne.n	800560a <USB_EPStartXfer+0x346>
 80055ec:	8823      	ldrh	r3, [r4, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8023      	strh	r3, [r4, #0]
 80055f8:	8823      	ldrh	r3, [r4, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005604:	b29b      	uxth	r3, r3
 8005606:	8023      	strh	r3, [r4, #0]
 8005608:	e0f2      	b.n	80057f0 <USB_EPStartXfer+0x52c>
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	2b3e      	cmp	r3, #62	; 0x3e
 800560e:	d810      	bhi.n	8005632 <USB_EPStartXfer+0x36e>
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <USB_EPStartXfer+0x362>
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	b29b      	uxth	r3, r3
 800562a:	029b      	lsls	r3, r3, #10
 800562c:	b29b      	uxth	r3, r3
 800562e:	8023      	strh	r3, [r4, #0]
 8005630:	e0de      	b.n	80057f0 <USB_EPStartXfer+0x52c>
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <USB_EPStartXfer+0x384>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3b01      	subs	r3, #1
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	b29b      	uxth	r3, r3
 800564c:	029b      	lsls	r3, r3, #10
 800564e:	b29b      	uxth	r3, r3
 8005650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005658:	b29b      	uxth	r3, r3
 800565a:	8023      	strh	r3, [r4, #0]
 800565c:	e0c8      	b.n	80057f0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	785b      	ldrb	r3, [r3, #1]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d148      	bne.n	80056f8 <USB_EPStartXfer+0x434>
 8005666:	687c      	ldr	r4, [r7, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566e:	b29b      	uxth	r3, r3
 8005670:	441c      	add	r4, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	4423      	add	r3, r4
 800567a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800567e:	461c      	mov	r4, r3
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10e      	bne.n	80056a4 <USB_EPStartXfer+0x3e0>
 8005686:	8823      	ldrh	r3, [r4, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800568e:	b29b      	uxth	r3, r3
 8005690:	8023      	strh	r3, [r4, #0]
 8005692:	8823      	ldrh	r3, [r4, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8023      	strh	r3, [r4, #0]
 80056a2:	e03d      	b.n	8005720 <USB_EPStartXfer+0x45c>
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	2b3e      	cmp	r3, #62	; 0x3e
 80056a8:	d810      	bhi.n	80056cc <USB_EPStartXfer+0x408>
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <USB_EPStartXfer+0x3fc>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	3301      	adds	r3, #1
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8023      	strh	r3, [r4, #0]
 80056ca:	e029      	b.n	8005720 <USB_EPStartXfer+0x45c>
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <USB_EPStartXfer+0x41e>
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	3b01      	subs	r3, #1
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	029b      	lsls	r3, r3, #10
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	8023      	strh	r3, [r4, #0]
 80056f6:	e013      	b.n	8005720 <USB_EPStartXfer+0x45c>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10f      	bne.n	8005720 <USB_EPStartXfer+0x45c>
 8005700:	687c      	ldr	r4, [r7, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	441c      	add	r4, r3
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	4423      	add	r3, r4
 8005714:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005718:	461c      	mov	r4, r3
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	b29b      	uxth	r3, r3
 800571e:	8023      	strh	r3, [r4, #0]
 8005720:	687c      	ldr	r4, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d14e      	bne.n	80057c8 <USB_EPStartXfer+0x504>
 800572a:	687c      	ldr	r4, [r7, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	441c      	add	r4, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	4423      	add	r3, r4
 800573e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005742:	461c      	mov	r4, r3
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10e      	bne.n	8005768 <USB_EPStartXfer+0x4a4>
 800574a:	8823      	ldrh	r3, [r4, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005752:	b29b      	uxth	r3, r3
 8005754:	8023      	strh	r3, [r4, #0]
 8005756:	8823      	ldrh	r3, [r4, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005762:	b29b      	uxth	r3, r3
 8005764:	8023      	strh	r3, [r4, #0]
 8005766:	e043      	b.n	80057f0 <USB_EPStartXfer+0x52c>
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	2b3e      	cmp	r3, #62	; 0x3e
 800576c:	d816      	bhi.n	800579c <USB_EPStartXfer+0x4d8>
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <USB_EPStartXfer+0x4c0>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	3301      	adds	r3, #1
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	b29b      	uxth	r3, r3
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	b29b      	uxth	r3, r3
 800578c:	8023      	strh	r3, [r4, #0]
 800578e:	e02f      	b.n	80057f0 <USB_EPStartXfer+0x52c>
 8005790:	ffff80c0 	.word	0xffff80c0
 8005794:	ffffc080 	.word	0xffffc080
 8005798:	ffff8080 	.word	0xffff8080
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	f003 031f 	and.w	r3, r3, #31
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d102      	bne.n	80057b2 <USB_EPStartXfer+0x4ee>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	029b      	lsls	r3, r3, #10
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8023      	strh	r3, [r4, #0]
 80057c6:	e013      	b.n	80057f0 <USB_EPStartXfer+0x52c>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10f      	bne.n	80057f0 <USB_EPStartXfer+0x52c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	441c      	add	r4, r3
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	4423      	add	r3, r4
 80057e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	b29c      	uxth	r4, r3
 8005808:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800580c:	b29c      	uxth	r4, r3
 800580e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005812:	b29c      	uxth	r4, r3
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	4b04      	ldr	r3, [pc, #16]	; (8005830 <USB_EPStartXfer+0x56c>)
 8005820:	4323      	orrs	r3, r4
 8005822:	b29b      	uxth	r3, r3
 8005824:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3734      	adds	r7, #52	; 0x34
 800582c:	46bd      	mov	sp, r7
 800582e:	bd90      	pop	{r4, r7, pc}
 8005830:	ffff8080 	.word	0xffff8080

08005834 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005834:	b490      	push	{r4, r7}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800585c:	b29c      	uxth	r4, r3
 800585e:	f084 0310 	eor.w	r3, r4, #16
 8005862:	b29c      	uxth	r4, r3
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	441a      	add	r2, r3
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <USB_EPSetStall+0x80>)
 8005870:	4323      	orrs	r3, r4
 8005872:	b29b      	uxth	r3, r3
 8005874:	8013      	strh	r3, [r2, #0]
 8005876:	e017      	b.n	80058a8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800588a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588e:	b29c      	uxth	r4, r3
 8005890:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005894:	b29c      	uxth	r4, r3
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	441a      	add	r2, r3
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <USB_EPSetStall+0x80>)
 80058a2:	4323      	orrs	r3, r4
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc90      	pop	{r4, r7}
 80058b2:	4770      	bx	lr
 80058b4:	ffff8080 	.word	0xffff8080

080058b8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058b8:	b490      	push	{r4, r7}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	7b1b      	ldrb	r3, [r3, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d17d      	bne.n	80059c6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03d      	beq.n	800594e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29c      	uxth	r4, r3
 80058e0:	4623      	mov	r3, r4
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d014      	beq.n	8005914 <USB_EPClearStall+0x5c>
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005900:	b29c      	uxth	r4, r3
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <USB_EPClearStall+0x11c>)
 800590e:	4323      	orrs	r3, r4
 8005910:	b29b      	uxth	r3, r3
 8005912:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	78db      	ldrb	r3, [r3, #3]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d054      	beq.n	80059c6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005932:	b29c      	uxth	r4, r3
 8005934:	f084 0320 	eor.w	r3, r4, #32
 8005938:	b29c      	uxth	r4, r3
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	441a      	add	r2, r3
 8005944:	4b24      	ldr	r3, [pc, #144]	; (80059d8 <USB_EPClearStall+0x120>)
 8005946:	4323      	orrs	r3, r4
 8005948:	b29b      	uxth	r3, r3
 800594a:	8013      	strh	r3, [r2, #0]
 800594c:	e03b      	b.n	80059c6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29c      	uxth	r4, r3
 800595c:	4623      	mov	r3, r4
 800595e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <USB_EPClearStall+0xd8>
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597c:	b29c      	uxth	r4, r3
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	4b14      	ldr	r3, [pc, #80]	; (80059dc <USB_EPClearStall+0x124>)
 800598a:	4323      	orrs	r3, r4
 800598c:	b29b      	uxth	r3, r3
 800598e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a6:	b29c      	uxth	r4, r3
 80059a8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80059ac:	b29c      	uxth	r4, r3
 80059ae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80059b2:	b29c      	uxth	r4, r3
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	441a      	add	r2, r3
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <USB_EPClearStall+0x120>)
 80059c0:	4323      	orrs	r3, r4
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc90      	pop	{r4, r7}
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	ffff80c0 	.word	0xffff80c0
 80059d8:	ffff8080 	.word	0xffff8080
 80059dc:	ffffc080 	.word	0xffffc080

080059e0 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2203      	movs	r2, #3
 80059fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d103      	bne.n	8005a26 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr

08005a32 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr

08005a78 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b08d      	sub	sp, #52	; 0x34
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	80fb      	strh	r3, [r7, #6]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005aa4:	88bb      	ldrh	r3, [r7, #4]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	005a      	lsls	r2, r3, #1
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac6:	e01e      	b.n	8005b06 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	3302      	adds	r3, #2
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	3302      	adds	r3, #2
 8005af8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	3301      	adds	r3, #1
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	3b01      	subs	r3, #1
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1dd      	bne.n	8005ac8 <USB_WritePMA+0x3a>
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	3734      	adds	r7, #52	; 0x34
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr

08005b16 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b08b      	sub	sp, #44	; 0x2c
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	4611      	mov	r1, r2
 8005b22:	461a      	mov	r2, r3
 8005b24:	460b      	mov	r3, r1
 8005b26:	80fb      	strh	r3, [r7, #6]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005b2c:	88bb      	ldrh	r3, [r7, #4]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	005a      	lsls	r2, r3, #1
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b48:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4e:	e01b      	b.n	8005b88 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	3302      	adds	r3, #2
 8005b80:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	3b01      	subs	r3, #1
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e0      	bne.n	8005b50 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005b8e:	88bb      	ldrh	r3, [r7, #4]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	701a      	strb	r2, [r3, #0]
  }
}
 8005baa:	bf00      	nop
 8005bac:	372c      	adds	r7, #44	; 0x2c
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005bb8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <__NVIC_SystemReset+0x20>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005bc4:	4903      	ldr	r1, [pc, #12]	; (8005bd4 <__NVIC_SystemReset+0x20>)
 8005bc6:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <__NVIC_SystemReset+0x24>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60cb      	str	r3, [r1, #12]
 8005bcc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <__NVIC_SystemReset+0x1c>
 8005bd4:	e000ed00 	.word	0xe000ed00
 8005bd8:	05fa0004 	.word	0x05fa0004

08005bdc <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005be8:	f240 401c 	movw	r0, #1052	; 0x41c
 8005bec:	f006 ff9c 	bl	800cb28 <USBD_static_malloc>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 8005c02:	2302      	movs	r3, #2
 8005c04:	e03f      	b.n	8005c86 <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0c:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c1c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4798      	blx	r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 8005c80:	2302      	movs	r3, #2
 8005c82:	e000      	b.n	8005c86 <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca0:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00e      	beq.n	8005cf2 <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f006 ff2b 	bl	800cb40 <USBD_static_free>
    pdev->pClassData = NULL;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1c:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d03f      	beq.n	8005daa <USBD_DFU_Setup+0xae>
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	f040 80c2 	bne.w	8005eb4 <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b06      	cmp	r3, #6
 8005d36:	d830      	bhi.n	8005d9a <USBD_DFU_Setup+0x9e>
 8005d38:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <USBD_DFU_Setup+0x44>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d5d 	.word	0x08005d5d
 8005d48:	08005d67 	.word	0x08005d67
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	08005d89 	.word	0x08005d89
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa90 	bl	8006284 <DFU_Download>
          break;
 8005d64:	e020      	b.n	8005da8 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 faf5 	bl	8006358 <DFU_Upload>
          break;
 8005d6e:	e01b      	b.n	8005da8 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fbcd 	bl	8006510 <DFU_GetStatus>
          break;
 8005d76:	e017      	b.n	8005da8 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fc7b 	bl	8006674 <DFU_ClearStatus>
          break;
 8005d7e:	e013      	b.n	8005da8 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fcc6 	bl	8006712 <DFU_GetState>
          break;
 8005d86:	e00f      	b.n	8005da8 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fcd6 	bl	800673a <DFU_Abort>
          break;
 8005d8e:	e00b      	b.n	8005da8 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa16 	bl	80061c4 <DFU_Detach>
          break;
 8005d98:	e006      	b.n	8005da8 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 fd2d 	bl	80077fc <USBD_CtlError>
          ret = USBD_FAIL;
 8005da2:	2302      	movs	r3, #2
 8005da4:	747b      	strb	r3, [r7, #17]
          break;
 8005da6:	bf00      	nop
      }
      break;
 8005da8:	e08b      	b.n	8005ec2 <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	2b0b      	cmp	r3, #11
 8005db0:	d878      	bhi.n	8005ea4 <USBD_DFU_Setup+0x1a8>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <USBD_DFU_Setup+0xbc>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005de9 	.word	0x08005de9
 8005dbc:	08005ea5 	.word	0x08005ea5
 8005dc0:	08005ea5 	.word	0x08005ea5
 8005dc4:	08005ea5 	.word	0x08005ea5
 8005dc8:	08005ea5 	.word	0x08005ea5
 8005dcc:	08005ea5 	.word	0x08005ea5
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005ea5 	.word	0x08005ea5
 8005dd8:	08005ea5 	.word	0x08005ea5
 8005ddc:	08005ea5 	.word	0x08005ea5
 8005de0:	08005e3b 	.word	0x08005e3b
 8005de4:	08005e65 	.word	0x08005e65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d107      	bne.n	8005e02 <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005df2:	f107 030a 	add.w	r3, r7, #10
 8005df6:	2202      	movs	r2, #2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 fd68 	bl	80078d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e00:	e057      	b.n	8005eb2 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 fcf9 	bl	80077fc <USBD_CtlError>
            ret = USBD_FAIL;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	747b      	strb	r3, [r7, #17]
          break;
 8005e0e:	e050      	b.n	8005eb2 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	885b      	ldrh	r3, [r3, #2]
 8005e14:	0a1b      	lsrs	r3, r3, #8
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b21      	cmp	r3, #33	; 0x21
 8005e1a:	d107      	bne.n	8005e2c <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ecc <USBD_DFU_Setup+0x1d0>)
 8005e1e:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	88db      	ldrh	r3, [r3, #6]
 8005e24:	2b09      	cmp	r3, #9
 8005e26:	bf28      	it	cs
 8005e28:	2309      	movcs	r3, #9
 8005e2a:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8005e2c:	8a7b      	ldrh	r3, [r7, #18]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6979      	ldr	r1, [r7, #20]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 fd4c 	bl	80078d0 <USBD_CtlSendData>
          break;
 8005e38:	e03b      	b.n	8005eb2 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	d108      	bne.n	8005e56 <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 fd3e 	bl	80078d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e54:	e02d      	b.n	8005eb2 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 fccf 	bl	80077fc <USBD_CtlError>
            ret = USBD_FAIL;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	747b      	strb	r3, [r7, #17]
          break;
 8005e62:	e026      	b.n	8005eb2 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	885b      	ldrh	r3, [r3, #2]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d113      	bne.n	8005e96 <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d107      	bne.n	8005e88 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	885b      	ldrh	r3, [r3, #2]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e86:	e014      	b.n	8005eb2 <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 fcb6 	bl	80077fc <USBD_CtlError>
              ret = USBD_FAIL;
 8005e90:	2302      	movs	r3, #2
 8005e92:	747b      	strb	r3, [r7, #17]
          break;
 8005e94:	e00d      	b.n	8005eb2 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 fcaf 	bl	80077fc <USBD_CtlError>
            ret = USBD_FAIL;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	747b      	strb	r3, [r7, #17]
          break;
 8005ea2:	e006      	b.n	8005eb2 <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 fca8 	bl	80077fc <USBD_CtlError>
          ret = USBD_FAIL;
 8005eac:	2302      	movs	r3, #2
 8005eae:	747b      	strb	r3, [r7, #17]
          break;
 8005eb0:	bf00      	nop
      }
      break;
 8005eb2:	e006      	b.n	8005ec2 <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f001 fca0 	bl	80077fc <USBD_CtlError>
      ret = USBD_FAIL;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	747b      	strb	r3, [r7, #17]
      break;
 8005ec0:	bf00      	nop
  }

  return ret;
 8005ec2:	7c7b      	ldrb	r3, [r7, #17]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000056 	.word	0x20000056

08005ed0 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	221b      	movs	r2, #27
 8005edc:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 8005ede:	4b03      	ldr	r3, [pc, #12]	; (8005eec <USBD_DFU_GetCfgDesc+0x1c>)
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	20000044 	.word	0x20000044

08005ef0 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2a:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	f040 80cb 	bne.w	80060ce <USBD_DFU_EP0_TxReady+0x1b2>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f040 8086 	bne.w	8006050 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <USBD_DFU_EP0_TxReady+0x3c>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	f000 809b 	beq.w	800608e <USBD_DFU_EP0_TxReady+0x172>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b21      	cmp	r3, #33	; 0x21
 8005f5e:	d129      	bne.n	8005fb4 <USBD_DFU_EP0_TxReady+0x98>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d124      	bne.n	8005fb4 <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	789b      	ldrb	r3, [r3, #2]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	441a      	add	r2, r3
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	78db      	ldrb	r3, [r3, #3]
 8005f94:	041b      	lsls	r3, r3, #16
 8005f96:	441a      	add	r2, r3
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	791b      	ldrb	r3, [r3, #4]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	441a      	add	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8005fb2:	e06c      	b.n	800608e <USBD_DFU_EP0_TxReady+0x172>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b41      	cmp	r3, #65	; 0x41
 8005fba:	d136      	bne.n	800602a <USBD_DFU_EP0_TxReady+0x10e>
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	d131      	bne.n	800602a <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	789b      	ldrb	r3, [r3, #2]
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	441a      	add	r2, r3
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	441a      	add	r2, r3
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	791b      	ldrb	r3, [r3, #4]
 8006004:	061b      	lsls	r3, r3, #24
 8006006:	441a      	add	r2, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800601c:	4610      	mov	r0, r2
 800601e:	4798      	blx	r3
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d033      	beq.n	800608e <USBD_DFU_EP0_TxReady+0x172>
        {
          return USBD_FAIL;
 8006026:	2302      	movs	r3, #2
 8006028:	e05a      	b.n	80060e0 <USBD_DFU_EP0_TxReady+0x1c4>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 800603e:	2301      	movs	r3, #1
 8006040:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 8006042:	f107 0308 	add.w	r3, r7, #8
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fbd7 	bl	80077fc <USBD_CtlError>
 800604e:	e01e      	b.n	800608e <USBD_DFU_EP0_TxReady+0x172>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006056:	2b01      	cmp	r3, #1
 8006058:	d919      	bls.n	800608e <USBD_DFU_EP0_TxReady+0x172>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006060:	4b21      	ldr	r3, [pc, #132]	; (80060e8 <USBD_DFU_EP0_TxReady+0x1cc>)
 8006062:	4413      	add	r3, r2
 8006064:	029a      	lsls	r2, r3, #10
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800606c:	4413      	add	r3, r2
 800606e:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	6978      	ldr	r0, [r7, #20]
 800607a:	6939      	ldr	r1, [r7, #16]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8006082:	4798      	blx	r3
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <USBD_DFU_EP0_TxReady+0x172>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 800608a:	2302      	movs	r3, #2
 800608c:	e028      	b.n	80060e0 <USBD_DFU_EP0_TxReady+0x1c4>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2200      	movs	r2, #0
 800609a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2203      	movs	r2, #3
 80060a2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e008      	b.n	80060e0 <USBD_DFU_EP0_TxReady+0x1c4>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80060d4:	2b07      	cmp	r3, #7
 80060d6:	d102      	bne.n	80060de <USBD_DFU_EP0_TxReady+0x1c2>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fb7b 	bl	80067d4 <DFU_Leave>
    }
  }

  return USBD_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	003ffffe 	.word	0x003ffffe

080060ec <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	220a      	movs	r2, #10
 8006154:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 8006156:	4b03      	ldr	r3, [pc, #12]	; (8006164 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000060 	.word	0x20000060

08006168 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	460b      	mov	r3, r1
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8006176:	7afb      	ldrb	r3, [r7, #11]
 8006178:	2b06      	cmp	r3, #6
 800617a:	d80a      	bhi.n	8006192 <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4905      	ldr	r1, [pc, #20]	; (800619c <USBD_DFU_GetUsrStringDesc+0x34>)
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fb48 	bl	800781e <USBD_GetString>
    return USBD_StrDesc;
 800618e:	4b03      	ldr	r3, [pc, #12]	; (800619c <USBD_DFU_GetUsrStringDesc+0x34>)
 8006190:	e000      	b.n	8006194 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 8006192:	2300      	movs	r3, #0
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	200000fc 	.word	0x200000fc

080061a0 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d4:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d013      	beq.n	8006208 <DFU_Detach+0x44>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d00e      	beq.n	8006208 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80061f0:	2b05      	cmp	r3, #5
 80061f2:	d009      	beq.n	8006208 <DFU_Detach+0x44>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80061fa:	2b06      	cmp	r3, #6
 80061fc:	d004      	beq.n	8006208 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006204:	2b09      	cmp	r3, #9
 8006206:	d125      	bne.n	8006254 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <DFU_Detach+0xbc>)
 8006256:	7d5b      	ldrb	r3, [r3, #21]
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b00      	cmp	r3, #0
 800625e:	d006      	beq.n	800626e <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb55 	bl	8006910 <USBD_Stop>
    USBD_Start(pdev);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fb46 	bl	80068f8 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 800626c:	e004      	b.n	8006278 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	885b      	ldrh	r3, [r3, #2]
 8006272:	4618      	mov	r0, r3
 8006274:	f7f9 ff9e 	bl	80001b4 <HAL_Delay>
}
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000044 	.word	0x20000044

08006284 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006294:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	88db      	ldrh	r3, [r3, #6]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d02e      	beq.n	80062fc <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d004      	beq.n	80062b2 <DFU_Download+0x2e>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	d11f      	bne.n	80062f2 <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	885b      	ldrh	r3, [r3, #2]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	88db      	ldrh	r3, [r3, #6]
 80062c2:	461a      	mov	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2203      	movs	r2, #3
 80062ce:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 80062de:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fb1e 	bl	800792c <USBD_CtlPrepareRx>
 80062f0:	e02e      	b.n	8006350 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fa81 	bl	80077fc <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 80062fa:	e029      	b.n	8006350 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006302:	2b05      	cmp	r3, #5
 8006304:	d004      	beq.n	8006310 <DFU_Download+0x8c>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800630c:	2b02      	cmp	r3, #2
 800630e:	d11a      	bne.n	8006346 <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2206      	movs	r2, #6
 800631c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8006344:	e004      	b.n	8006350 <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 fa57 	bl	80077fc <USBD_CtlError>
}
 800634e:	e7ff      	b.n	8006350 <DFU_Download+0xcc>
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006368:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	88db      	ldrh	r3, [r3, #6]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 80ac 	beq.w	80064d4 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006382:	2b02      	cmp	r3, #2
 8006384:	d005      	beq.n	8006392 <DFU_Upload+0x3a>
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800638c:	2b09      	cmp	r3, #9
 800638e:	f040 8094 	bne.w	80064ba <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	885b      	ldrh	r3, [r3, #2]
 8006396:	461a      	mov	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	88db      	ldrh	r3, [r3, #6]
 80063a2:	461a      	mov	r2, r3
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d12c      	bne.n	800640e <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d901      	bls.n	80063c2 <DFU_Upload+0x6a>
 80063be:	2202      	movs	r2, #2
 80063c0:	e000      	b.n	80063c4 <DFU_Upload+0x6c>
 80063c2:	2209      	movs	r2, #9
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2221      	movs	r2, #33	; 0x21
 80063f8:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2241      	movs	r2, #65	; 0x41
 80063fe:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2203      	movs	r2, #3
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f001 fa62 	bl	80078d0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800640c:	e079      	b.n	8006502 <DFU_Upload+0x1aa>
      }
      else if (hdfu->wblock_num > 1U)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006414:	2b01      	cmp	r3, #1
 8006416:	d935      	bls.n	8006484 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2209      	movs	r2, #9
 800641c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800644a:	4b30      	ldr	r3, [pc, #192]	; (800650c <DFU_Upload+0x1b4>)
 800644c:	4413      	add	r3, r2
 800644e:	029a      	lsls	r2, r3, #10
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006456:	4413      	add	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	6979      	ldr	r1, [r7, #20]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800646c:	4798      	blx	r3
 800646e:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006476:	b29b      	uxth	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	6939      	ldr	r1, [r7, #16]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 fa27 	bl	80078d0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006482:	e03e      	b.n	8006502 <DFU_Upload+0x1aa>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	220f      	movs	r2, #15
 8006488:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 f9a2 	bl	80077fc <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80064b8:	e023      	b.n	8006502 <DFU_Upload+0x1aa>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f995 	bl	80077fc <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 80064d2:	e016      	b.n	8006502 <DFU_Upload+0x1aa>
    hdfu->dev_state = DFU_STATE_IDLE;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8006500:	e7ff      	b.n	8006502 <DFU_Upload+0x1aa>
 8006502:	bf00      	nop
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	003ffffe 	.word	0x003ffffe

08006510 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651e:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006526:	2b03      	cmp	r3, #3
 8006528:	d002      	beq.n	8006530 <DFU_GetStatus+0x20>
 800652a:	2b06      	cmp	r3, #6
 800652c:	d055      	beq.n	80065da <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 800652e:	e092      	b.n	8006656 <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006536:	2b00      	cmp	r3, #0
 8006538:	d038      	beq.n	80065ac <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2204      	movs	r2, #4
 800653e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800656c:	2b00      	cmp	r3, #0
 800656e:	d110      	bne.n	8006592 <DFU_GetStatus+0x82>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b41      	cmp	r3, #65	; 0x41
 8006576:	d10c      	bne.n	8006592 <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800658c:	2100      	movs	r1, #0
 800658e:	4798      	blx	r3
      break;
 8006590:	e061      	b.n	8006656 <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80065a6:	2101      	movs	r1, #1
 80065a8:	4798      	blx	r3
      break;
 80065aa:	e054      	b.n	8006656 <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2205      	movs	r2, #5
 80065b0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80065d8:	e03d      	b.n	8006656 <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d116      	bne.n	8006612 <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2207      	movs	r2, #7
 80065e8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8006610:	e020      	b.n	8006654 <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8006618:	2b00      	cmp	r3, #0
 800661a:	d11b      	bne.n	8006654 <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 800661c:	4b14      	ldr	r3, [pc, #80]	; (8006670 <DFU_GetStatus+0x160>)
 800661e:	7d1b      	ldrb	r3, [r3, #20]
 8006620:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8006624:	2b00      	cmp	r3, #0
 8006626:	d015      	beq.n	8006654 <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8006654:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800665c:	2206      	movs	r2, #6
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 f935 	bl	80078d0 <USBD_CtlSendData>
}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000044 	.word	0x20000044

08006674 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006682:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800668a:	2b0a      	cmp	r3, #10
 800668c:	d11e      	bne.n	80066cc <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2202      	movs	r2, #2
 8006692:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 80066ca:	e01d      	b.n	8006708 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	220a      	movs	r2, #10
 80066d0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	220e      	movs	r2, #14
 80066d8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8006708:	bf00      	nop
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006720:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006728:	2201      	movs	r2, #1
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f8cf 	bl	80078d0 <USBD_CtlSendData>
}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006748:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006750:	2b02      	cmp	r3, #2
 8006752:	d013      	beq.n	800677c <DFU_Abort+0x42>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800675a:	2b03      	cmp	r3, #3
 800675c:	d00e      	beq.n	800677c <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006764:	2b05      	cmp	r3, #5
 8006766:	d009      	beq.n	800677c <DFU_Abort+0x42>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800676e:	2b06      	cmp	r3, #6
 8006770:	d004      	beq.n	800677c <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006778:	2b09      	cmp	r3, #9
 800677a:	d125      	bne.n	80067c8 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
	...

080067d4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e2:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 80067ec:	4b1f      	ldr	r3, [pc, #124]	; (800686c <DFU_Leave+0x98>)
 80067ee:	7d1b      	ldrb	r3, [r3, #20]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d016      	beq.n	8006826 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2206      	movs	r2, #6
 80067fc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8006824:	e01f      	b.n	8006866 <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2208      	movs	r2, #8
 800682a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f85c 	bl	8006910 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8006862:	f7ff f9a7 	bl	8005bb4 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000044 	.word	0x20000044

08006870 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4613      	mov	r3, r2
 800687c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006884:	2302      	movs	r3, #2
 8006886:	e01a      	b.n	80068be <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	79fa      	ldrb	r2, [r7, #7]
 80068b4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f005 ffd2 	bl	800c860 <USBD_LL_Init>

  return USBD_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d006      	beq.n	80068e8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
 80068e6:	e001      	b.n	80068ec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80068e8:	2302      	movs	r3, #2
 80068ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f005 ffed 	bl	800c8e0 <USBD_LL_Start>

  return USBD_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6852      	ldr	r2, [r2, #4]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	4611      	mov	r1, r2
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f005 fff2 	bl	800c916 <USBD_LL_Stop>

  return USBD_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	bc80      	pop	{r7}
 800694e:	4770      	bx	lr

08006950 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800695c:	2302      	movs	r3, #2
 800695e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00c      	beq.n	8006984 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	4611      	mov	r1, r2
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b082      	sub	sp, #8
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	78fa      	ldrb	r2, [r7, #3]
 80069a4:	4611      	mov	r1, r2
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3

  return USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fedc 	bl	8007784 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069da:	461a      	mov	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d00c      	beq.n	8006a0a <USBD_LL_SetupStage+0x56>
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d302      	bcc.n	80069fa <USBD_LL_SetupStage+0x46>
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d010      	beq.n	8006a1a <USBD_LL_SetupStage+0x66>
 80069f8:	e017      	b.n	8006a2a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f9ca 	bl	8006d9c <USBD_StdDevReq>
      break;
 8006a08:	e01a      	b.n	8006a40 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa2c 	bl	8006e70 <USBD_StdItfReq>
      break;
 8006a18:	e012      	b.n	8006a40 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa6a 	bl	8006efc <USBD_StdEPReq>
      break;
 8006a28:	e00a      	b.n	8006a40 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f005 ffad 	bl	800c998 <USBD_LL_StallEP>
      break;
 8006a3e:	bf00      	nop
  }

  return USBD_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	460b      	mov	r3, r1
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d14b      	bne.n	8006af6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d134      	bne.n	8006ada <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d919      	bls.n	8006ab0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	1ad2      	subs	r2, r2, r3
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d203      	bcs.n	8006a9e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	e002      	b.n	8006aa4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 ff5d 	bl	8007968 <USBD_CtlContinueRx>
 8006aae:	e038      	b.n	8006b22 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d105      	bne.n	8006ad2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 ff5a 	bl	800798c <USBD_CtlSendStatus>
 8006ad8:	e023      	b.n	8006b22 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	d11e      	bne.n	8006b22 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006aec:	2100      	movs	r1, #0
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f005 ff52 	bl	800c998 <USBD_LL_StallEP>
 8006af4:	e015      	b.n	8006b22 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00d      	beq.n	8006b1e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d108      	bne.n	8006b1e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	7afa      	ldrb	r2, [r7, #11]
 8006b16:	4611      	mov	r1, r2
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	4798      	blx	r3
 8006b1c:	e001      	b.n	8006b22 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e000      	b.n	8006b24 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	460b      	mov	r3, r1
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d17f      	bne.n	8006c40 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3314      	adds	r3, #20
 8006b44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d15c      	bne.n	8006c0a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d915      	bls.n	8006b88 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	1ad2      	subs	r2, r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fec7 	bl	8007908 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2100      	movs	r1, #0
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f005 ffae 	bl	800cae2 <USBD_LL_PrepareReceive>
 8006b86:	e04e      	b.n	8006c26 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	6912      	ldr	r2, [r2, #16]
 8006b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b94:	fb02 f201 	mul.w	r2, r2, r1
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d11c      	bne.n	8006bd8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d316      	bcc.n	8006bd8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d20f      	bcs.n	8006bd8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2100      	movs	r1, #0
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fea3 	bl	8007908 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2100      	movs	r1, #0
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f005 ff86 	bl	800cae2 <USBD_LL_PrepareReceive>
 8006bd6:	e026      	b.n	8006c26 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d105      	bne.n	8006bfa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006bfa:	2180      	movs	r1, #128	; 0x80
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f005 fecb 	bl	800c998 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fed5 	bl	80079b2 <USBD_CtlReceiveStatus>
 8006c08:	e00d      	b.n	8006c26 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d004      	beq.n	8006c1e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d103      	bne.n	8006c26 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c1e:	2180      	movs	r1, #128	; 0x80
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f005 feb9 	bl	800c998 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d11d      	bne.n	8006c6c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff fe83 	bl	800693c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c3e:	e015      	b.n	8006c6c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d108      	bne.n	8006c68 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	7afa      	ldrb	r2, [r7, #11]
 8006c60:	4611      	mov	r1, r2
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	4798      	blx	r3
 8006c66:	e001      	b.n	8006c6c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e000      	b.n	8006c6e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c7e:	2340      	movs	r3, #64	; 0x40
 8006c80:	2200      	movs	r2, #0
 8006c82:	2100      	movs	r1, #0
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f005 fe61 	bl	800c94c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2240      	movs	r2, #64	; 0x40
 8006c96:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c9a:	2340      	movs	r3, #64	; 0x40
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f005 fe53 	bl	800c94c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2240      	movs	r2, #64	; 0x40
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6852      	ldr	r2, [r2, #4]
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	4611      	mov	r1, r2
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
  }

  return USBD_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	78fa      	ldrb	r2, [r7, #3]
 8006d08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr

08006d16 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bc80      	pop	{r7}
 8006d3c:	4770      	bx	lr

08006d3e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d105      	bne.n	8006d5c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d10b      	bne.n	8006d92 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d004      	beq.n	8006dc0 <USBD_StdDevReq+0x24>
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d002      	beq.n	8006dc0 <USBD_StdDevReq+0x24>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d008      	beq.n	8006dd0 <USBD_StdDevReq+0x34>
 8006dbe:	e04c      	b.n	8006e5a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
      break;
 8006dce:	e049      	b.n	8006e64 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	d83a      	bhi.n	8006e4e <USBD_StdDevReq+0xb2>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <USBD_StdDevReq+0x44>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e31 	.word	0x08006e31
 8006de4:	08006e45 	.word	0x08006e45
 8006de8:	08006e4f 	.word	0x08006e4f
 8006dec:	08006e3b 	.word	0x08006e3b
 8006df0:	08006e4f 	.word	0x08006e4f
 8006df4:	08006e13 	.word	0x08006e13
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e4f 	.word	0x08006e4f
 8006e00:	08006e27 	.word	0x08006e27
 8006e04:	08006e1d 	.word	0x08006e1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9d4 	bl	80071b8 <USBD_GetDescriptor>
          break;
 8006e10:	e022      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb49 	bl	80074ac <USBD_SetAddress>
          break;
 8006e1a:	e01d      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fb86 	bl	8007530 <USBD_SetConfig>
          break;
 8006e24:	e018      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fc0f 	bl	800764c <USBD_GetConfig>
          break;
 8006e2e:	e013      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fc3e 	bl	80076b4 <USBD_GetStatus>
          break;
 8006e38:	e00e      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fc6c 	bl	800771a <USBD_SetFeature>
          break;
 8006e42:	e009      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fc7b 	bl	8007742 <USBD_ClrFeature>
          break;
 8006e4c:	e004      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fcd3 	bl	80077fc <USBD_CtlError>
          break;
 8006e56:	bf00      	nop
      }
      break;
 8006e58:	e004      	b.n	8006e64 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fccd 	bl	80077fc <USBD_CtlError>
      break;
 8006e62:	bf00      	nop
  }

  return ret;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d003      	beq.n	8006e92 <USBD_StdItfReq+0x22>
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	d001      	beq.n	8006e92 <USBD_StdItfReq+0x22>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d12a      	bne.n	8006ee8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d81d      	bhi.n	8006eda <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	889b      	ldrh	r3, [r3, #4]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d813      	bhi.n	8006ed0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4798      	blx	r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	88db      	ldrh	r3, [r3, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d110      	bne.n	8006ee4 <USBD_StdItfReq+0x74>
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10d      	bne.n	8006ee4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fd5f 	bl	800798c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ece:	e009      	b.n	8006ee4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fc92 	bl	80077fc <USBD_CtlError>
          break;
 8006ed8:	e004      	b.n	8006ee4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fc8d 	bl	80077fc <USBD_CtlError>
          break;
 8006ee2:	e000      	b.n	8006ee6 <USBD_StdItfReq+0x76>
          break;
 8006ee4:	bf00      	nop
      }
      break;
 8006ee6:	e004      	b.n	8006ef2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fc86 	bl	80077fc <USBD_CtlError>
      break;
 8006ef0:	bf00      	nop
  }

  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	889b      	ldrh	r3, [r3, #4]
 8006f0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d004      	beq.n	8006f26 <USBD_StdEPReq+0x2a>
 8006f1c:	2b40      	cmp	r3, #64	; 0x40
 8006f1e:	d002      	beq.n	8006f26 <USBD_StdEPReq+0x2a>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <USBD_StdEPReq+0x3a>
 8006f24:	e13d      	b.n	80071a2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
      break;
 8006f34:	e13a      	b.n	80071ac <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d10a      	bne.n	8006f58 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
 8006f50:	4603      	mov	r3, r0
 8006f52:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	e12a      	b.n	80071ae <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	785b      	ldrb	r3, [r3, #1]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d03e      	beq.n	8006fde <USBD_StdEPReq+0xe2>
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d002      	beq.n	8006f6a <USBD_StdEPReq+0x6e>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d070      	beq.n	800704a <USBD_StdEPReq+0x14e>
 8006f68:	e115      	b.n	8007196 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d002      	beq.n	8006f7a <USBD_StdEPReq+0x7e>
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d015      	beq.n	8006fa4 <USBD_StdEPReq+0xa8>
 8006f78:	e02b      	b.n	8006fd2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00c      	beq.n	8006f9a <USBD_StdEPReq+0x9e>
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
 8006f82:	2b80      	cmp	r3, #128	; 0x80
 8006f84:	d009      	beq.n	8006f9a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f005 fd04 	bl	800c998 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f90:	2180      	movs	r1, #128	; 0x80
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f005 fd00 	bl	800c998 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f98:	e020      	b.n	8006fdc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fc2d 	bl	80077fc <USBD_CtlError>
              break;
 8006fa2:	e01b      	b.n	8006fdc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	885b      	ldrh	r3, [r3, #2]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10e      	bne.n	8006fca <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00b      	beq.n	8006fca <USBD_StdEPReq+0xce>
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b80      	cmp	r3, #128	; 0x80
 8006fb6:	d008      	beq.n	8006fca <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	88db      	ldrh	r3, [r3, #6]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f005 fce7 	bl	800c998 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fcde 	bl	800798c <USBD_CtlSendStatus>

              break;
 8006fd0:	e004      	b.n	8006fdc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fc11 	bl	80077fc <USBD_CtlError>
              break;
 8006fda:	bf00      	nop
          }
          break;
 8006fdc:	e0e0      	b.n	80071a0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d002      	beq.n	8006fee <USBD_StdEPReq+0xf2>
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d015      	beq.n	8007018 <USBD_StdEPReq+0x11c>
 8006fec:	e026      	b.n	800703c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00c      	beq.n	800700e <USBD_StdEPReq+0x112>
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	2b80      	cmp	r3, #128	; 0x80
 8006ff8:	d009      	beq.n	800700e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f005 fcca 	bl	800c998 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007004:	2180      	movs	r1, #128	; 0x80
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f005 fcc6 	bl	800c998 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800700c:	e01c      	b.n	8007048 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fbf3 	bl	80077fc <USBD_CtlError>
              break;
 8007016:	e017      	b.n	8007048 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	885b      	ldrh	r3, [r3, #2]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d112      	bne.n	8007046 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f005 fcd1 	bl	800c9d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fca9 	bl	800798c <USBD_CtlSendStatus>
              }
              break;
 800703a:	e004      	b.n	8007046 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fbdc 	bl	80077fc <USBD_CtlError>
              break;
 8007044:	e000      	b.n	8007048 <USBD_StdEPReq+0x14c>
              break;
 8007046:	bf00      	nop
          }
          break;
 8007048:	e0aa      	b.n	80071a0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007050:	2b02      	cmp	r3, #2
 8007052:	d002      	beq.n	800705a <USBD_StdEPReq+0x15e>
 8007054:	2b03      	cmp	r3, #3
 8007056:	d032      	beq.n	80070be <USBD_StdEPReq+0x1c2>
 8007058:	e097      	b.n	800718a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <USBD_StdEPReq+0x174>
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d004      	beq.n	8007070 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fbc7 	bl	80077fc <USBD_CtlError>
                break;
 800706e:	e091      	b.n	8007194 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007074:	2b00      	cmp	r3, #0
 8007076:	da0b      	bge.n	8007090 <USBD_StdEPReq+0x194>
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	3310      	adds	r3, #16
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4413      	add	r3, r2
 800708c:	3304      	adds	r3, #4
 800708e:	e00b      	b.n	80070a8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	4413      	add	r3, r2
 80070a6:	3304      	adds	r3, #4
 80070a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2202      	movs	r2, #2
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fc0a 	bl	80078d0 <USBD_CtlSendData>
              break;
 80070bc:	e06a      	b.n	8007194 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da11      	bge.n	80070ea <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	f003 020f 	and.w	r2, r3, #15
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	3318      	adds	r3, #24
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d117      	bne.n	8007110 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fb8a 	bl	80077fc <USBD_CtlError>
                  break;
 80070e8:	e054      	b.n	8007194 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	f003 020f 	and.w	r2, r3, #15
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d104      	bne.n	8007110 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fb77 	bl	80077fc <USBD_CtlError>
                  break;
 800710e:	e041      	b.n	8007194 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	da0b      	bge.n	8007130 <USBD_StdEPReq+0x234>
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	3310      	adds	r3, #16
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	4413      	add	r3, r2
 800712c:	3304      	adds	r3, #4
 800712e:	e00b      	b.n	8007148 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	4413      	add	r3, r2
 8007146:	3304      	adds	r3, #4
 8007148:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <USBD_StdEPReq+0x25a>
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d103      	bne.n	800715e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	e00e      	b.n	800717c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f005 fc56 	bl	800ca14 <USBD_LL_IsStallEP>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e002      	b.n	800717c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2202      	movs	r2, #2
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fba4 	bl	80078d0 <USBD_CtlSendData>
              break;
 8007188:	e004      	b.n	8007194 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fb35 	bl	80077fc <USBD_CtlError>
              break;
 8007192:	bf00      	nop
          }
          break;
 8007194:	e004      	b.n	80071a0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fb2f 	bl	80077fc <USBD_CtlError>
          break;
 800719e:	bf00      	nop
      }
      break;
 80071a0:	e004      	b.n	80071ac <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fb29 	bl	80077fc <USBD_CtlError>
      break;
 80071aa:	bf00      	nop
  }

  return ret;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	885b      	ldrh	r3, [r3, #2]
 80071d2:	0a1b      	lsrs	r3, r3, #8
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	2b06      	cmp	r3, #6
 80071da:	f200 813b 	bhi.w	8007454 <USBD_GetDescriptor+0x29c>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <USBD_GetDescriptor+0x2c>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007201 	.word	0x08007201
 80071e8:	08007219 	.word	0x08007219
 80071ec:	08007259 	.word	0x08007259
 80071f0:	08007455 	.word	0x08007455
 80071f4:	08007455 	.word	0x08007455
 80071f8:	080073f5 	.word	0x080073f5
 80071fc:	08007421 	.word	0x08007421
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	7c12      	ldrb	r2, [r2, #16]
 800720c:	f107 0108 	add.w	r1, r7, #8
 8007210:	4610      	mov	r0, r2
 8007212:	4798      	blx	r3
 8007214:	60f8      	str	r0, [r7, #12]
      break;
 8007216:	e125      	b.n	8007464 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7c1b      	ldrb	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10d      	bne.n	800723c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	f107 0208 	add.w	r2, r7, #8
 800722c:	4610      	mov	r0, r2
 800722e:	4798      	blx	r3
 8007230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3301      	adds	r3, #1
 8007236:	2202      	movs	r2, #2
 8007238:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800723a:	e113      	b.n	8007464 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	f107 0208 	add.w	r2, r7, #8
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
 800724c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	2202      	movs	r2, #2
 8007254:	701a      	strb	r2, [r3, #0]
      break;
 8007256:	e105      	b.n	8007464 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	885b      	ldrh	r3, [r3, #2]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b05      	cmp	r3, #5
 8007260:	f200 80ac 	bhi.w	80073bc <USBD_GetDescriptor+0x204>
 8007264:	a201      	add	r2, pc, #4	; (adr r2, 800726c <USBD_GetDescriptor+0xb4>)
 8007266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726a:	bf00      	nop
 800726c:	08007285 	.word	0x08007285
 8007270:	080072b9 	.word	0x080072b9
 8007274:	080072ed 	.word	0x080072ed
 8007278:	08007321 	.word	0x08007321
 800727c:	08007355 	.word	0x08007355
 8007280:	08007389 	.word	0x08007389
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a6:	e0a4      	b.n	80073f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 faa6 	bl	80077fc <USBD_CtlError>
            err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
          break;
 80072b6:	e09c      	b.n	80073f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072da:	e08a      	b.n	80073f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa8c 	bl	80077fc <USBD_CtlError>
            err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ea:	e082      	b.n	80073f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	7c12      	ldrb	r2, [r2, #16]
 8007304:	f107 0108 	add.w	r1, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800730e:	e070      	b.n	80073f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa72 	bl	80077fc <USBD_CtlError>
            err++;
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	3301      	adds	r3, #1
 800731c:	72fb      	strb	r3, [r7, #11]
          break;
 800731e:	e068      	b.n	80073f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	7c12      	ldrb	r2, [r2, #16]
 8007338:	f107 0108 	add.w	r1, r7, #8
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007342:	e056      	b.n	80073f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa58 	bl	80077fc <USBD_CtlError>
            err++;
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	3301      	adds	r3, #1
 8007350:	72fb      	strb	r3, [r7, #11]
          break;
 8007352:	e04e      	b.n	80073f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7c12      	ldrb	r2, [r2, #16]
 800736c:	f107 0108 	add.w	r1, r7, #8
 8007370:	4610      	mov	r0, r2
 8007372:	4798      	blx	r3
 8007374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007376:	e03c      	b.n	80073f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa3e 	bl	80077fc <USBD_CtlError>
            err++;
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	3301      	adds	r3, #1
 8007384:	72fb      	strb	r3, [r7, #11]
          break;
 8007386:	e034      	b.n	80073f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7c12      	ldrb	r2, [r2, #16]
 80073a0:	f107 0108 	add.w	r1, r7, #8
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073aa:	e022      	b.n	80073f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa24 	bl	80077fc <USBD_CtlError>
            err++;
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	3301      	adds	r3, #1
 80073b8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ba:	e01a      	b.n	80073f2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00c      	beq.n	80073e2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	8852      	ldrh	r2, [r2, #2]
 80073d4:	b2d1      	uxtb	r1, r2
 80073d6:	f107 0208 	add.w	r2, r7, #8
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
 80073de:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e0:	e006      	b.n	80073f0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fa09 	bl	80077fc <USBD_CtlError>
            err++;
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	3301      	adds	r3, #1
 80073ee:	72fb      	strb	r3, [r7, #11]
          break;
 80073f0:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 80073f2:	e037      	b.n	8007464 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7c1b      	ldrb	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007404:	f107 0208 	add.w	r2, r7, #8
 8007408:	4610      	mov	r0, r2
 800740a:	4798      	blx	r3
 800740c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800740e:	e029      	b.n	8007464 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9f2 	bl	80077fc <USBD_CtlError>
        err++;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	3301      	adds	r3, #1
 800741c:	72fb      	strb	r3, [r7, #11]
      break;
 800741e:	e021      	b.n	8007464 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	7c1b      	ldrb	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10d      	bne.n	8007444 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007430:	f107 0208 	add.w	r2, r7, #8
 8007434:	4610      	mov	r0, r2
 8007436:	4798      	blx	r3
 8007438:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3301      	adds	r3, #1
 800743e:	2207      	movs	r2, #7
 8007440:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007442:	e00f      	b.n	8007464 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f9d8 	bl	80077fc <USBD_CtlError>
        err++;
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	3301      	adds	r3, #1
 8007450:	72fb      	strb	r3, [r7, #11]
      break;
 8007452:	e007      	b.n	8007464 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f9d0 	bl	80077fc <USBD_CtlError>
      err++;
 800745c:	7afb      	ldrb	r3, [r7, #11]
 800745e:	3301      	adds	r3, #1
 8007460:	72fb      	strb	r3, [r7, #11]
      break;
 8007462:	bf00      	nop
  }

  if (err != 0U)
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d11c      	bne.n	80074a4 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800746a:	893b      	ldrh	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d011      	beq.n	8007494 <USBD_GetDescriptor+0x2dc>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	88db      	ldrh	r3, [r3, #6]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00d      	beq.n	8007494 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	88da      	ldrh	r2, [r3, #6]
 800747c:	893b      	ldrh	r3, [r7, #8]
 800747e:	4293      	cmp	r3, r2
 8007480:	bf28      	it	cs
 8007482:	4613      	movcs	r3, r2
 8007484:	b29b      	uxth	r3, r3
 8007486:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007488:	893b      	ldrh	r3, [r7, #8]
 800748a:	461a      	mov	r2, r3
 800748c:	68f9      	ldr	r1, [r7, #12]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa1e 	bl	80078d0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	88db      	ldrh	r3, [r3, #6]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fa75 	bl	800798c <USBD_CtlSendStatus>
 80074a2:	e000      	b.n	80074a6 <USBD_GetDescriptor+0x2ee>
    return;
 80074a4:	bf00      	nop
    }
  }
}
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	889b      	ldrh	r3, [r3, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d130      	bne.n	8007520 <USBD_SetAddress+0x74>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d12c      	bne.n	8007520 <USBD_SetAddress+0x74>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	885b      	ldrh	r3, [r3, #2]
 80074ca:	2b7f      	cmp	r3, #127	; 0x7f
 80074cc:	d828      	bhi.n	8007520 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	885b      	ldrh	r3, [r3, #2]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d104      	bne.n	80074ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f988 	bl	80077fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ec:	e01c      	b.n	8007528 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	7bfa      	ldrb	r2, [r7, #15]
 80074f2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f005 faaf 	bl	800ca5e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa43 	bl	800798c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007514:	e008      	b.n	8007528 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800751e:	e003      	b.n	8007528 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f96a 	bl	80077fc <USBD_CtlError>
  }
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	885b      	ldrh	r3, [r3, #2]
 800753e:	b2da      	uxtb	r2, r3
 8007540:	4b41      	ldr	r3, [pc, #260]	; (8007648 <USBD_SetConfig+0x118>)
 8007542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007544:	4b40      	ldr	r3, [pc, #256]	; (8007648 <USBD_SetConfig+0x118>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d904      	bls.n	8007556 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f954 	bl	80077fc <USBD_CtlError>
 8007554:	e075      	b.n	8007642 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755c:	2b02      	cmp	r3, #2
 800755e:	d002      	beq.n	8007566 <USBD_SetConfig+0x36>
 8007560:	2b03      	cmp	r3, #3
 8007562:	d023      	beq.n	80075ac <USBD_SetConfig+0x7c>
 8007564:	e062      	b.n	800762c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007566:	4b38      	ldr	r3, [pc, #224]	; (8007648 <USBD_SetConfig+0x118>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d01a      	beq.n	80075a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800756e:	4b36      	ldr	r3, [pc, #216]	; (8007648 <USBD_SetConfig+0x118>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2203      	movs	r2, #3
 800757c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007580:	4b31      	ldr	r3, [pc, #196]	; (8007648 <USBD_SetConfig+0x118>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff f9e2 	bl	8006950 <USBD_SetClassConfig>
 800758c:	4603      	mov	r3, r0
 800758e:	2b02      	cmp	r3, #2
 8007590:	d104      	bne.n	800759c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f931 	bl	80077fc <USBD_CtlError>
            return;
 800759a:	e052      	b.n	8007642 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9f5 	bl	800798c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075a2:	e04e      	b.n	8007642 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f9f1 	bl	800798c <USBD_CtlSendStatus>
        break;
 80075aa:	e04a      	b.n	8007642 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80075ac:	4b26      	ldr	r3, [pc, #152]	; (8007648 <USBD_SetConfig+0x118>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d112      	bne.n	80075da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80075bc:	4b22      	ldr	r3, [pc, #136]	; (8007648 <USBD_SetConfig+0x118>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075c6:	4b20      	ldr	r3, [pc, #128]	; (8007648 <USBD_SetConfig+0x118>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff f9de 	bl	800698e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f9da 	bl	800798c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075d8:	e033      	b.n	8007642 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80075da:	4b1b      	ldr	r3, [pc, #108]	; (8007648 <USBD_SetConfig+0x118>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d01d      	beq.n	8007624 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff f9cc 	bl	800698e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075f6:	4b14      	ldr	r3, [pc, #80]	; (8007648 <USBD_SetConfig+0x118>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007600:	4b11      	ldr	r3, [pc, #68]	; (8007648 <USBD_SetConfig+0x118>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff f9a2 	bl	8006950 <USBD_SetClassConfig>
 800760c:	4603      	mov	r3, r0
 800760e:	2b02      	cmp	r3, #2
 8007610:	d104      	bne.n	800761c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f8f1 	bl	80077fc <USBD_CtlError>
            return;
 800761a:	e012      	b.n	8007642 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f9b5 	bl	800798c <USBD_CtlSendStatus>
        break;
 8007622:	e00e      	b.n	8007642 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f9b1 	bl	800798c <USBD_CtlSendStatus>
        break;
 800762a:	e00a      	b.n	8007642 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f8e4 	bl	80077fc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007634:	4b04      	ldr	r3, [pc, #16]	; (8007648 <USBD_SetConfig+0x118>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff f9a7 	bl	800698e <USBD_ClrClassConfig>
        break;
 8007640:	bf00      	nop
    }
  }
}
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	200001fb 	.word	0x200001fb

0800764c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	88db      	ldrh	r3, [r3, #6]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d004      	beq.n	8007668 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f8cb 	bl	80077fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007666:	e021      	b.n	80076ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766e:	2b01      	cmp	r3, #1
 8007670:	db17      	blt.n	80076a2 <USBD_GetConfig+0x56>
 8007672:	2b02      	cmp	r3, #2
 8007674:	dd02      	ble.n	800767c <USBD_GetConfig+0x30>
 8007676:	2b03      	cmp	r3, #3
 8007678:	d00b      	beq.n	8007692 <USBD_GetConfig+0x46>
 800767a:	e012      	b.n	80076a2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3308      	adds	r3, #8
 8007686:	2201      	movs	r2, #1
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f920 	bl	80078d0 <USBD_CtlSendData>
        break;
 8007690:	e00c      	b.n	80076ac <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3304      	adds	r3, #4
 8007696:	2201      	movs	r2, #1
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f918 	bl	80078d0 <USBD_CtlSendData>
        break;
 80076a0:	e004      	b.n	80076ac <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f8a9 	bl	80077fc <USBD_CtlError>
        break;
 80076aa:	bf00      	nop
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c4:	3b01      	subs	r3, #1
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d81e      	bhi.n	8007708 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	88db      	ldrh	r3, [r3, #6]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d004      	beq.n	80076dc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f891 	bl	80077fc <USBD_CtlError>
        break;
 80076da:	e01a      	b.n	8007712 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f043 0202 	orr.w	r2, r3, #2
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	330c      	adds	r3, #12
 80076fc:	2202      	movs	r2, #2
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8e5 	bl	80078d0 <USBD_CtlSendData>
      break;
 8007706:	e004      	b.n	8007712 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f876 	bl	80077fc <USBD_CtlError>
      break;
 8007710:	bf00      	nop
  }
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	885b      	ldrh	r3, [r3, #2]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d106      	bne.n	800773a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f929 	bl	800798c <USBD_CtlSendStatus>
  }
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007752:	3b01      	subs	r3, #1
 8007754:	2b02      	cmp	r3, #2
 8007756:	d80b      	bhi.n	8007770 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	885b      	ldrh	r3, [r3, #2]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d10c      	bne.n	800777a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f90f 	bl	800798c <USBD_CtlSendStatus>
      }
      break;
 800776e:	e004      	b.n	800777a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f842 	bl	80077fc <USBD_CtlError>
      break;
 8007778:	e000      	b.n	800777c <USBD_ClrFeature+0x3a>
      break;
 800777a:	bf00      	nop
  }
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	785a      	ldrb	r2, [r3, #1]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	3302      	adds	r3, #2
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	3303      	adds	r3, #3
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	021b      	lsls	r3, r3, #8
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	4413      	add	r3, r2
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	3304      	adds	r3, #4
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	3305      	adds	r3, #5
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	4413      	add	r3, r2
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	3306      	adds	r3, #6
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	3307      	adds	r3, #7
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4413      	add	r3, r2
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	80da      	strh	r2, [r3, #6]

}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr

080077fc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007806:	2180      	movs	r1, #128	; 0x80
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f005 f8c5 	bl	800c998 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800780e:	2100      	movs	r1, #0
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f005 f8c1 	bl	800c998 <USBD_LL_StallEP>
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b086      	sub	sp, #24
 8007822:	af00      	add	r7, sp, #0
 8007824:	60f8      	str	r0, [r7, #12]
 8007826:	60b9      	str	r1, [r7, #8]
 8007828:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d032      	beq.n	800789a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f834 	bl	80078a2 <USBD_GetLen>
 800783a:	4603      	mov	r3, r0
 800783c:	3301      	adds	r3, #1
 800783e:	b29b      	uxth	r3, r3
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	75fa      	strb	r2, [r7, #23]
 800784e:	461a      	mov	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4413      	add	r3, r2
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7812      	ldrb	r2, [r2, #0]
 8007858:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	75fa      	strb	r2, [r7, #23]
 8007860:	461a      	mov	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	4413      	add	r3, r2
 8007866:	2203      	movs	r2, #3
 8007868:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800786a:	e012      	b.n	8007892 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	60fa      	str	r2, [r7, #12]
 8007872:	7dfa      	ldrb	r2, [r7, #23]
 8007874:	1c51      	adds	r1, r2, #1
 8007876:	75f9      	strb	r1, [r7, #23]
 8007878:	4611      	mov	r1, r2
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	440a      	add	r2, r1
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	75fa      	strb	r2, [r7, #23]
 8007888:	461a      	mov	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	2200      	movs	r2, #0
 8007890:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e8      	bne.n	800786c <USBD_GetString+0x4e>
    }
  }
}
 800789a:	bf00      	nop
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80078ae:	e005      	b.n	80078bc <USBD_GetLen+0x1a>
  {
    len++;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	3301      	adds	r3, #1
 80078b4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3301      	adds	r3, #1
 80078ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1f5      	bne.n	80078b0 <USBD_GetLen+0xe>
  }

  return len;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr

080078d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4613      	mov	r3, r2
 80078dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078ec:	88fa      	ldrh	r2, [r7, #6]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078f2:	88fb      	ldrh	r3, [r7, #6]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	2100      	movs	r1, #0
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f005 f8cf 	bl	800ca9c <USBD_LL_Transmit>

  return USBD_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007916:	88fb      	ldrh	r3, [r7, #6]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	2100      	movs	r1, #0
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f005 f8bd 	bl	800ca9c <USBD_LL_Transmit>

  return USBD_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	4613      	mov	r3, r2
 8007938:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2203      	movs	r2, #3
 800793e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	2100      	movs	r1, #0
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f005 f8c2 	bl	800cae2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007976:	88fb      	ldrh	r3, [r7, #6]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	2100      	movs	r1, #0
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f005 f8b0 	bl	800cae2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2204      	movs	r2, #4
 8007998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800799c:	2300      	movs	r3, #0
 800799e:	2200      	movs	r2, #0
 80079a0:	2100      	movs	r1, #0
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f005 f87a 	bl	800ca9c <USBD_LL_Transmit>

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2205      	movs	r2, #5
 80079be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079c2:	2300      	movs	r3, #0
 80079c4:	2200      	movs	r2, #0
 80079c6:	2100      	movs	r1, #0
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f005 f88a 	bl	800cae2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079de:	f3ef 8305 	mrs	r3, IPSR
 80079e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80079e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10f      	bne.n	8007a0a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ea:	f3ef 8310 	mrs	r3, PRIMASK
 80079ee:	607b      	str	r3, [r7, #4]
  return(result);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <osKernelInitialize+0x32>
 80079f6:	4b10      	ldr	r3, [pc, #64]	; (8007a38 <osKernelInitialize+0x60>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d109      	bne.n	8007a12 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007a02:	603b      	str	r3, [r7, #0]
  return(result);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007a0a:	f06f 0305 	mvn.w	r3, #5
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e00c      	b.n	8007a2c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a12:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <osKernelInitialize+0x60>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d105      	bne.n	8007a26 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007a1a:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <osKernelInitialize+0x60>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e002      	b.n	8007a2c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr
 8007a38:	200001fc 	.word	0x200001fc

08007a3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a42:	f3ef 8305 	mrs	r3, IPSR
 8007a46:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10f      	bne.n	8007a6e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a52:	607b      	str	r3, [r7, #4]
  return(result);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <osKernelStart+0x32>
 8007a5a:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <osKernelStart+0x64>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d109      	bne.n	8007a76 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a62:	f3ef 8311 	mrs	r3, BASEPRI
 8007a66:	603b      	str	r3, [r7, #0]
  return(result);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007a6e:	f06f 0305 	mvn.w	r3, #5
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	e00e      	b.n	8007a94 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a76:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <osKernelStart+0x64>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d107      	bne.n	8007a8e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007a7e:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <osKernelStart+0x64>)
 8007a80:	2202      	movs	r2, #2
 8007a82:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007a84:	f001 fda6 	bl	80095d4 <vTaskStartScheduler>
      stat = osOK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e002      	b.n	8007a94 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007a94:	68fb      	ldr	r3, [r7, #12]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200001fc 	.word	0x200001fc

08007aa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b092      	sub	sp, #72	; 0x48
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab4:	f3ef 8305 	mrs	r3, IPSR
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f040 8094 	bne.w	8007bea <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac6:	623b      	str	r3, [r7, #32]
  return(result);
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f040 808d 	bne.w	8007bea <osThreadNew+0x146>
 8007ad0:	4b48      	ldr	r3, [pc, #288]	; (8007bf4 <osThreadNew+0x150>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d106      	bne.n	8007ae6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8007adc:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f040 8082 	bne.w	8007bea <osThreadNew+0x146>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d07e      	beq.n	8007bea <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007aec:	2380      	movs	r3, #128	; 0x80
 8007aee:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007af0:	2318      	movs	r3, #24
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007af4:	2300      	movs	r3, #0
 8007af6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007af8:	f107 031b 	add.w	r3, r7, #27
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295
 8007b02:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d045      	beq.n	8007b96 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <osThreadNew+0x74>
        name = attr->name;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <osThreadNew+0x9a>
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	2b38      	cmp	r3, #56	; 0x38
 8007b30:	d805      	bhi.n	8007b3e <osThreadNew+0x9a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <osThreadNew+0x9e>
        return (NULL);
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e054      	b.n	8007bec <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	089b      	lsrs	r3, r3, #2
 8007b50:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00e      	beq.n	8007b78 <osThreadNew+0xd4>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b5b      	cmp	r3, #91	; 0x5b
 8007b60:	d90a      	bls.n	8007b78 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d006      	beq.n	8007b78 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <osThreadNew+0xd4>
        mem = 1;
 8007b72:	2301      	movs	r3, #1
 8007b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b76:	e010      	b.n	8007b9a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10c      	bne.n	8007b9a <osThreadNew+0xf6>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d108      	bne.n	8007b9a <osThreadNew+0xf6>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d104      	bne.n	8007b9a <osThreadNew+0xf6>
          mem = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b94:	e001      	b.n	8007b9a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d110      	bne.n	8007bc2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ba8:	9202      	str	r2, [sp, #8]
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f001 fb44 	bl	8009244 <xTaskCreateStatic>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e013      	b.n	8007bea <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d110      	bne.n	8007bea <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f001 fb8b 	bl	80092f6 <xTaskCreate>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d001      	beq.n	8007bea <osThreadNew+0x146>
          hTask = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bea:	697b      	ldr	r3, [r7, #20]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3738      	adds	r7, #56	; 0x38
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	200001fc 	.word	0x200001fc

08007bf8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c00:	f3ef 8305 	mrs	r3, IPSR
 8007c04:	613b      	str	r3, [r7, #16]
  return(result);
 8007c06:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10f      	bne.n	8007c2c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d109      	bne.n	8007c2c <osDelay+0x34>
 8007c18:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <osDelay+0x58>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d109      	bne.n	8007c34 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c20:	f3ef 8311 	mrs	r3, BASEPRI
 8007c24:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <osDelay+0x3c>
    stat = osErrorISR;
 8007c2c:	f06f 0305 	mvn.w	r3, #5
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	e007      	b.n	8007c44 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fc94 	bl	800956c <vTaskDelay>
    }
  }

  return (stat);
 8007c44:	697b      	ldr	r3, [r7, #20]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	200001fc 	.word	0x200001fc

08007c54 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08a      	sub	sp, #40	; 0x28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c60:	f3ef 8305 	mrs	r3, IPSR
 8007c64:	613b      	str	r3, [r7, #16]
  return(result);
 8007c66:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f040 8085 	bne.w	8007d78 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c72:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d17e      	bne.n	8007d78 <osMutexNew+0x124>
 8007c7a:	4b42      	ldr	r3, [pc, #264]	; (8007d84 <osMutexNew+0x130>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d105      	bne.n	8007c8e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c82:	f3ef 8311 	mrs	r3, BASEPRI
 8007c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d174      	bne.n	8007d78 <osMutexNew+0x124>
    if (attr != NULL) {
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <osMutexNew+0x48>
      type = attr->attr_bits;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	623b      	str	r3, [r7, #32]
 8007c9a:	e001      	b.n	8007ca0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <osMutexNew+0x5c>
      rmtx = 1U;
 8007caa:	2301      	movs	r3, #1
 8007cac:	61fb      	str	r3, [r7, #28]
 8007cae:	e001      	b.n	8007cb4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	f003 0308 	and.w	r3, r3, #8
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d15c      	bne.n	8007d78 <osMutexNew+0x124>
      mem = -1;
 8007cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d015      	beq.n	8007cf6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d006      	beq.n	8007ce0 <osMutexNew+0x8c>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	2b4f      	cmp	r3, #79	; 0x4f
 8007cd8:	d902      	bls.n	8007ce0 <osMutexNew+0x8c>
          mem = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	61bb      	str	r3, [r7, #24]
 8007cde:	e00c      	b.n	8007cfa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d108      	bne.n	8007cfa <osMutexNew+0xa6>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <osMutexNew+0xa6>
            mem = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61bb      	str	r3, [r7, #24]
 8007cf4:	e001      	b.n	8007cfa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d112      	bne.n	8007d26 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d007      	beq.n	8007d16 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	2004      	movs	r0, #4
 8007d0e:	f000 fca3 	bl	8008658 <xQueueCreateMutexStatic>
 8007d12:	6278      	str	r0, [r7, #36]	; 0x24
 8007d14:	e016      	b.n	8007d44 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	f000 fc9b 	bl	8008658 <xQueueCreateMutexStatic>
 8007d22:	6278      	str	r0, [r7, #36]	; 0x24
 8007d24:	e00e      	b.n	8007d44 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10b      	bne.n	8007d44 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d004      	beq.n	8007d3c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007d32:	2004      	movs	r0, #4
 8007d34:	f000 fc78 	bl	8008628 <xQueueCreateMutex>
 8007d38:	6278      	str	r0, [r7, #36]	; 0x24
 8007d3a:	e003      	b.n	8007d44 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	f000 fc73 	bl	8008628 <xQueueCreateMutex>
 8007d42:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00c      	beq.n	8007d64 <osMutexNew+0x110>
        if (attr != NULL) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <osMutexNew+0x104>
          name = attr->name;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	e001      	b.n	8007d5c <osMutexNew+0x108>
        } else {
          name = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007d5c:	6979      	ldr	r1, [r7, #20]
 8007d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d60:	f001 fa14 	bl	800918c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d006      	beq.n	8007d78 <osMutexNew+0x124>
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	f043 0301 	orr.w	r3, r3, #1
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3728      	adds	r7, #40	; 0x28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	200001fc 	.word	0x200001fc

08007d88 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f023 0301 	bic.w	r3, r3, #1
 8007d98:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007da6:	f3ef 8305 	mrs	r3, IPSR
 8007daa:	613b      	str	r3, [r7, #16]
  return(result);
 8007dac:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10f      	bne.n	8007dd2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007db2:	f3ef 8310 	mrs	r3, PRIMASK
 8007db6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <osMutexAcquire+0x4a>
 8007dbe:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <osMutexAcquire+0xb8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d109      	bne.n	8007dda <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8007dca:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007dd2:	f06f 0305 	mvn.w	r3, #5
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	e02c      	b.n	8007e34 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007de0:	f06f 0303 	mvn.w	r3, #3
 8007de4:	61fb      	str	r3, [r7, #28]
 8007de6:	e025      	b.n	8007e34 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d011      	beq.n	8007e12 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	69b8      	ldr	r0, [r7, #24]
 8007df2:	f000 fc7f 	bl	80086f4 <xQueueTakeMutexRecursive>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d01b      	beq.n	8007e34 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007e02:	f06f 0301 	mvn.w	r3, #1
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	e014      	b.n	8007e34 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007e0a:	f06f 0302 	mvn.w	r3, #2
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	e010      	b.n	8007e34 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	69b8      	ldr	r0, [r7, #24]
 8007e16:	f000 ff0d 	bl	8008c34 <xQueueSemaphoreTake>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d009      	beq.n	8007e34 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8007e26:	f06f 0301 	mvn.w	r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	e002      	b.n	8007e34 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007e2e:	f06f 0302 	mvn.w	r3, #2
 8007e32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007e34:	69fb      	ldr	r3, [r7, #28]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3720      	adds	r7, #32
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	200001fc 	.word	0x200001fc

08007e44 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f023 0301 	bic.w	r3, r3, #1
 8007e52:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e60:	f3ef 8305 	mrs	r3, IPSR
 8007e64:	613b      	str	r3, [r7, #16]
  return(result);
 8007e66:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10f      	bne.n	8007e8c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <osMutexRelease+0x48>
 8007e78:	4b19      	ldr	r3, [pc, #100]	; (8007ee0 <osMutexRelease+0x9c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d109      	bne.n	8007e94 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e80:	f3ef 8311 	mrs	r3, BASEPRI
 8007e84:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007e8c:	f06f 0305 	mvn.w	r3, #5
 8007e90:	61fb      	str	r3, [r7, #28]
 8007e92:	e01f      	b.n	8007ed4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d103      	bne.n	8007ea2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007e9a:	f06f 0303 	mvn.w	r3, #3
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e018      	b.n	8007ed4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007ea8:	69b8      	ldr	r0, [r7, #24]
 8007eaa:	f000 fbf0 	bl	800868e <xQueueGiveMutexRecursive>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d00f      	beq.n	8007ed4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007eb4:	f06f 0302 	mvn.w	r3, #2
 8007eb8:	61fb      	str	r3, [r7, #28]
 8007eba:	e00b      	b.n	8007ed4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	69b8      	ldr	r0, [r7, #24]
 8007ec4:	f000 fc4c 	bl	8008760 <xQueueGenericSend>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d002      	beq.n	8007ed4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007ece:	f06f 0302 	mvn.w	r3, #2
 8007ed2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007ed4:	69fb      	ldr	r3, [r7, #28]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3720      	adds	r7, #32
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	200001fc 	.word	0x200001fc

08007ee4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08c      	sub	sp, #48	; 0x30
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ef4:	f3ef 8305 	mrs	r3, IPSR
 8007ef8:	61bb      	str	r3, [r7, #24]
  return(result);
 8007efa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d170      	bne.n	8007fe2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f00:	f3ef 8310 	mrs	r3, PRIMASK
 8007f04:	617b      	str	r3, [r7, #20]
  return(result);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d16a      	bne.n	8007fe2 <osMessageQueueNew+0xfe>
 8007f0c:	4b37      	ldr	r3, [pc, #220]	; (8007fec <osMessageQueueNew+0x108>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d105      	bne.n	8007f20 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f14:	f3ef 8311 	mrs	r3, BASEPRI
 8007f18:	613b      	str	r3, [r7, #16]
  return(result);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d160      	bne.n	8007fe2 <osMessageQueueNew+0xfe>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d05d      	beq.n	8007fe2 <osMessageQueueNew+0xfe>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d05a      	beq.n	8007fe2 <osMessageQueueNew+0xfe>
    mem = -1;
 8007f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f30:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d029      	beq.n	8007f8c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d012      	beq.n	8007f66 <osMessageQueueNew+0x82>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	2b4f      	cmp	r3, #79	; 0x4f
 8007f46:	d90e      	bls.n	8007f66 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	695a      	ldr	r2, [r3, #20]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68b9      	ldr	r1, [r7, #8]
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d302      	bcc.n	8007f66 <osMessageQueueNew+0x82>
        mem = 1;
 8007f60:	2301      	movs	r3, #1
 8007f62:	623b      	str	r3, [r7, #32]
 8007f64:	e014      	b.n	8007f90 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d110      	bne.n	8007f90 <osMessageQueueNew+0xac>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10c      	bne.n	8007f90 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d108      	bne.n	8007f90 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <osMessageQueueNew+0xac>
          mem = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	623b      	str	r3, [r7, #32]
 8007f8a:	e001      	b.n	8007f90 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d10c      	bne.n	8007fb0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691a      	ldr	r2, [r3, #16]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6899      	ldr	r1, [r3, #8]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 fa52 	bl	8008450 <xQueueGenericCreateStatic>
 8007fac:	6278      	str	r0, [r7, #36]	; 0x24
 8007fae:	e008      	b.n	8007fc2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d105      	bne.n	8007fc2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 faba 	bl	8008534 <xQueueGenericCreate>
 8007fc0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00c      	beq.n	8007fe2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <osMessageQueueNew+0xf2>
        name = attr->name;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	61fb      	str	r3, [r7, #28]
 8007fd4:	e001      	b.n	8007fda <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007fda:	69f9      	ldr	r1, [r7, #28]
 8007fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fde:	f001 f8d5 	bl	800918c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3728      	adds	r7, #40	; 0x28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	200001fc 	.word	0x200001fc

08007ff0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	; 0x28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008004:	2300      	movs	r3, #0
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008008:	f3ef 8305 	mrs	r3, IPSR
 800800c:	61fb      	str	r3, [r7, #28]
  return(result);
 800800e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10f      	bne.n	8008034 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008014:	f3ef 8310 	mrs	r3, PRIMASK
 8008018:	61bb      	str	r3, [r7, #24]
  return(result);
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d109      	bne.n	8008034 <osMessageQueuePut+0x44>
 8008020:	4b2b      	ldr	r3, [pc, #172]	; (80080d0 <osMessageQueuePut+0xe0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d12e      	bne.n	8008086 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008028:	f3ef 8311 	mrs	r3, BASEPRI
 800802c:	617b      	str	r3, [r7, #20]
  return(result);
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d028      	beq.n	8008086 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <osMessageQueuePut+0x56>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <osMessageQueuePut+0x56>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008046:	f06f 0303 	mvn.w	r3, #3
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800804c:	e039      	b.n	80080c2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800804e:	2300      	movs	r3, #0
 8008050:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008052:	f107 0210 	add.w	r2, r7, #16
 8008056:	2300      	movs	r3, #0
 8008058:	68b9      	ldr	r1, [r7, #8]
 800805a:	6a38      	ldr	r0, [r7, #32]
 800805c:	f000 fc7a 	bl	8008954 <xQueueGenericSendFromISR>
 8008060:	4603      	mov	r3, r0
 8008062:	2b01      	cmp	r3, #1
 8008064:	d003      	beq.n	800806e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008066:	f06f 0302 	mvn.w	r3, #2
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800806c:	e029      	b.n	80080c2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d026      	beq.n	80080c2 <osMessageQueuePut+0xd2>
 8008074:	4b17      	ldr	r3, [pc, #92]	; (80080d4 <osMessageQueuePut+0xe4>)
 8008076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008084:	e01d      	b.n	80080c2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <osMessageQueuePut+0xa2>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008092:	f06f 0303 	mvn.w	r3, #3
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
 8008098:	e014      	b.n	80080c4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800809a:	2300      	movs	r3, #0
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	6a38      	ldr	r0, [r7, #32]
 80080a2:	f000 fb5d 	bl	8008760 <xQueueGenericSend>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d00b      	beq.n	80080c4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80080b2:	f06f 0301 	mvn.w	r3, #1
 80080b6:	627b      	str	r3, [r7, #36]	; 0x24
 80080b8:	e004      	b.n	80080c4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80080ba:	f06f 0302 	mvn.w	r3, #2
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
 80080c0:	e000      	b.n	80080c4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80080c2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3728      	adds	r7, #40	; 0x28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200001fc 	.word	0x200001fc
 80080d4:	e000ed04 	.word	0xe000ed04

080080d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08a      	sub	sp, #40	; 0x28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ee:	f3ef 8305 	mrs	r3, IPSR
 80080f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80080f4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10f      	bne.n	800811a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080fa:	f3ef 8310 	mrs	r3, PRIMASK
 80080fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d109      	bne.n	800811a <osMessageQueueGet+0x42>
 8008106:	4b2b      	ldr	r3, [pc, #172]	; (80081b4 <osMessageQueueGet+0xdc>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d12e      	bne.n	800816c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800810e:	f3ef 8311 	mrs	r3, BASEPRI
 8008112:	617b      	str	r3, [r7, #20]
  return(result);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d028      	beq.n	800816c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <osMessageQueueGet+0x54>
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <osMessageQueueGet+0x54>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800812c:	f06f 0303 	mvn.w	r3, #3
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008132:	e038      	b.n	80081a6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008134:	2300      	movs	r3, #0
 8008136:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008138:	f107 0310 	add.w	r3, r7, #16
 800813c:	461a      	mov	r2, r3
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	6a38      	ldr	r0, [r7, #32]
 8008142:	f000 fe7f 	bl	8008e44 <xQueueReceiveFromISR>
 8008146:	4603      	mov	r3, r0
 8008148:	2b01      	cmp	r3, #1
 800814a:	d003      	beq.n	8008154 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800814c:	f06f 0302 	mvn.w	r3, #2
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008152:	e028      	b.n	80081a6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d025      	beq.n	80081a6 <osMessageQueueGet+0xce>
 800815a:	4b17      	ldr	r3, [pc, #92]	; (80081b8 <osMessageQueueGet+0xe0>)
 800815c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800816a:	e01c      	b.n	80081a6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <osMessageQueueGet+0xa0>
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d103      	bne.n	8008180 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008178:	f06f 0303 	mvn.w	r3, #3
 800817c:	627b      	str	r3, [r7, #36]	; 0x24
 800817e:	e013      	b.n	80081a8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	6a38      	ldr	r0, [r7, #32]
 8008186:	f000 fc79 	bl	8008a7c <xQueueReceive>
 800818a:	4603      	mov	r3, r0
 800818c:	2b01      	cmp	r3, #1
 800818e:	d00b      	beq.n	80081a8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008196:	f06f 0301 	mvn.w	r3, #1
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
 800819c:	e004      	b.n	80081a8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800819e:	f06f 0302 	mvn.w	r3, #2
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
 80081a4:	e000      	b.n	80081a8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80081a6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3728      	adds	r7, #40	; 0x28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200001fc 	.word	0x200001fc
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a06      	ldr	r2, [pc, #24]	; (80081e4 <vApplicationGetIdleTaskMemory+0x28>)
 80081cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4a05      	ldr	r2, [pc, #20]	; (80081e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80081d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2280      	movs	r2, #128	; 0x80
 80081d8:	601a      	str	r2, [r3, #0]
}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr
 80081e4:	20000200 	.word	0x20000200
 80081e8:	2000025c 	.word	0x2000025c

080081ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4a07      	ldr	r2, [pc, #28]	; (8008218 <vApplicationGetTimerTaskMemory+0x2c>)
 80081fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	4a06      	ldr	r2, [pc, #24]	; (800821c <vApplicationGetTimerTaskMemory+0x30>)
 8008202:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800820a:	601a      	str	r2, [r3, #0]
}
 800820c:	bf00      	nop
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	2000045c 	.word	0x2000045c
 800821c:	200004b8 	.word	0x200004b8

08008220 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f103 0208 	add.w	r2, r3, #8
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f04f 32ff 	mov.w	r2, #4294967295
 8008238:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f103 0208 	add.w	r2, r3, #8
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f103 0208 	add.w	r2, r3, #8
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr

0800825e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr

08008276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008276:	b480      	push	{r7}
 8008278:	b085      	sub	sp, #20
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	601a      	str	r2, [r3, #0]
}
 80082b2:	bf00      	nop
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr

080082bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d2:	d103      	bne.n	80082dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	e00c      	b.n	80082f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3308      	adds	r3, #8
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	e002      	b.n	80082ea <vListInsert+0x2e>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d2f6      	bcs.n	80082e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	601a      	str	r2, [r3, #0]
}
 8008322:	bf00      	nop
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr

0800832c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6892      	ldr	r2, [r2, #8]
 8008342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6852      	ldr	r2, [r2, #4]
 800834c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d103      	bne.n	8008360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	1e5a      	subs	r2, r3, #1
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr
	...

08008380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	e7fe      	b.n	80083a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80083a8:	f002 fb36 	bl	800aa18 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b4:	68f9      	ldr	r1, [r7, #12]
 80083b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083b8:	fb01 f303 	mul.w	r3, r1, r3
 80083bc:	441a      	add	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d8:	3b01      	subs	r3, #1
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083de:	fb01 f303 	mul.w	r3, r1, r3
 80083e2:	441a      	add	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	22ff      	movs	r2, #255	; 0xff
 80083ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	22ff      	movs	r2, #255	; 0xff
 80083f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d114      	bne.n	8008428 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01a      	beq.n	800843c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3310      	adds	r3, #16
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fb66 	bl	8009adc <xTaskRemoveFromEventList>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d012      	beq.n	800843c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008416:	4b0d      	ldr	r3, [pc, #52]	; (800844c <xQueueGenericReset+0xcc>)
 8008418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	e009      	b.n	800843c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3310      	adds	r3, #16
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff fef7 	bl	8008220 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3324      	adds	r3, #36	; 0x24
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff fef2 	bl	8008220 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800843c:	f002 fb1a 	bl	800aa74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008440:	2301      	movs	r3, #1
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	e000ed04 	.word	0xe000ed04

08008450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08e      	sub	sp, #56	; 0x38
 8008454:	af02      	add	r7, sp, #8
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d109      	bne.n	8008478 <xQueueGenericCreateStatic+0x28>
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	62bb      	str	r3, [r7, #40]	; 0x28
 8008476:	e7fe      	b.n	8008476 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d109      	bne.n	8008492 <xQueueGenericCreateStatic+0x42>
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
 8008490:	e7fe      	b.n	8008490 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <xQueueGenericCreateStatic+0x4e>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <xQueueGenericCreateStatic+0x52>
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <xQueueGenericCreateStatic+0x54>
 80084a2:	2300      	movs	r3, #0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <xQueueGenericCreateStatic+0x6c>
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	623b      	str	r3, [r7, #32]
 80084ba:	e7fe      	b.n	80084ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d102      	bne.n	80084c8 <xQueueGenericCreateStatic+0x78>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <xQueueGenericCreateStatic+0x7c>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <xQueueGenericCreateStatic+0x7e>
 80084cc:	2300      	movs	r3, #0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <xQueueGenericCreateStatic+0x96>
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	e7fe      	b.n	80084e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084e6:	2350      	movs	r3, #80	; 0x50
 80084e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b50      	cmp	r3, #80	; 0x50
 80084ee:	d009      	beq.n	8008504 <xQueueGenericCreateStatic+0xb4>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	61bb      	str	r3, [r7, #24]
 8008502:	e7fe      	b.n	8008502 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00d      	beq.n	800852a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008516:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	4613      	mov	r3, r2
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f842 	bl	80085ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800852c:	4618      	mov	r0, r3
 800852e:	3730      	adds	r7, #48	; 0x30
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08a      	sub	sp, #40	; 0x28
 8008538:	af02      	add	r7, sp, #8
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	4613      	mov	r3, r2
 8008540:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d109      	bne.n	800855c <xQueueGenericCreate+0x28>
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	e7fe      	b.n	800855a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d102      	bne.n	8008568 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008562:	2300      	movs	r3, #0
 8008564:	61fb      	str	r3, [r7, #28]
 8008566:	e004      	b.n	8008572 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	fb02 f303 	mul.w	r3, r2, r3
 8008570:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	3350      	adds	r3, #80	; 0x50
 8008576:	4618      	mov	r0, r3
 8008578:	f002 fb44 	bl	800ac04 <pvPortMalloc>
 800857c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00f      	beq.n	80085a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	3350      	adds	r3, #80	; 0x50
 8008588:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008592:	79fa      	ldrb	r2, [r7, #7]
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4613      	mov	r3, r2
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	68b9      	ldr	r1, [r7, #8]
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f805 	bl	80085ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80085a4:	69bb      	ldr	r3, [r7, #24]
	}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	e002      	b.n	80085d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085dc:	2101      	movs	r1, #1
 80085de:	69b8      	ldr	r0, [r7, #24]
 80085e0:	f7ff fece 	bl	8008380 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	78fa      	ldrb	r2, [r7, #3]
 80085e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085ec:	bf00      	nop
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00e      	beq.n	8008620 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008614:	2300      	movs	r3, #0
 8008616:	2200      	movs	r2, #0
 8008618:	2100      	movs	r1, #0
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f8a0 	bl	8008760 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008632:	2301      	movs	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	2300      	movs	r3, #0
 8008638:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	461a      	mov	r2, r3
 800863e:	6939      	ldr	r1, [r7, #16]
 8008640:	6978      	ldr	r0, [r7, #20]
 8008642:	f7ff ff77 	bl	8008534 <xQueueGenericCreate>
 8008646:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7ff ffd3 	bl	80085f4 <prvInitialiseMutex>

		return pxNewQueue;
 800864e:	68fb      	ldr	r3, [r7, #12]
	}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af02      	add	r7, sp, #8
 800865e:	4603      	mov	r3, r0
 8008660:	6039      	str	r1, [r7, #0]
 8008662:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008664:	2301      	movs	r3, #1
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	6939      	ldr	r1, [r7, #16]
 8008676:	6978      	ldr	r0, [r7, #20]
 8008678:	f7ff feea 	bl	8008450 <xQueueGenericCreateStatic>
 800867c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7ff ffb8 	bl	80085f4 <prvInitialiseMutex>

		return pxNewQueue;
 8008684:	68fb      	ldr	r3, [r7, #12]
	}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800868e:	b590      	push	{r4, r7, lr}
 8008690:	b087      	sub	sp, #28
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d109      	bne.n	80086b4 <xQueueGiveMutexRecursive+0x26>
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	e7fe      	b.n	80086b2 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	685c      	ldr	r4, [r3, #4]
 80086b8:	f001 fbca 	bl	8009e50 <xTaskGetCurrentTaskHandle>
 80086bc:	4603      	mov	r3, r0
 80086be:	429c      	cmp	r4, r3
 80086c0:	d111      	bne.n	80086e6 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	1e5a      	subs	r2, r3, #1
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d105      	bne.n	80086e0 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80086d4:	2300      	movs	r3, #0
 80086d6:	2200      	movs	r2, #0
 80086d8:	2100      	movs	r1, #0
 80086da:	6938      	ldr	r0, [r7, #16]
 80086dc:	f000 f840 	bl	8008760 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80086e0:	2301      	movs	r3, #1
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e001      	b.n	80086ea <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80086e6:	2300      	movs	r3, #0
 80086e8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80086ea:	697b      	ldr	r3, [r7, #20]
	}
 80086ec:	4618      	mov	r0, r3
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd90      	pop	{r4, r7, pc}

080086f4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80086f4:	b590      	push	{r4, r7, lr}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d109      	bne.n	800871c <xQueueTakeMutexRecursive+0x28>
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	e7fe      	b.n	800871a <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	685c      	ldr	r4, [r3, #4]
 8008720:	f001 fb96 	bl	8009e50 <xTaskGetCurrentTaskHandle>
 8008724:	4603      	mov	r3, r0
 8008726:	429c      	cmp	r4, r3
 8008728:	d107      	bne.n	800873a <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008734:	2301      	movs	r3, #1
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	e00c      	b.n	8008754 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6938      	ldr	r0, [r7, #16]
 800873e:	f000 fa79 	bl	8008c34 <xQueueSemaphoreTake>
 8008742:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008754:	697b      	ldr	r3, [r7, #20]
	}
 8008756:	4618      	mov	r0, r3
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	bd90      	pop	{r4, r7, pc}
	...

08008760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08e      	sub	sp, #56	; 0x38
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800876e:	2300      	movs	r3, #0
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	2b00      	cmp	r3, #0
 800877a:	d109      	bne.n	8008790 <xQueueGenericSend+0x30>
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	62bb      	str	r3, [r7, #40]	; 0x28
 800878e:	e7fe      	b.n	800878e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <xQueueGenericSend+0x3e>
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <xQueueGenericSend+0x42>
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <xQueueGenericSend+0x44>
 80087a2:	2300      	movs	r3, #0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <xQueueGenericSend+0x5c>
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ba:	e7fe      	b.n	80087ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d103      	bne.n	80087ca <xQueueGenericSend+0x6a>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <xQueueGenericSend+0x6e>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e000      	b.n	80087d0 <xQueueGenericSend+0x70>
 80087ce:	2300      	movs	r3, #0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d109      	bne.n	80087e8 <xQueueGenericSend+0x88>
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	623b      	str	r3, [r7, #32]
 80087e6:	e7fe      	b.n	80087e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087e8:	f001 fb40 	bl	8009e6c <xTaskGetSchedulerState>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d102      	bne.n	80087f8 <xQueueGenericSend+0x98>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <xQueueGenericSend+0x9c>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <xQueueGenericSend+0x9e>
 80087fc:	2300      	movs	r3, #0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <xQueueGenericSend+0xb6>
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	e7fe      	b.n	8008814 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008816:	f002 f8ff 	bl	800aa18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008822:	429a      	cmp	r2, r3
 8008824:	d302      	bcc.n	800882c <xQueueGenericSend+0xcc>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d129      	bne.n	8008880 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008832:	f000 fb9b 	bl	8008f6c <prvCopyDataToQueue>
 8008836:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	2b00      	cmp	r3, #0
 800883e:	d010      	beq.n	8008862 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008842:	3324      	adds	r3, #36	; 0x24
 8008844:	4618      	mov	r0, r3
 8008846:	f001 f949 	bl	8009adc <xTaskRemoveFromEventList>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d013      	beq.n	8008878 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008850:	4b3f      	ldr	r3, [pc, #252]	; (8008950 <xQueueGenericSend+0x1f0>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	e00a      	b.n	8008878 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008868:	4b39      	ldr	r3, [pc, #228]	; (8008950 <xQueueGenericSend+0x1f0>)
 800886a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008878:	f002 f8fc 	bl	800aa74 <vPortExitCritical>
				return pdPASS;
 800887c:	2301      	movs	r3, #1
 800887e:	e063      	b.n	8008948 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008886:	f002 f8f5 	bl	800aa74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800888a:	2300      	movs	r3, #0
 800888c:	e05c      	b.n	8008948 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008890:	2b00      	cmp	r3, #0
 8008892:	d106      	bne.n	80088a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008894:	f107 0314 	add.w	r3, r7, #20
 8008898:	4618      	mov	r0, r3
 800889a:	f001 f981 	bl	8009ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800889e:	2301      	movs	r3, #1
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088a2:	f002 f8e7 	bl	800aa74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088a6:	f000 fef9 	bl	800969c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088aa:	f002 f8b5 	bl	800aa18 <vPortEnterCritical>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088b4:	b25b      	sxtb	r3, r3
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ba:	d103      	bne.n	80088c4 <xQueueGenericSend+0x164>
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ca:	b25b      	sxtb	r3, r3
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d103      	bne.n	80088da <xQueueGenericSend+0x17a>
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088da:	f002 f8cb 	bl	800aa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088de:	1d3a      	adds	r2, r7, #4
 80088e0:	f107 0314 	add.w	r3, r7, #20
 80088e4:	4611      	mov	r1, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 f970 	bl	8009bcc <xTaskCheckForTimeOut>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d124      	bne.n	800893c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f4:	f000 fc32 	bl	800915c <prvIsQueueFull>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d018      	beq.n	8008930 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	3310      	adds	r3, #16
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4611      	mov	r1, r2
 8008906:	4618      	mov	r0, r3
 8008908:	f001 f89a 	bl	8009a40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800890c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890e:	f000 fbbd 	bl	800908c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008912:	f000 fed1 	bl	80096b8 <xTaskResumeAll>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	f47f af7c 	bne.w	8008816 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800891e:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <xQueueGenericSend+0x1f0>)
 8008920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	e772      	b.n	8008816 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008932:	f000 fbab 	bl	800908c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008936:	f000 febf 	bl	80096b8 <xTaskResumeAll>
 800893a:	e76c      	b.n	8008816 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800893c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800893e:	f000 fba5 	bl	800908c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008942:	f000 feb9 	bl	80096b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008946:	2300      	movs	r3, #0
		}
	}
}
 8008948:	4618      	mov	r0, r3
 800894a:	3738      	adds	r7, #56	; 0x38
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	e000ed04 	.word	0xe000ed04

08008954 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08e      	sub	sp, #56	; 0x38
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <xQueueGenericSendFromISR+0x2c>
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
 800897e:	e7fe      	b.n	800897e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d103      	bne.n	800898e <xQueueGenericSendFromISR+0x3a>
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <xQueueGenericSendFromISR+0x3e>
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <xQueueGenericSendFromISR+0x40>
 8008992:	2300      	movs	r3, #0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <xQueueGenericSendFromISR+0x58>
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	623b      	str	r3, [r7, #32]
 80089aa:	e7fe      	b.n	80089aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d103      	bne.n	80089ba <xQueueGenericSendFromISR+0x66>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d101      	bne.n	80089be <xQueueGenericSendFromISR+0x6a>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e000      	b.n	80089c0 <xQueueGenericSendFromISR+0x6c>
 80089be:	2300      	movs	r3, #0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d109      	bne.n	80089d8 <xQueueGenericSendFromISR+0x84>
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	61fb      	str	r3, [r7, #28]
 80089d6:	e7fe      	b.n	80089d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089d8:	f002 f8d8 	bl	800ab8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089dc:	f3ef 8211 	mrs	r2, BASEPRI
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	61ba      	str	r2, [r7, #24]
 80089f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d302      	bcc.n	8008a0a <xQueueGenericSendFromISR+0xb6>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d12c      	bne.n	8008a64 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	68b9      	ldr	r1, [r7, #8]
 8008a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a1a:	f000 faa7 	bl	8008f6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a1e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d112      	bne.n	8008a4e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d016      	beq.n	8008a5e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	3324      	adds	r3, #36	; 0x24
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 f851 	bl	8009adc <xTaskRemoveFromEventList>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00e      	beq.n	8008a5e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	e007      	b.n	8008a5e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a52:	3301      	adds	r3, #1
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	b25a      	sxtb	r2, r3
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008a62:	e001      	b.n	8008a68 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3738      	adds	r7, #56	; 0x38
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08c      	sub	sp, #48	; 0x30
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d109      	bne.n	8008aaa <xQueueReceive+0x2e>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	623b      	str	r3, [r7, #32]
 8008aa8:	e7fe      	b.n	8008aa8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d103      	bne.n	8008ab8 <xQueueReceive+0x3c>
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <xQueueReceive+0x40>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <xQueueReceive+0x42>
 8008abc:	2300      	movs	r3, #0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <xQueueReceive+0x5a>
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	61fb      	str	r3, [r7, #28]
 8008ad4:	e7fe      	b.n	8008ad4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ad6:	f001 f9c9 	bl	8009e6c <xTaskGetSchedulerState>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d102      	bne.n	8008ae6 <xQueueReceive+0x6a>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <xQueueReceive+0x6e>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <xQueueReceive+0x70>
 8008aea:	2300      	movs	r3, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d109      	bne.n	8008b04 <xQueueReceive+0x88>
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	61bb      	str	r3, [r7, #24]
 8008b02:	e7fe      	b.n	8008b02 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b04:	f001 ff88 	bl	800aa18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d01f      	beq.n	8008b54 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b18:	f000 fa92 	bl	8009040 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	1e5a      	subs	r2, r3, #1
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00f      	beq.n	8008b4c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	3310      	adds	r3, #16
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 ffd3 	bl	8009adc <xTaskRemoveFromEventList>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b3c:	4b3c      	ldr	r3, [pc, #240]	; (8008c30 <xQueueReceive+0x1b4>)
 8008b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b4c:	f001 ff92 	bl	800aa74 <vPortExitCritical>
				return pdPASS;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e069      	b.n	8008c28 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d103      	bne.n	8008b62 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b5a:	f001 ff8b 	bl	800aa74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e062      	b.n	8008c28 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d106      	bne.n	8008b76 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b68:	f107 0310 	add.w	r3, r7, #16
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 f817 	bl	8009ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b72:	2301      	movs	r3, #1
 8008b74:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b76:	f001 ff7d 	bl	800aa74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b7a:	f000 fd8f 	bl	800969c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b7e:	f001 ff4b 	bl	800aa18 <vPortEnterCritical>
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b88:	b25b      	sxtb	r3, r3
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	d103      	bne.n	8008b98 <xQueueReceive+0x11c>
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d103      	bne.n	8008bae <xQueueReceive+0x132>
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bae:	f001 ff61 	bl	800aa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bb2:	1d3a      	adds	r2, r7, #4
 8008bb4:	f107 0310 	add.w	r3, r7, #16
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f001 f806 	bl	8009bcc <xTaskCheckForTimeOut>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d123      	bne.n	8008c0e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc8:	f000 fab2 	bl	8009130 <prvIsQueueEmpty>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d017      	beq.n	8008c02 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	3324      	adds	r3, #36	; 0x24
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 ff30 	bl	8009a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be2:	f000 fa53 	bl	800908c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008be6:	f000 fd67 	bl	80096b8 <xTaskResumeAll>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d189      	bne.n	8008b04 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008bf0:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <xQueueReceive+0x1b4>)
 8008bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	e780      	b.n	8008b04 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c04:	f000 fa42 	bl	800908c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c08:	f000 fd56 	bl	80096b8 <xTaskResumeAll>
 8008c0c:	e77a      	b.n	8008b04 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c10:	f000 fa3c 	bl	800908c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c14:	f000 fd50 	bl	80096b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1a:	f000 fa89 	bl	8009130 <prvIsQueueEmpty>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f43f af6f 	beq.w	8008b04 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3730      	adds	r7, #48	; 0x30
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	e000ed04 	.word	0xe000ed04

08008c34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08e      	sub	sp, #56	; 0x38
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c46:	2300      	movs	r3, #0
 8008c48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d109      	bne.n	8008c64 <xQueueSemaphoreTake+0x30>
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	623b      	str	r3, [r7, #32]
 8008c62:	e7fe      	b.n	8008c62 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <xQueueSemaphoreTake+0x4c>
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	61fb      	str	r3, [r7, #28]
 8008c7e:	e7fe      	b.n	8008c7e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c80:	f001 f8f4 	bl	8009e6c <xTaskGetSchedulerState>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <xQueueSemaphoreTake+0x5c>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <xQueueSemaphoreTake+0x60>
 8008c90:	2301      	movs	r3, #1
 8008c92:	e000      	b.n	8008c96 <xQueueSemaphoreTake+0x62>
 8008c94:	2300      	movs	r3, #0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d109      	bne.n	8008cae <xQueueSemaphoreTake+0x7a>
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	61bb      	str	r3, [r7, #24]
 8008cac:	e7fe      	b.n	8008cac <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cae:	f001 feb3 	bl	800aa18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d024      	beq.n	8008d08 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	1e5a      	subs	r2, r3, #1
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d104      	bne.n	8008cd8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008cce:	f001 fa49 	bl	800a164 <pvTaskIncrementMutexHeldCount>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00f      	beq.n	8008d00 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fef9 	bl	8009adc <xTaskRemoveFromEventList>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d007      	beq.n	8008d00 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cf0:	4b53      	ldr	r3, [pc, #332]	; (8008e40 <xQueueSemaphoreTake+0x20c>)
 8008cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d00:	f001 feb8 	bl	800aa74 <vPortExitCritical>
				return pdPASS;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e096      	b.n	8008e36 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d110      	bne.n	8008d30 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <xQueueSemaphoreTake+0xf4>
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	617b      	str	r3, [r7, #20]
 8008d26:	e7fe      	b.n	8008d26 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d28:	f001 fea4 	bl	800aa74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e082      	b.n	8008e36 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d106      	bne.n	8008d44 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d36:	f107 030c 	add.w	r3, r7, #12
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 ff30 	bl	8009ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d40:	2301      	movs	r3, #1
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d44:	f001 fe96 	bl	800aa74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d48:	f000 fca8 	bl	800969c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d4c:	f001 fe64 	bl	800aa18 <vPortEnterCritical>
 8008d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d56:	b25b      	sxtb	r3, r3
 8008d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5c:	d103      	bne.n	8008d66 <xQueueSemaphoreTake+0x132>
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d6c:	b25b      	sxtb	r3, r3
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d103      	bne.n	8008d7c <xQueueSemaphoreTake+0x148>
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d7c:	f001 fe7a 	bl	800aa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d80:	463a      	mov	r2, r7
 8008d82:	f107 030c 	add.w	r3, r7, #12
 8008d86:	4611      	mov	r1, r2
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 ff1f 	bl	8009bcc <xTaskCheckForTimeOut>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d132      	bne.n	8008dfa <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d96:	f000 f9cb 	bl	8009130 <prvIsQueueEmpty>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d026      	beq.n	8008dee <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008da8:	f001 fe36 	bl	800aa18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 f879 	bl	8009ea8 <xTaskPriorityInherit>
 8008db6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008db8:	f001 fe5c 	bl	800aa74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	3324      	adds	r3, #36	; 0x24
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fe3b 	bl	8009a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dcc:	f000 f95e 	bl	800908c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dd0:	f000 fc72 	bl	80096b8 <xTaskResumeAll>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f47f af69 	bne.w	8008cae <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008ddc:	4b18      	ldr	r3, [pc, #96]	; (8008e40 <xQueueSemaphoreTake+0x20c>)
 8008dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	e75f      	b.n	8008cae <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008df0:	f000 f94c 	bl	800908c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008df4:	f000 fc60 	bl	80096b8 <xTaskResumeAll>
 8008df8:	e759      	b.n	8008cae <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dfc:	f000 f946 	bl	800908c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e00:	f000 fc5a 	bl	80096b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e06:	f000 f993 	bl	8009130 <prvIsQueueEmpty>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f43f af4e 	beq.w	8008cae <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00d      	beq.n	8008e34 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008e18:	f001 fdfe 	bl	800aa18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e1e:	f000 f88e 	bl	8008f3e <prvGetDisinheritPriorityAfterTimeout>
 8008e22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 f916 	bl	800a05c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e30:	f001 fe20 	bl	800aa74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3738      	adds	r7, #56	; 0x38
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	e000ed04 	.word	0xe000ed04

08008e44 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08e      	sub	sp, #56	; 0x38
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <xQueueReceiveFromISR+0x2a>
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	623b      	str	r3, [r7, #32]
 8008e6c:	e7fe      	b.n	8008e6c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d103      	bne.n	8008e7c <xQueueReceiveFromISR+0x38>
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <xQueueReceiveFromISR+0x3c>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e000      	b.n	8008e82 <xQueueReceiveFromISR+0x3e>
 8008e80:	2300      	movs	r3, #0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d109      	bne.n	8008e9a <xQueueReceiveFromISR+0x56>
 8008e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	e7fe      	b.n	8008e98 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e9a:	f001 fe77 	bl	800ab8c <vPortValidateInterruptPriority>
	__asm volatile
 8008e9e:	f3ef 8211 	mrs	r2, BASEPRI
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	61ba      	str	r2, [r7, #24]
 8008eb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008eb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d02f      	beq.n	8008f26 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ed0:	68b9      	ldr	r1, [r7, #8]
 8008ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed4:	f000 f8b4 	bl	8009040 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	1e5a      	subs	r2, r3, #1
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008ee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee8:	d112      	bne.n	8008f10 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d016      	beq.n	8008f20 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	3310      	adds	r3, #16
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 fdf0 	bl	8009adc <xTaskRemoveFromEventList>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00e      	beq.n	8008f20 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	e007      	b.n	8008f20 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f14:	3301      	adds	r3, #1
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	b25a      	sxtb	r2, r3
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008f20:	2301      	movs	r3, #1
 8008f22:	637b      	str	r3, [r7, #52]	; 0x34
 8008f24:	e001      	b.n	8008f2a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
 8008f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3738      	adds	r7, #56	; 0x38
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f3e:	b480      	push	{r7}
 8008f40:	b085      	sub	sp, #20
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d006      	beq.n	8008f5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	e001      	b.n	8008f60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008f60:	68fb      	ldr	r3, [r7, #12]
	}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bc80      	pop	{r7}
 8008f6a:	4770      	bx	lr

08008f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10d      	bne.n	8008fa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d14d      	bne.n	800902e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fff4 	bl	8009f84 <xTaskPriorityDisinherit>
 8008f9c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	605a      	str	r2, [r3, #4]
 8008fa4:	e043      	b.n	800902e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d119      	bne.n	8008fe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6898      	ldr	r0, [r3, #8]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	f003 ffda 	bl	800cf70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc4:	441a      	add	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689a      	ldr	r2, [r3, #8]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d32b      	bcc.n	800902e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	609a      	str	r2, [r3, #8]
 8008fde:	e026      	b.n	800902e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	68d8      	ldr	r0, [r3, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	f003 ffc0 	bl	800cf70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff8:	425b      	negs	r3, r3
 8008ffa:	441a      	add	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d207      	bcs.n	800901c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	425b      	negs	r3, r3
 8009016:	441a      	add	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d105      	bne.n	800902e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	3b01      	subs	r3, #1
 800902c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009036:	697b      	ldr	r3, [r7, #20]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d018      	beq.n	8009084 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68da      	ldr	r2, [r3, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	441a      	add	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	429a      	cmp	r2, r3
 800906a:	d303      	bcc.n	8009074 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68d9      	ldr	r1, [r3, #12]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907c:	461a      	mov	r2, r3
 800907e:	6838      	ldr	r0, [r7, #0]
 8009080:	f003 ff76 	bl	800cf70 <memcpy>
	}
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009094:	f001 fcc0 	bl	800aa18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800909e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090a0:	e011      	b.n	80090c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d012      	beq.n	80090d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3324      	adds	r3, #36	; 0x24
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fd14 	bl	8009adc <xTaskRemoveFromEventList>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090ba:	f000 fde7 	bl	8009c8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dce9      	bgt.n	80090a2 <prvUnlockQueue+0x16>
 80090ce:	e000      	b.n	80090d2 <prvUnlockQueue+0x46>
					break;
 80090d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	22ff      	movs	r2, #255	; 0xff
 80090d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80090da:	f001 fccb 	bl	800aa74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090de:	f001 fc9b 	bl	800aa18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090ea:	e011      	b.n	8009110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d012      	beq.n	800911a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3310      	adds	r3, #16
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fcef 	bl	8009adc <xTaskRemoveFromEventList>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009104:	f000 fdc2 	bl	8009c8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	3b01      	subs	r3, #1
 800910c:	b2db      	uxtb	r3, r3
 800910e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009114:	2b00      	cmp	r3, #0
 8009116:	dce9      	bgt.n	80090ec <prvUnlockQueue+0x60>
 8009118:	e000      	b.n	800911c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800911a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	22ff      	movs	r2, #255	; 0xff
 8009120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009124:	f001 fca6 	bl	800aa74 <vPortExitCritical>
}
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009138:	f001 fc6e 	bl	800aa18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009140:	2b00      	cmp	r3, #0
 8009142:	d102      	bne.n	800914a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009144:	2301      	movs	r3, #1
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e001      	b.n	800914e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800914a:	2300      	movs	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800914e:	f001 fc91 	bl	800aa74 <vPortExitCritical>

	return xReturn;
 8009152:	68fb      	ldr	r3, [r7, #12]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009164:	f001 fc58 	bl	800aa18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009170:	429a      	cmp	r2, r3
 8009172:	d102      	bne.n	800917a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	e001      	b.n	800917e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800917e:	f001 fc79 	bl	800aa74 <vPortExitCritical>

	return xReturn;
 8009182:	68fb      	ldr	r3, [r7, #12]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009196:	2300      	movs	r3, #0
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	e014      	b.n	80091c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800919c:	4a0e      	ldr	r2, [pc, #56]	; (80091d8 <vQueueAddToRegistry+0x4c>)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10b      	bne.n	80091c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091a8:	490b      	ldr	r1, [pc, #44]	; (80091d8 <vQueueAddToRegistry+0x4c>)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80091b2:	4a09      	ldr	r2, [pc, #36]	; (80091d8 <vQueueAddToRegistry+0x4c>)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	4413      	add	r3, r2
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091be:	e005      	b.n	80091cc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3301      	adds	r3, #1
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b07      	cmp	r3, #7
 80091ca:	d9e7      	bls.n	800919c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80091cc:	bf00      	nop
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	20001f74 	.word	0x20001f74

080091dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80091ec:	f001 fc14 	bl	800aa18 <vPortEnterCritical>
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091f6:	b25b      	sxtb	r3, r3
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fc:	d103      	bne.n	8009206 <vQueueWaitForMessageRestricted+0x2a>
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800920c:	b25b      	sxtb	r3, r3
 800920e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009212:	d103      	bne.n	800921c <vQueueWaitForMessageRestricted+0x40>
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800921c:	f001 fc2a 	bl	800aa74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	2b00      	cmp	r3, #0
 8009226:	d106      	bne.n	8009236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	3324      	adds	r3, #36	; 0x24
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	68b9      	ldr	r1, [r7, #8]
 8009230:	4618      	mov	r0, r3
 8009232:	f000 fc29 	bl	8009a88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009236:	6978      	ldr	r0, [r7, #20]
 8009238:	f7ff ff28 	bl	800908c <prvUnlockQueue>
	}
 800923c:	bf00      	nop
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08e      	sub	sp, #56	; 0x38
 8009248:	af04      	add	r7, sp, #16
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009254:	2b00      	cmp	r3, #0
 8009256:	d109      	bne.n	800926c <xTaskCreateStatic+0x28>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	623b      	str	r3, [r7, #32]
 800926a:	e7fe      	b.n	800926a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	2b00      	cmp	r3, #0
 8009270:	d109      	bne.n	8009286 <xTaskCreateStatic+0x42>
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	61fb      	str	r3, [r7, #28]
 8009284:	e7fe      	b.n	8009284 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009286:	235c      	movs	r3, #92	; 0x5c
 8009288:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b5c      	cmp	r3, #92	; 0x5c
 800928e:	d009      	beq.n	80092a4 <xTaskCreateStatic+0x60>
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	e7fe      	b.n	80092a2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d01e      	beq.n	80092e8 <xTaskCreateStatic+0xa4>
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01b      	beq.n	80092e8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	2202      	movs	r2, #2
 80092be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092c2:	2300      	movs	r3, #0
 80092c4:	9303      	str	r3, [sp, #12]
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	9302      	str	r3, [sp, #8]
 80092ca:	f107 0314 	add.w	r3, r7, #20
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	68b9      	ldr	r1, [r7, #8]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f850 	bl	8009380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092e2:	f000 f8d3 	bl	800948c <prvAddNewTaskToReadyList>
 80092e6:	e001      	b.n	80092ec <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092ec:	697b      	ldr	r3, [r7, #20]
	}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3728      	adds	r7, #40	; 0x28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b08c      	sub	sp, #48	; 0x30
 80092fa:	af04      	add	r7, sp, #16
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	603b      	str	r3, [r7, #0]
 8009302:	4613      	mov	r3, r2
 8009304:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009306:	88fb      	ldrh	r3, [r7, #6]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4618      	mov	r0, r3
 800930c:	f001 fc7a 	bl	800ac04 <pvPortMalloc>
 8009310:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00e      	beq.n	8009336 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009318:	205c      	movs	r0, #92	; 0x5c
 800931a:	f001 fc73 	bl	800ac04 <pvPortMalloc>
 800931e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	631a      	str	r2, [r3, #48]	; 0x30
 800932c:	e005      	b.n	800933a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800932e:	6978      	ldr	r0, [r7, #20]
 8009330:	f001 fd2a 	bl	800ad88 <vPortFree>
 8009334:	e001      	b.n	800933a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d017      	beq.n	8009370 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009348:	88fa      	ldrh	r2, [r7, #6]
 800934a:	2300      	movs	r3, #0
 800934c:	9303      	str	r3, [sp, #12]
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	9302      	str	r3, [sp, #8]
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	68b9      	ldr	r1, [r7, #8]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 f80e 	bl	8009380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009364:	69f8      	ldr	r0, [r7, #28]
 8009366:	f000 f891 	bl	800948c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800936a:	2301      	movs	r3, #1
 800936c:	61bb      	str	r3, [r7, #24]
 800936e:	e002      	b.n	8009376 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009370:	f04f 33ff 	mov.w	r3, #4294967295
 8009374:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009376:	69bb      	ldr	r3, [r7, #24]
	}
 8009378:	4618      	mov	r0, r3
 800937a:	3720      	adds	r7, #32
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b088      	sub	sp, #32
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	461a      	mov	r2, r3
 8009398:	21a5      	movs	r1, #165	; 0xa5
 800939a:	f003 fdf4 	bl	800cf86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093a8:	3b01      	subs	r3, #1
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f023 0307 	bic.w	r3, r3, #7
 80093b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <prvInitialiseNewTask+0x56>
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	e7fe      	b.n	80093d4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093d6:	2300      	movs	r3, #0
 80093d8:	61fb      	str	r3, [r7, #28]
 80093da:	e012      	b.n	8009402 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	4413      	add	r3, r2
 80093e2:	7819      	ldrb	r1, [r3, #0]
 80093e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	4413      	add	r3, r2
 80093ea:	3334      	adds	r3, #52	; 0x34
 80093ec:	460a      	mov	r2, r1
 80093ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	4413      	add	r3, r2
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d006      	beq.n	800940a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	3301      	adds	r3, #1
 8009400:	61fb      	str	r3, [r7, #28]
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	2b0f      	cmp	r3, #15
 8009406:	d9e9      	bls.n	80093dc <prvInitialiseNewTask+0x5c>
 8009408:	e000      	b.n	800940c <prvInitialiseNewTask+0x8c>
		{
			break;
 800940a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	2b37      	cmp	r3, #55	; 0x37
 8009418:	d901      	bls.n	800941e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800941a:	2337      	movs	r3, #55	; 0x37
 800941c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009422:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009428:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	2200      	movs	r2, #0
 800942e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	3304      	adds	r3, #4
 8009434:	4618      	mov	r0, r3
 8009436:	f7fe ff12 	bl	800825e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	3318      	adds	r3, #24
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe ff0d 	bl	800825e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009448:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009458:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	2200      	movs	r2, #0
 800945e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	68f9      	ldr	r1, [r7, #12]
 800946c:	69b8      	ldr	r0, [r7, #24]
 800946e:	f001 f9eb 	bl	800a848 <pxPortInitialiseStack>
 8009472:	4602      	mov	r2, r0
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d002      	beq.n	8009484 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009482:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009484:	bf00      	nop
 8009486:	3720      	adds	r7, #32
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009494:	f001 fac0 	bl	800aa18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009498:	4b2d      	ldr	r3, [pc, #180]	; (8009550 <prvAddNewTaskToReadyList+0xc4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3301      	adds	r3, #1
 800949e:	4a2c      	ldr	r2, [pc, #176]	; (8009550 <prvAddNewTaskToReadyList+0xc4>)
 80094a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094a2:	4b2c      	ldr	r3, [pc, #176]	; (8009554 <prvAddNewTaskToReadyList+0xc8>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d109      	bne.n	80094be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094aa:	4a2a      	ldr	r2, [pc, #168]	; (8009554 <prvAddNewTaskToReadyList+0xc8>)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094b0:	4b27      	ldr	r3, [pc, #156]	; (8009550 <prvAddNewTaskToReadyList+0xc4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d110      	bne.n	80094da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094b8:	f000 fc0c 	bl	8009cd4 <prvInitialiseTaskLists>
 80094bc:	e00d      	b.n	80094da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094be:	4b26      	ldr	r3, [pc, #152]	; (8009558 <prvAddNewTaskToReadyList+0xcc>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d109      	bne.n	80094da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094c6:	4b23      	ldr	r3, [pc, #140]	; (8009554 <prvAddNewTaskToReadyList+0xc8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d802      	bhi.n	80094da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094d4:	4a1f      	ldr	r2, [pc, #124]	; (8009554 <prvAddNewTaskToReadyList+0xc8>)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094da:	4b20      	ldr	r3, [pc, #128]	; (800955c <prvAddNewTaskToReadyList+0xd0>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3301      	adds	r3, #1
 80094e0:	4a1e      	ldr	r2, [pc, #120]	; (800955c <prvAddNewTaskToReadyList+0xd0>)
 80094e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80094e4:	4b1d      	ldr	r3, [pc, #116]	; (800955c <prvAddNewTaskToReadyList+0xd0>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f0:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <prvAddNewTaskToReadyList+0xd4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d903      	bls.n	8009500 <prvAddNewTaskToReadyList+0x74>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	4a18      	ldr	r2, [pc, #96]	; (8009560 <prvAddNewTaskToReadyList+0xd4>)
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4a15      	ldr	r2, [pc, #84]	; (8009564 <prvAddNewTaskToReadyList+0xd8>)
 800950e:	441a      	add	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3304      	adds	r3, #4
 8009514:	4619      	mov	r1, r3
 8009516:	4610      	mov	r0, r2
 8009518:	f7fe fead 	bl	8008276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800951c:	f001 faaa 	bl	800aa74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009520:	4b0d      	ldr	r3, [pc, #52]	; (8009558 <prvAddNewTaskToReadyList+0xcc>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00e      	beq.n	8009546 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009528:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <prvAddNewTaskToReadyList+0xc8>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009532:	429a      	cmp	r2, r3
 8009534:	d207      	bcs.n	8009546 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009536:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <prvAddNewTaskToReadyList+0xdc>)
 8009538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000d8c 	.word	0x20000d8c
 8009554:	200008b8 	.word	0x200008b8
 8009558:	20000d98 	.word	0x20000d98
 800955c:	20000da8 	.word	0x20000da8
 8009560:	20000d94 	.word	0x20000d94
 8009564:	200008bc 	.word	0x200008bc
 8009568:	e000ed04 	.word	0xe000ed04

0800956c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009574:	2300      	movs	r3, #0
 8009576:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d016      	beq.n	80095ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800957e:	4b13      	ldr	r3, [pc, #76]	; (80095cc <vTaskDelay+0x60>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d009      	beq.n	800959a <vTaskDelay+0x2e>
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	60bb      	str	r3, [r7, #8]
 8009598:	e7fe      	b.n	8009598 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800959a:	f000 f87f 	bl	800969c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800959e:	2100      	movs	r1, #0
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fdf3 	bl	800a18c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095a6:	f000 f887 	bl	80096b8 <xTaskResumeAll>
 80095aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d107      	bne.n	80095c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80095b2:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <vTaskDelay+0x64>)
 80095b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000db4 	.word	0x20000db4
 80095d0:	e000ed04 	.word	0xe000ed04

080095d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	; 0x28
 80095d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095e2:	463a      	mov	r2, r7
 80095e4:	1d39      	adds	r1, r7, #4
 80095e6:	f107 0308 	add.w	r3, r7, #8
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe fde6 	bl	80081bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	9202      	str	r2, [sp, #8]
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	2300      	movs	r3, #0
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	2300      	movs	r3, #0
 8009600:	460a      	mov	r2, r1
 8009602:	4920      	ldr	r1, [pc, #128]	; (8009684 <vTaskStartScheduler+0xb0>)
 8009604:	4820      	ldr	r0, [pc, #128]	; (8009688 <vTaskStartScheduler+0xb4>)
 8009606:	f7ff fe1d 	bl	8009244 <xTaskCreateStatic>
 800960a:	4602      	mov	r2, r0
 800960c:	4b1f      	ldr	r3, [pc, #124]	; (800968c <vTaskStartScheduler+0xb8>)
 800960e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009610:	4b1e      	ldr	r3, [pc, #120]	; (800968c <vTaskStartScheduler+0xb8>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009618:	2301      	movs	r3, #1
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	e001      	b.n	8009622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800961e:	2300      	movs	r3, #0
 8009620:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d102      	bne.n	800962e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009628:	f000 fe04 	bl	800a234 <xTimerCreateTimerTask>
 800962c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d115      	bne.n	8009660 <vTaskStartScheduler+0x8c>
 8009634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009646:	4b12      	ldr	r3, [pc, #72]	; (8009690 <vTaskStartScheduler+0xbc>)
 8009648:	f04f 32ff 	mov.w	r2, #4294967295
 800964c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <vTaskStartScheduler+0xc0>)
 8009650:	2201      	movs	r2, #1
 8009652:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009654:	4b10      	ldr	r3, [pc, #64]	; (8009698 <vTaskStartScheduler+0xc4>)
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800965a:	f001 f96d 	bl	800a938 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800965e:	e00d      	b.n	800967c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d109      	bne.n	800967c <vTaskStartScheduler+0xa8>
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60fb      	str	r3, [r7, #12]
 800967a:	e7fe      	b.n	800967a <vTaskStartScheduler+0xa6>
}
 800967c:	bf00      	nop
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	0800cfd8 	.word	0x0800cfd8
 8009688:	08009ca5 	.word	0x08009ca5
 800968c:	20000db0 	.word	0x20000db0
 8009690:	20000dac 	.word	0x20000dac
 8009694:	20000d98 	.word	0x20000d98
 8009698:	20000d90 	.word	0x20000d90

0800969c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80096a0:	4b04      	ldr	r3, [pc, #16]	; (80096b4 <vTaskSuspendAll+0x18>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	4a03      	ldr	r2, [pc, #12]	; (80096b4 <vTaskSuspendAll+0x18>)
 80096a8:	6013      	str	r3, [r2, #0]
}
 80096aa:	bf00      	nop
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000db4 	.word	0x20000db4

080096b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096c6:	4b41      	ldr	r3, [pc, #260]	; (80097cc <xTaskResumeAll+0x114>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d109      	bne.n	80096e2 <xTaskResumeAll+0x2a>
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	e7fe      	b.n	80096e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096e2:	f001 f999 	bl	800aa18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096e6:	4b39      	ldr	r3, [pc, #228]	; (80097cc <xTaskResumeAll+0x114>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	4a37      	ldr	r2, [pc, #220]	; (80097cc <xTaskResumeAll+0x114>)
 80096ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096f0:	4b36      	ldr	r3, [pc, #216]	; (80097cc <xTaskResumeAll+0x114>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d162      	bne.n	80097be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096f8:	4b35      	ldr	r3, [pc, #212]	; (80097d0 <xTaskResumeAll+0x118>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d05e      	beq.n	80097be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009700:	e02f      	b.n	8009762 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009702:	4b34      	ldr	r3, [pc, #208]	; (80097d4 <xTaskResumeAll+0x11c>)
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3318      	adds	r3, #24
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fe0c 	bl	800832c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	3304      	adds	r3, #4
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fe07 	bl	800832c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009722:	4b2d      	ldr	r3, [pc, #180]	; (80097d8 <xTaskResumeAll+0x120>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	429a      	cmp	r2, r3
 8009728:	d903      	bls.n	8009732 <xTaskResumeAll+0x7a>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	4a2a      	ldr	r2, [pc, #168]	; (80097d8 <xTaskResumeAll+0x120>)
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009736:	4613      	mov	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4a27      	ldr	r2, [pc, #156]	; (80097dc <xTaskResumeAll+0x124>)
 8009740:	441a      	add	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f7fe fd94 	bl	8008276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009752:	4b23      	ldr	r3, [pc, #140]	; (80097e0 <xTaskResumeAll+0x128>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	429a      	cmp	r2, r3
 800975a:	d302      	bcc.n	8009762 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800975c:	4b21      	ldr	r3, [pc, #132]	; (80097e4 <xTaskResumeAll+0x12c>)
 800975e:	2201      	movs	r2, #1
 8009760:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009762:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <xTaskResumeAll+0x11c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1cb      	bne.n	8009702 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009770:	f000 fb4a 	bl	8009e08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009774:	4b1c      	ldr	r3, [pc, #112]	; (80097e8 <xTaskResumeAll+0x130>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d010      	beq.n	80097a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009780:	f000 f844 	bl	800980c <xTaskIncrementTick>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800978a:	4b16      	ldr	r3, [pc, #88]	; (80097e4 <xTaskResumeAll+0x12c>)
 800978c:	2201      	movs	r2, #1
 800978e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3b01      	subs	r3, #1
 8009794:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1f1      	bne.n	8009780 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800979c:	4b12      	ldr	r3, [pc, #72]	; (80097e8 <xTaskResumeAll+0x130>)
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097a2:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <xTaskResumeAll+0x12c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d009      	beq.n	80097be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097aa:	2301      	movs	r3, #1
 80097ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097ae:	4b0f      	ldr	r3, [pc, #60]	; (80097ec <xTaskResumeAll+0x134>)
 80097b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097be:	f001 f959 	bl	800aa74 <vPortExitCritical>

	return xAlreadyYielded;
 80097c2:	68bb      	ldr	r3, [r7, #8]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000db4 	.word	0x20000db4
 80097d0:	20000d8c 	.word	0x20000d8c
 80097d4:	20000d4c 	.word	0x20000d4c
 80097d8:	20000d94 	.word	0x20000d94
 80097dc:	200008bc 	.word	0x200008bc
 80097e0:	200008b8 	.word	0x200008b8
 80097e4:	20000da0 	.word	0x20000da0
 80097e8:	20000d9c 	.word	0x20000d9c
 80097ec:	e000ed04 	.word	0xe000ed04

080097f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097f6:	4b04      	ldr	r3, [pc, #16]	; (8009808 <xTaskGetTickCount+0x18>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097fc:	687b      	ldr	r3, [r7, #4]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	bc80      	pop	{r7}
 8009806:	4770      	bx	lr
 8009808:	20000d90 	.word	0x20000d90

0800980c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009812:	2300      	movs	r3, #0
 8009814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009816:	4b51      	ldr	r3, [pc, #324]	; (800995c <xTaskIncrementTick+0x150>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f040 808d 	bne.w	800993a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009820:	4b4f      	ldr	r3, [pc, #316]	; (8009960 <xTaskIncrementTick+0x154>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3301      	adds	r3, #1
 8009826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009828:	4a4d      	ldr	r2, [pc, #308]	; (8009960 <xTaskIncrementTick+0x154>)
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11f      	bne.n	8009874 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009834:	4b4b      	ldr	r3, [pc, #300]	; (8009964 <xTaskIncrementTick+0x158>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d009      	beq.n	8009852 <xTaskIncrementTick+0x46>
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	603b      	str	r3, [r7, #0]
 8009850:	e7fe      	b.n	8009850 <xTaskIncrementTick+0x44>
 8009852:	4b44      	ldr	r3, [pc, #272]	; (8009964 <xTaskIncrementTick+0x158>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	4b43      	ldr	r3, [pc, #268]	; (8009968 <xTaskIncrementTick+0x15c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a41      	ldr	r2, [pc, #260]	; (8009964 <xTaskIncrementTick+0x158>)
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	4a41      	ldr	r2, [pc, #260]	; (8009968 <xTaskIncrementTick+0x15c>)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	4b41      	ldr	r3, [pc, #260]	; (800996c <xTaskIncrementTick+0x160>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3301      	adds	r3, #1
 800986c:	4a3f      	ldr	r2, [pc, #252]	; (800996c <xTaskIncrementTick+0x160>)
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	f000 faca 	bl	8009e08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009874:	4b3e      	ldr	r3, [pc, #248]	; (8009970 <xTaskIncrementTick+0x164>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	429a      	cmp	r2, r3
 800987c:	d34e      	bcc.n	800991c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800987e:	4b39      	ldr	r3, [pc, #228]	; (8009964 <xTaskIncrementTick+0x158>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <xTaskIncrementTick+0x80>
 8009888:	2301      	movs	r3, #1
 800988a:	e000      	b.n	800988e <xTaskIncrementTick+0x82>
 800988c:	2300      	movs	r3, #0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d004      	beq.n	800989c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009892:	4b37      	ldr	r3, [pc, #220]	; (8009970 <xTaskIncrementTick+0x164>)
 8009894:	f04f 32ff 	mov.w	r2, #4294967295
 8009898:	601a      	str	r2, [r3, #0]
					break;
 800989a:	e03f      	b.n	800991c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800989c:	4b31      	ldr	r3, [pc, #196]	; (8009964 <xTaskIncrementTick+0x158>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d203      	bcs.n	80098bc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098b4:	4a2e      	ldr	r2, [pc, #184]	; (8009970 <xTaskIncrementTick+0x164>)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6013      	str	r3, [r2, #0]
						break;
 80098ba:	e02f      	b.n	800991c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	3304      	adds	r3, #4
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe fd33 	bl	800832c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	3318      	adds	r3, #24
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fe fd2a 	bl	800832c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098dc:	4b25      	ldr	r3, [pc, #148]	; (8009974 <xTaskIncrementTick+0x168>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d903      	bls.n	80098ec <xTaskIncrementTick+0xe0>
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	4a22      	ldr	r2, [pc, #136]	; (8009974 <xTaskIncrementTick+0x168>)
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f0:	4613      	mov	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4a1f      	ldr	r2, [pc, #124]	; (8009978 <xTaskIncrementTick+0x16c>)
 80098fa:	441a      	add	r2, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	3304      	adds	r3, #4
 8009900:	4619      	mov	r1, r3
 8009902:	4610      	mov	r0, r2
 8009904:	f7fe fcb7 	bl	8008276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990c:	4b1b      	ldr	r3, [pc, #108]	; (800997c <xTaskIncrementTick+0x170>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	429a      	cmp	r2, r3
 8009914:	d3b3      	bcc.n	800987e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009916:	2301      	movs	r3, #1
 8009918:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800991a:	e7b0      	b.n	800987e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800991c:	4b17      	ldr	r3, [pc, #92]	; (800997c <xTaskIncrementTick+0x170>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009922:	4915      	ldr	r1, [pc, #84]	; (8009978 <xTaskIncrementTick+0x16c>)
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d907      	bls.n	8009944 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e004      	b.n	8009944 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800993a:	4b11      	ldr	r3, [pc, #68]	; (8009980 <xTaskIncrementTick+0x174>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3301      	adds	r3, #1
 8009940:	4a0f      	ldr	r2, [pc, #60]	; (8009980 <xTaskIncrementTick+0x174>)
 8009942:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009944:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <xTaskIncrementTick+0x178>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800994c:	2301      	movs	r3, #1
 800994e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009950:	697b      	ldr	r3, [r7, #20]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20000db4 	.word	0x20000db4
 8009960:	20000d90 	.word	0x20000d90
 8009964:	20000d44 	.word	0x20000d44
 8009968:	20000d48 	.word	0x20000d48
 800996c:	20000da4 	.word	0x20000da4
 8009970:	20000dac 	.word	0x20000dac
 8009974:	20000d94 	.word	0x20000d94
 8009978:	200008bc 	.word	0x200008bc
 800997c:	200008b8 	.word	0x200008b8
 8009980:	20000d9c 	.word	0x20000d9c
 8009984:	20000da0 	.word	0x20000da0

08009988 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800998e:	4b27      	ldr	r3, [pc, #156]	; (8009a2c <vTaskSwitchContext+0xa4>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009996:	4b26      	ldr	r3, [pc, #152]	; (8009a30 <vTaskSwitchContext+0xa8>)
 8009998:	2201      	movs	r2, #1
 800999a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800999c:	e040      	b.n	8009a20 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800999e:	4b24      	ldr	r3, [pc, #144]	; (8009a30 <vTaskSwitchContext+0xa8>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80099a4:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <vTaskSwitchContext+0xac>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	e00f      	b.n	80099cc <vTaskSwitchContext+0x44>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d109      	bne.n	80099c6 <vTaskSwitchContext+0x3e>
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	607b      	str	r3, [r7, #4]
 80099c4:	e7fe      	b.n	80099c4 <vTaskSwitchContext+0x3c>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	491a      	ldr	r1, [pc, #104]	; (8009a38 <vTaskSwitchContext+0xb0>)
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0e5      	beq.n	80099ac <vTaskSwitchContext+0x24>
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4a13      	ldr	r2, [pc, #76]	; (8009a38 <vTaskSwitchContext+0xb0>)
 80099ec:	4413      	add	r3, r2
 80099ee:	60bb      	str	r3, [r7, #8]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	605a      	str	r2, [r3, #4]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	3308      	adds	r3, #8
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d104      	bne.n	8009a10 <vTaskSwitchContext+0x88>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	605a      	str	r2, [r3, #4]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	4a09      	ldr	r2, [pc, #36]	; (8009a3c <vTaskSwitchContext+0xb4>)
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	4a06      	ldr	r2, [pc, #24]	; (8009a34 <vTaskSwitchContext+0xac>)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6013      	str	r3, [r2, #0]
}
 8009a20:	bf00      	nop
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bc80      	pop	{r7}
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	20000db4 	.word	0x20000db4
 8009a30:	20000da0 	.word	0x20000da0
 8009a34:	20000d94 	.word	0x20000d94
 8009a38:	200008bc 	.word	0x200008bc
 8009a3c:	200008b8 	.word	0x200008b8

08009a40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d109      	bne.n	8009a64 <vTaskPlaceOnEventList+0x24>
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	e7fe      	b.n	8009a62 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a64:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <vTaskPlaceOnEventList+0x44>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3318      	adds	r3, #24
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7fe fc25 	bl	80082bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a72:	2101      	movs	r1, #1
 8009a74:	6838      	ldr	r0, [r7, #0]
 8009a76:	f000 fb89 	bl	800a18c <prvAddCurrentTaskToDelayedList>
}
 8009a7a:	bf00      	nop
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	200008b8 	.word	0x200008b8

08009a88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d109      	bne.n	8009aae <vTaskPlaceOnEventListRestricted+0x26>
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	e7fe      	b.n	8009aac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <vTaskPlaceOnEventListRestricted+0x50>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3318      	adds	r3, #24
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f7fe fbdd 	bl	8008276 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d002      	beq.n	8009ac8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ac8:	6879      	ldr	r1, [r7, #4]
 8009aca:	68b8      	ldr	r0, [r7, #8]
 8009acc:	f000 fb5e 	bl	800a18c <prvAddCurrentTaskToDelayedList>
	}
 8009ad0:	bf00      	nop
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	200008b8 	.word	0x200008b8

08009adc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d109      	bne.n	8009b06 <xTaskRemoveFromEventList+0x2a>
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e7fe      	b.n	8009b04 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	3318      	adds	r3, #24
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fc0e 	bl	800832c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b10:	4b1d      	ldr	r3, [pc, #116]	; (8009b88 <xTaskRemoveFromEventList+0xac>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d11d      	bne.n	8009b54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fc05 	bl	800832c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b26:	4b19      	ldr	r3, [pc, #100]	; (8009b8c <xTaskRemoveFromEventList+0xb0>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d903      	bls.n	8009b36 <xTaskRemoveFromEventList+0x5a>
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	4a16      	ldr	r2, [pc, #88]	; (8009b8c <xTaskRemoveFromEventList+0xb0>)
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4413      	add	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4a13      	ldr	r2, [pc, #76]	; (8009b90 <xTaskRemoveFromEventList+0xb4>)
 8009b44:	441a      	add	r2, r3
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f7fe fb92 	bl	8008276 <vListInsertEnd>
 8009b52:	e005      	b.n	8009b60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	3318      	adds	r3, #24
 8009b58:	4619      	mov	r1, r3
 8009b5a:	480e      	ldr	r0, [pc, #56]	; (8009b94 <xTaskRemoveFromEventList+0xb8>)
 8009b5c:	f7fe fb8b 	bl	8008276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b64:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <xTaskRemoveFromEventList+0xbc>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d905      	bls.n	8009b7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b72:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <xTaskRemoveFromEventList+0xc0>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	e001      	b.n	8009b7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009b7e:	697b      	ldr	r3, [r7, #20]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20000db4 	.word	0x20000db4
 8009b8c:	20000d94 	.word	0x20000d94
 8009b90:	200008bc 	.word	0x200008bc
 8009b94:	20000d4c 	.word	0x20000d4c
 8009b98:	200008b8 	.word	0x200008b8
 8009b9c:	20000da0 	.word	0x20000da0

08009ba0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ba8:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <vTaskInternalSetTimeOutState+0x24>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <vTaskInternalSetTimeOutState+0x28>)
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	605a      	str	r2, [r3, #4]
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20000da4 	.word	0x20000da4
 8009bc8:	20000d90 	.word	0x20000d90

08009bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d109      	bne.n	8009bf0 <xTaskCheckForTimeOut+0x24>
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	613b      	str	r3, [r7, #16]
 8009bee:	e7fe      	b.n	8009bee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d109      	bne.n	8009c0a <xTaskCheckForTimeOut+0x3e>
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	e7fe      	b.n	8009c08 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009c0a:	f000 ff05 	bl	800aa18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c0e:	4b1d      	ldr	r3, [pc, #116]	; (8009c84 <xTaskCheckForTimeOut+0xb8>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	69ba      	ldr	r2, [r7, #24]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c26:	d102      	bne.n	8009c2e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61fb      	str	r3, [r7, #28]
 8009c2c:	e023      	b.n	8009c76 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b15      	ldr	r3, [pc, #84]	; (8009c88 <xTaskCheckForTimeOut+0xbc>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d007      	beq.n	8009c4a <xTaskCheckForTimeOut+0x7e>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d302      	bcc.n	8009c4a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c44:	2301      	movs	r3, #1
 8009c46:	61fb      	str	r3, [r7, #28]
 8009c48:	e015      	b.n	8009c76 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d20b      	bcs.n	8009c6c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	1ad2      	subs	r2, r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff ff9d 	bl	8009ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c66:	2300      	movs	r3, #0
 8009c68:	61fb      	str	r3, [r7, #28]
 8009c6a:	e004      	b.n	8009c76 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c72:	2301      	movs	r3, #1
 8009c74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c76:	f000 fefd 	bl	800aa74 <vPortExitCritical>

	return xReturn;
 8009c7a:	69fb      	ldr	r3, [r7, #28]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3720      	adds	r7, #32
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20000d90 	.word	0x20000d90
 8009c88:	20000da4 	.word	0x20000da4

08009c8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c90:	4b03      	ldr	r3, [pc, #12]	; (8009ca0 <vTaskMissedYield+0x14>)
 8009c92:	2201      	movs	r2, #1
 8009c94:	601a      	str	r2, [r3, #0]
}
 8009c96:	bf00      	nop
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bc80      	pop	{r7}
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20000da0 	.word	0x20000da0

08009ca4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cac:	f000 f852 	bl	8009d54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009cb0:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <prvIdleTask+0x28>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d9f9      	bls.n	8009cac <prvIdleTask+0x8>
			{
				taskYIELD();
 8009cb8:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <prvIdleTask+0x2c>)
 8009cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009cc8:	e7f0      	b.n	8009cac <prvIdleTask+0x8>
 8009cca:	bf00      	nop
 8009ccc:	200008bc 	.word	0x200008bc
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cda:	2300      	movs	r3, #0
 8009cdc:	607b      	str	r3, [r7, #4]
 8009cde:	e00c      	b.n	8009cfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4a12      	ldr	r2, [pc, #72]	; (8009d34 <prvInitialiseTaskLists+0x60>)
 8009cec:	4413      	add	r3, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe fa96 	bl	8008220 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	607b      	str	r3, [r7, #4]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b37      	cmp	r3, #55	; 0x37
 8009cfe:	d9ef      	bls.n	8009ce0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d00:	480d      	ldr	r0, [pc, #52]	; (8009d38 <prvInitialiseTaskLists+0x64>)
 8009d02:	f7fe fa8d 	bl	8008220 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d06:	480d      	ldr	r0, [pc, #52]	; (8009d3c <prvInitialiseTaskLists+0x68>)
 8009d08:	f7fe fa8a 	bl	8008220 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d0c:	480c      	ldr	r0, [pc, #48]	; (8009d40 <prvInitialiseTaskLists+0x6c>)
 8009d0e:	f7fe fa87 	bl	8008220 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d12:	480c      	ldr	r0, [pc, #48]	; (8009d44 <prvInitialiseTaskLists+0x70>)
 8009d14:	f7fe fa84 	bl	8008220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d18:	480b      	ldr	r0, [pc, #44]	; (8009d48 <prvInitialiseTaskLists+0x74>)
 8009d1a:	f7fe fa81 	bl	8008220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d1e:	4b0b      	ldr	r3, [pc, #44]	; (8009d4c <prvInitialiseTaskLists+0x78>)
 8009d20:	4a05      	ldr	r2, [pc, #20]	; (8009d38 <prvInitialiseTaskLists+0x64>)
 8009d22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d24:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <prvInitialiseTaskLists+0x7c>)
 8009d26:	4a05      	ldr	r2, [pc, #20]	; (8009d3c <prvInitialiseTaskLists+0x68>)
 8009d28:	601a      	str	r2, [r3, #0]
}
 8009d2a:	bf00      	nop
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200008bc 	.word	0x200008bc
 8009d38:	20000d1c 	.word	0x20000d1c
 8009d3c:	20000d30 	.word	0x20000d30
 8009d40:	20000d4c 	.word	0x20000d4c
 8009d44:	20000d60 	.word	0x20000d60
 8009d48:	20000d78 	.word	0x20000d78
 8009d4c:	20000d44 	.word	0x20000d44
 8009d50:	20000d48 	.word	0x20000d48

08009d54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d5a:	e019      	b.n	8009d90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d5c:	f000 fe5c 	bl	800aa18 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009d60:	4b0f      	ldr	r3, [pc, #60]	; (8009da0 <prvCheckTasksWaitingTermination+0x4c>)
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3304      	adds	r3, #4
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe fadd 	bl	800832c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d72:	4b0c      	ldr	r3, [pc, #48]	; (8009da4 <prvCheckTasksWaitingTermination+0x50>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	4a0a      	ldr	r2, [pc, #40]	; (8009da4 <prvCheckTasksWaitingTermination+0x50>)
 8009d7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <prvCheckTasksWaitingTermination+0x54>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3b01      	subs	r3, #1
 8009d82:	4a09      	ldr	r2, [pc, #36]	; (8009da8 <prvCheckTasksWaitingTermination+0x54>)
 8009d84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d86:	f000 fe75 	bl	800aa74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f80e 	bl	8009dac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d90:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <prvCheckTasksWaitingTermination+0x54>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e1      	bne.n	8009d5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d98:	bf00      	nop
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20000d60 	.word	0x20000d60
 8009da4:	20000d8c 	.word	0x20000d8c
 8009da8:	20000d74 	.word	0x20000d74

08009dac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d108      	bne.n	8009dd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 ffe0 	bl	800ad88 <vPortFree>
				vPortFree( pxTCB );
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 ffdd 	bl	800ad88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009dce:	e017      	b.n	8009e00 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d103      	bne.n	8009de2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 ffd4 	bl	800ad88 <vPortFree>
	}
 8009de0:	e00e      	b.n	8009e00 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d009      	beq.n	8009e00 <prvDeleteTCB+0x54>
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	e7fe      	b.n	8009dfe <prvDeleteTCB+0x52>
	}
 8009e00:	bf00      	nop
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e0e:	4b0e      	ldr	r3, [pc, #56]	; (8009e48 <prvResetNextTaskUnblockTime+0x40>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <prvResetNextTaskUnblockTime+0x14>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e000      	b.n	8009e1e <prvResetNextTaskUnblockTime+0x16>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d004      	beq.n	8009e2c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e22:	4b0a      	ldr	r3, [pc, #40]	; (8009e4c <prvResetNextTaskUnblockTime+0x44>)
 8009e24:	f04f 32ff 	mov.w	r2, #4294967295
 8009e28:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e2a:	e008      	b.n	8009e3e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e2c:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <prvResetNextTaskUnblockTime+0x40>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	4a04      	ldr	r2, [pc, #16]	; (8009e4c <prvResetNextTaskUnblockTime+0x44>)
 8009e3c:	6013      	str	r3, [r2, #0]
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bc80      	pop	{r7}
 8009e46:	4770      	bx	lr
 8009e48:	20000d44 	.word	0x20000d44
 8009e4c:	20000dac 	.word	0x20000dac

08009e50 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009e56:	4b04      	ldr	r3, [pc, #16]	; (8009e68 <xTaskGetCurrentTaskHandle+0x18>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009e5c:	687b      	ldr	r3, [r7, #4]
	}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bc80      	pop	{r7}
 8009e66:	4770      	bx	lr
 8009e68:	200008b8 	.word	0x200008b8

08009e6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e72:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <xTaskGetSchedulerState+0x34>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d102      	bne.n	8009e80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	607b      	str	r3, [r7, #4]
 8009e7e:	e008      	b.n	8009e92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e80:	4b08      	ldr	r3, [pc, #32]	; (8009ea4 <xTaskGetSchedulerState+0x38>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	607b      	str	r3, [r7, #4]
 8009e8c:	e001      	b.n	8009e92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e92:	687b      	ldr	r3, [r7, #4]
	}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000d98 	.word	0x20000d98
 8009ea4:	20000db4 	.word	0x20000db4

08009ea8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d056      	beq.n	8009f6c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec2:	4b2d      	ldr	r3, [pc, #180]	; (8009f78 <xTaskPriorityInherit+0xd0>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d246      	bcs.n	8009f5a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	db06      	blt.n	8009ee2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ed4:	4b28      	ldr	r3, [pc, #160]	; (8009f78 <xTaskPriorityInherit+0xd0>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	6959      	ldr	r1, [r3, #20]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	4613      	mov	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4a22      	ldr	r2, [pc, #136]	; (8009f7c <xTaskPriorityInherit+0xd4>)
 8009ef4:	4413      	add	r3, r2
 8009ef6:	4299      	cmp	r1, r3
 8009ef8:	d101      	bne.n	8009efe <xTaskPriorityInherit+0x56>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e000      	b.n	8009f00 <xTaskPriorityInherit+0x58>
 8009efe:	2300      	movs	r3, #0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d022      	beq.n	8009f4a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fa0f 	bl	800832c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f0e:	4b1a      	ldr	r3, [pc, #104]	; (8009f78 <xTaskPriorityInherit+0xd0>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1c:	4b18      	ldr	r3, [pc, #96]	; (8009f80 <xTaskPriorityInherit+0xd8>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d903      	bls.n	8009f2c <xTaskPriorityInherit+0x84>
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	4a15      	ldr	r2, [pc, #84]	; (8009f80 <xTaskPriorityInherit+0xd8>)
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4a10      	ldr	r2, [pc, #64]	; (8009f7c <xTaskPriorityInherit+0xd4>)
 8009f3a:	441a      	add	r2, r3
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f7fe f997 	bl	8008276 <vListInsertEnd>
 8009f48:	e004      	b.n	8009f54 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <xTaskPriorityInherit+0xd0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f54:	2301      	movs	r3, #1
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	e008      	b.n	8009f6c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f5e:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <xTaskPriorityInherit+0xd0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d201      	bcs.n	8009f6c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
	}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	200008b8 	.word	0x200008b8
 8009f7c:	200008bc 	.word	0x200008bc
 8009f80:	20000d94 	.word	0x20000d94

08009f84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d054      	beq.n	800a044 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f9a:	4b2d      	ldr	r3, [pc, #180]	; (800a050 <xTaskPriorityDisinherit+0xcc>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d009      	beq.n	8009fb8 <xTaskPriorityDisinherit+0x34>
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	60fb      	str	r3, [r7, #12]
 8009fb6:	e7fe      	b.n	8009fb6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d109      	bne.n	8009fd4 <xTaskPriorityDisinherit+0x50>
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	60bb      	str	r3, [r7, #8]
 8009fd2:	e7fe      	b.n	8009fd2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd8:	1e5a      	subs	r2, r3, #1
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d02c      	beq.n	800a044 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d128      	bne.n	800a044 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fe f998 	bl	800832c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a008:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a014:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <xTaskPriorityDisinherit+0xd0>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d903      	bls.n	800a024 <xTaskPriorityDisinherit+0xa0>
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a020:	4a0c      	ldr	r2, [pc, #48]	; (800a054 <xTaskPriorityDisinherit+0xd0>)
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4a09      	ldr	r2, [pc, #36]	; (800a058 <xTaskPriorityDisinherit+0xd4>)
 800a032:	441a      	add	r2, r3
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	3304      	adds	r3, #4
 800a038:	4619      	mov	r1, r3
 800a03a:	4610      	mov	r0, r2
 800a03c:	f7fe f91b 	bl	8008276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a040:	2301      	movs	r3, #1
 800a042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a044:	697b      	ldr	r3, [r7, #20]
	}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	200008b8 	.word	0x200008b8
 800a054:	20000d94 	.word	0x20000d94
 800a058:	200008bc 	.word	0x200008bc

0800a05c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a06a:	2301      	movs	r3, #1
 800a06c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d06d      	beq.n	800a150 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d109      	bne.n	800a090 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	e7fe      	b.n	800a08e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d902      	bls.n	800a0a0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	61fb      	str	r3, [r7, #28]
 800a09e:	e002      	b.n	800a0a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	69fa      	ldr	r2, [r7, #28]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d04f      	beq.n	800a150 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d14a      	bne.n	800a150 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a0ba:	4b27      	ldr	r3, [pc, #156]	; (800a158 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d109      	bne.n	800a0d8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	60bb      	str	r3, [r7, #8]
 800a0d6:	e7fe      	b.n	800a0d6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	db04      	blt.n	800a0f6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	6959      	ldr	r1, [r3, #20]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4a15      	ldr	r2, [pc, #84]	; (800a15c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a106:	4413      	add	r3, r2
 800a108:	4299      	cmp	r1, r3
 800a10a:	d101      	bne.n	800a110 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800a10c:	2301      	movs	r3, #1
 800a10e:	e000      	b.n	800a112 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800a110:	2300      	movs	r3, #0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d01c      	beq.n	800a150 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	3304      	adds	r3, #4
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe f906 	bl	800832c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a124:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d903      	bls.n	800a134 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	4a0b      	ldr	r2, [pc, #44]	; (800a160 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4a06      	ldr	r2, [pc, #24]	; (800a15c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a142:	441a      	add	r2, r3
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	3304      	adds	r3, #4
 800a148:	4619      	mov	r1, r3
 800a14a:	4610      	mov	r0, r2
 800a14c:	f7fe f893 	bl	8008276 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a150:	bf00      	nop
 800a152:	3720      	adds	r7, #32
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	200008b8 	.word	0x200008b8
 800a15c:	200008bc 	.word	0x200008bc
 800a160:	20000d94 	.word	0x20000d94

0800a164 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a164:	b480      	push	{r7}
 800a166:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a168:	4b07      	ldr	r3, [pc, #28]	; (800a188 <pvTaskIncrementMutexHeldCount+0x24>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d004      	beq.n	800a17a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <pvTaskIncrementMutexHeldCount+0x24>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a176:	3201      	adds	r2, #1
 800a178:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a17a:	4b03      	ldr	r3, [pc, #12]	; (800a188 <pvTaskIncrementMutexHeldCount+0x24>)
 800a17c:	681b      	ldr	r3, [r3, #0]
	}
 800a17e:	4618      	mov	r0, r3
 800a180:	46bd      	mov	sp, r7
 800a182:	bc80      	pop	{r7}
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	200008b8 	.word	0x200008b8

0800a18c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a196:	4b21      	ldr	r3, [pc, #132]	; (800a21c <prvAddCurrentTaskToDelayedList+0x90>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a19c:	4b20      	ldr	r3, [pc, #128]	; (800a220 <prvAddCurrentTaskToDelayedList+0x94>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe f8c2 	bl	800832c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ae:	d10a      	bne.n	800a1c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d007      	beq.n	800a1c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1b6:	4b1a      	ldr	r3, [pc, #104]	; (800a220 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4619      	mov	r1, r3
 800a1be:	4819      	ldr	r0, [pc, #100]	; (800a224 <prvAddCurrentTaskToDelayedList+0x98>)
 800a1c0:	f7fe f859 	bl	8008276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1c4:	e026      	b.n	800a214 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1ce:	4b14      	ldr	r3, [pc, #80]	; (800a220 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d209      	bcs.n	800a1f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1de:	4b12      	ldr	r3, [pc, #72]	; (800a228 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f7fe f866 	bl	80082bc <vListInsert>
}
 800a1f0:	e010      	b.n	800a214 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	f7fe f85c 	bl	80082bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a204:	4b0a      	ldr	r3, [pc, #40]	; (800a230 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d202      	bcs.n	800a214 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a20e:	4a08      	ldr	r2, [pc, #32]	; (800a230 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	6013      	str	r3, [r2, #0]
}
 800a214:	bf00      	nop
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20000d90 	.word	0x20000d90
 800a220:	200008b8 	.word	0x200008b8
 800a224:	20000d78 	.word	0x20000d78
 800a228:	20000d48 	.word	0x20000d48
 800a22c:	20000d44 	.word	0x20000d44
 800a230:	20000dac 	.word	0x20000dac

0800a234 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08a      	sub	sp, #40	; 0x28
 800a238:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a23e:	f000 fac3 	bl	800a7c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a242:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <xTimerCreateTimerTask+0x80>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d021      	beq.n	800a28e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a24e:	2300      	movs	r3, #0
 800a250:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a252:	1d3a      	adds	r2, r7, #4
 800a254:	f107 0108 	add.w	r1, r7, #8
 800a258:	f107 030c 	add.w	r3, r7, #12
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fd ffc5 	bl	80081ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	9202      	str	r2, [sp, #8]
 800a26a:	9301      	str	r3, [sp, #4]
 800a26c:	2302      	movs	r3, #2
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	2300      	movs	r3, #0
 800a272:	460a      	mov	r2, r1
 800a274:	4910      	ldr	r1, [pc, #64]	; (800a2b8 <xTimerCreateTimerTask+0x84>)
 800a276:	4811      	ldr	r0, [pc, #68]	; (800a2bc <xTimerCreateTimerTask+0x88>)
 800a278:	f7fe ffe4 	bl	8009244 <xTaskCreateStatic>
 800a27c:	4602      	mov	r2, r0
 800a27e:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <xTimerCreateTimerTask+0x8c>)
 800a280:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a282:	4b0f      	ldr	r3, [pc, #60]	; (800a2c0 <xTimerCreateTimerTask+0x8c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a28a:	2301      	movs	r3, #1
 800a28c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d109      	bne.n	800a2a8 <xTimerCreateTimerTask+0x74>
 800a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	613b      	str	r3, [r7, #16]
 800a2a6:	e7fe      	b.n	800a2a6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a2a8:	697b      	ldr	r3, [r7, #20]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20000de8 	.word	0x20000de8
 800a2b8:	0800cfe0 	.word	0x0800cfe0
 800a2bc:	0800a3dd 	.word	0x0800a3dd
 800a2c0:	20000dec 	.word	0x20000dec

0800a2c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08a      	sub	sp, #40	; 0x28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d109      	bne.n	800a2f0 <xTimerGenericCommand+0x2c>
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	623b      	str	r3, [r7, #32]
 800a2ee:	e7fe      	b.n	800a2ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a2f0:	4b19      	ldr	r3, [pc, #100]	; (800a358 <xTimerGenericCommand+0x94>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d02a      	beq.n	800a34e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b05      	cmp	r3, #5
 800a308:	dc18      	bgt.n	800a33c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a30a:	f7ff fdaf 	bl	8009e6c <xTaskGetSchedulerState>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b02      	cmp	r3, #2
 800a312:	d109      	bne.n	800a328 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a314:	4b10      	ldr	r3, [pc, #64]	; (800a358 <xTimerGenericCommand+0x94>)
 800a316:	6818      	ldr	r0, [r3, #0]
 800a318:	f107 0110 	add.w	r1, r7, #16
 800a31c:	2300      	movs	r3, #0
 800a31e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a320:	f7fe fa1e 	bl	8008760 <xQueueGenericSend>
 800a324:	6278      	str	r0, [r7, #36]	; 0x24
 800a326:	e012      	b.n	800a34e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a328:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <xTimerGenericCommand+0x94>)
 800a32a:	6818      	ldr	r0, [r3, #0]
 800a32c:	f107 0110 	add.w	r1, r7, #16
 800a330:	2300      	movs	r3, #0
 800a332:	2200      	movs	r2, #0
 800a334:	f7fe fa14 	bl	8008760 <xQueueGenericSend>
 800a338:	6278      	str	r0, [r7, #36]	; 0x24
 800a33a:	e008      	b.n	800a34e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a33c:	4b06      	ldr	r3, [pc, #24]	; (800a358 <xTimerGenericCommand+0x94>)
 800a33e:	6818      	ldr	r0, [r3, #0]
 800a340:	f107 0110 	add.w	r1, r7, #16
 800a344:	2300      	movs	r3, #0
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	f7fe fb04 	bl	8008954 <xQueueGenericSendFromISR>
 800a34c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a350:	4618      	mov	r0, r3
 800a352:	3728      	adds	r7, #40	; 0x28
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20000de8 	.word	0x20000de8

0800a35c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b088      	sub	sp, #32
 800a360:	af02      	add	r7, sp, #8
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a366:	4b1c      	ldr	r3, [pc, #112]	; (800a3d8 <prvProcessExpiredTimer+0x7c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	3304      	adds	r3, #4
 800a374:	4618      	mov	r0, r3
 800a376:	f7fd ffd9 	bl	800832c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d121      	bne.n	800a3c6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	699a      	ldr	r2, [r3, #24]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	18d1      	adds	r1, r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	6978      	ldr	r0, [r7, #20]
 800a390:	f000 f8c8 	bl	800a524 <prvInsertTimerInActiveList>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d015      	beq.n	800a3c6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a39a:	2300      	movs	r3, #0
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	6978      	ldr	r0, [r7, #20]
 800a3a6:	f7ff ff8d 	bl	800a2c4 <xTimerGenericCommand>
 800a3aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d109      	bne.n	800a3c6 <prvProcessExpiredTimer+0x6a>
 800a3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	e7fe      	b.n	800a3c4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ca:	6978      	ldr	r0, [r7, #20]
 800a3cc:	4798      	blx	r3
}
 800a3ce:	bf00      	nop
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000de0 	.word	0x20000de0

0800a3dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3e4:	f107 0308 	add.w	r3, r7, #8
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 f857 	bl	800a49c <prvGetNextExpireTime>
 800a3ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 f803 	bl	800a400 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a3fa:	f000 f8d5 	bl	800a5a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3fe:	e7f1      	b.n	800a3e4 <prvTimerTask+0x8>

0800a400 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a40a:	f7ff f947 	bl	800969c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a40e:	f107 0308 	add.w	r3, r7, #8
 800a412:	4618      	mov	r0, r3
 800a414:	f000 f866 	bl	800a4e4 <prvSampleTimeNow>
 800a418:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d130      	bne.n	800a482 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10a      	bne.n	800a43c <prvProcessTimerOrBlockTask+0x3c>
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d806      	bhi.n	800a43c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a42e:	f7ff f943 	bl	80096b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a432:	68f9      	ldr	r1, [r7, #12]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7ff ff91 	bl	800a35c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a43a:	e024      	b.n	800a486 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d008      	beq.n	800a454 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a442:	4b13      	ldr	r3, [pc, #76]	; (800a490 <prvProcessTimerOrBlockTask+0x90>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	bf0c      	ite	eq
 800a44c:	2301      	moveq	r3, #1
 800a44e:	2300      	movne	r3, #0
 800a450:	b2db      	uxtb	r3, r3
 800a452:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a454:	4b0f      	ldr	r3, [pc, #60]	; (800a494 <prvProcessTimerOrBlockTask+0x94>)
 800a456:	6818      	ldr	r0, [r3, #0]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	4619      	mov	r1, r3
 800a462:	f7fe febb 	bl	80091dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a466:	f7ff f927 	bl	80096b8 <xTaskResumeAll>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a470:	4b09      	ldr	r3, [pc, #36]	; (800a498 <prvProcessTimerOrBlockTask+0x98>)
 800a472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a476:	601a      	str	r2, [r3, #0]
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	f3bf 8f6f 	isb	sy
}
 800a480:	e001      	b.n	800a486 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a482:	f7ff f919 	bl	80096b8 <xTaskResumeAll>
}
 800a486:	bf00      	nop
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20000de4 	.word	0x20000de4
 800a494:	20000de8 	.word	0x20000de8
 800a498:	e000ed04 	.word	0xe000ed04

0800a49c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	; (800a4e0 <prvGetNextExpireTime+0x44>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bf0c      	ite	eq
 800a4ae:	2301      	moveq	r3, #1
 800a4b0:	2300      	movne	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d105      	bne.n	800a4ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4c2:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <prvGetNextExpireTime+0x44>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	e001      	b.n	800a4d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	20000de0 	.word	0x20000de0

0800a4e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a4ec:	f7ff f980 	bl	80097f0 <xTaskGetTickCount>
 800a4f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a4f2:	4b0b      	ldr	r3, [pc, #44]	; (800a520 <prvSampleTimeNow+0x3c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d205      	bcs.n	800a508 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a4fc:	f000 f904 	bl	800a708 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	601a      	str	r2, [r3, #0]
 800a506:	e002      	b.n	800a50e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a50e:	4a04      	ldr	r2, [pc, #16]	; (800a520 <prvSampleTimeNow+0x3c>)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a514:	68fb      	ldr	r3, [r7, #12]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	20000df0 	.word	0x20000df0

0800a524 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a532:	2300      	movs	r3, #0
 800a534:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	429a      	cmp	r2, r3
 800a548:	d812      	bhi.n	800a570 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	429a      	cmp	r2, r3
 800a556:	d302      	bcc.n	800a55e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a558:	2301      	movs	r3, #1
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	e01b      	b.n	800a596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a55e:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <prvInsertTimerInActiveList+0x7c>)
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	3304      	adds	r3, #4
 800a566:	4619      	mov	r1, r3
 800a568:	4610      	mov	r0, r2
 800a56a:	f7fd fea7 	bl	80082bc <vListInsert>
 800a56e:	e012      	b.n	800a596 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	429a      	cmp	r2, r3
 800a576:	d206      	bcs.n	800a586 <prvInsertTimerInActiveList+0x62>
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d302      	bcc.n	800a586 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a580:	2301      	movs	r3, #1
 800a582:	617b      	str	r3, [r7, #20]
 800a584:	e007      	b.n	800a596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a586:	4b07      	ldr	r3, [pc, #28]	; (800a5a4 <prvInsertTimerInActiveList+0x80>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	3304      	adds	r3, #4
 800a58e:	4619      	mov	r1, r3
 800a590:	4610      	mov	r0, r2
 800a592:	f7fd fe93 	bl	80082bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a596:	697b      	ldr	r3, [r7, #20]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20000de4 	.word	0x20000de4
 800a5a4:	20000de0 	.word	0x20000de0

0800a5a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08e      	sub	sp, #56	; 0x38
 800a5ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5ae:	e099      	b.n	800a6e4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	da17      	bge.n	800a5e6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5b6:	1d3b      	adds	r3, r7, #4
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d109      	bne.n	800a5d6 <prvProcessReceivedCommands+0x2e>
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	61fb      	str	r3, [r7, #28]
 800a5d4:	e7fe      	b.n	800a5d4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5dc:	6850      	ldr	r0, [r2, #4]
 800a5de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5e0:	6892      	ldr	r2, [r2, #8]
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	db7a      	blt.n	800a6e2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	695b      	ldr	r3, [r3, #20]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d004      	beq.n	800a602 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fd fe95 	bl	800832c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a602:	463b      	mov	r3, r7
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff ff6d 	bl	800a4e4 <prvSampleTimeNow>
 800a60a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b09      	cmp	r3, #9
 800a610:	d868      	bhi.n	800a6e4 <prvProcessReceivedCommands+0x13c>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <prvProcessReceivedCommands+0x70>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a641 	.word	0x0800a641
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a641 	.word	0x0800a641
 800a624:	0800a6e5 	.word	0x0800a6e5
 800a628:	0800a69b 	.word	0x0800a69b
 800a62c:	0800a6d1 	.word	0x0800a6d1
 800a630:	0800a641 	.word	0x0800a641
 800a634:	0800a641 	.word	0x0800a641
 800a638:	0800a6e5 	.word	0x0800a6e5
 800a63c:	0800a69b 	.word	0x0800a69b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	18d1      	adds	r1, r2, r3
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a64e:	f7ff ff69 	bl	800a524 <prvInsertTimerInActiveList>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d045      	beq.n	800a6e4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d13d      	bne.n	800a6e4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	441a      	add	r2, r3
 800a670:	2300      	movs	r3, #0
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	2300      	movs	r3, #0
 800a676:	2100      	movs	r1, #0
 800a678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a67a:	f7ff fe23 	bl	800a2c4 <xTimerGenericCommand>
 800a67e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d12e      	bne.n	800a6e4 <prvProcessReceivedCommands+0x13c>
 800a686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	61bb      	str	r3, [r7, #24]
 800a698:	e7fe      	b.n	800a698 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d109      	bne.n	800a6bc <prvProcessReceivedCommands+0x114>
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	617b      	str	r3, [r7, #20]
 800a6ba:	e7fe      	b.n	800a6ba <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	699a      	ldr	r2, [r3, #24]
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	18d1      	adds	r1, r2, r3
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ca:	f7ff ff2b 	bl	800a524 <prvInsertTimerInActiveList>
					break;
 800a6ce:	e009      	b.n	800a6e4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d104      	bne.n	800a6e4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800a6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6dc:	f000 fb54 	bl	800ad88 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6e0:	e000      	b.n	800a6e4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a6e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <prvProcessReceivedCommands+0x15c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	1d39      	adds	r1, r7, #4
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fe f9c5 	bl	8008a7c <xQueueReceive>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f47f af5b 	bne.w	800a5b0 <prvProcessReceivedCommands+0x8>
	}
}
 800a6fa:	bf00      	nop
 800a6fc:	3730      	adds	r7, #48	; 0x30
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	20000de8 	.word	0x20000de8

0800a708 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a70e:	e044      	b.n	800a79a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a710:	4b2b      	ldr	r3, [pc, #172]	; (800a7c0 <prvSwitchTimerLists+0xb8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a71a:	4b29      	ldr	r3, [pc, #164]	; (800a7c0 <prvSwitchTimerLists+0xb8>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3304      	adds	r3, #4
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fd fdff 	bl	800832c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d12d      	bne.n	800a79a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	4413      	add	r3, r2
 800a746:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d90e      	bls.n	800a76e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a75c:	4b18      	ldr	r3, [pc, #96]	; (800a7c0 <prvSwitchTimerLists+0xb8>)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3304      	adds	r3, #4
 800a764:	4619      	mov	r1, r3
 800a766:	4610      	mov	r0, r2
 800a768:	f7fd fda8 	bl	80082bc <vListInsert>
 800a76c:	e015      	b.n	800a79a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a76e:	2300      	movs	r3, #0
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	2300      	movs	r3, #0
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	2100      	movs	r1, #0
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f7ff fda3 	bl	800a2c4 <xTimerGenericCommand>
 800a77e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d109      	bne.n	800a79a <prvSwitchTimerLists+0x92>
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	e7fe      	b.n	800a798 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <prvSwitchTimerLists+0xb8>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1b5      	bne.n	800a710 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <prvSwitchTimerLists+0xb8>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7aa:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <prvSwitchTimerLists+0xbc>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a04      	ldr	r2, [pc, #16]	; (800a7c0 <prvSwitchTimerLists+0xb8>)
 800a7b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7b2:	4a04      	ldr	r2, [pc, #16]	; (800a7c4 <prvSwitchTimerLists+0xbc>)
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	6013      	str	r3, [r2, #0]
}
 800a7b8:	bf00      	nop
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	20000de0 	.word	0x20000de0
 800a7c4:	20000de4 	.word	0x20000de4

0800a7c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7ce:	f000 f923 	bl	800aa18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7d2:	4b15      	ldr	r3, [pc, #84]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d120      	bne.n	800a81c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7da:	4814      	ldr	r0, [pc, #80]	; (800a82c <prvCheckForValidListAndQueue+0x64>)
 800a7dc:	f7fd fd20 	bl	8008220 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7e0:	4813      	ldr	r0, [pc, #76]	; (800a830 <prvCheckForValidListAndQueue+0x68>)
 800a7e2:	f7fd fd1d 	bl	8008220 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7e6:	4b13      	ldr	r3, [pc, #76]	; (800a834 <prvCheckForValidListAndQueue+0x6c>)
 800a7e8:	4a10      	ldr	r2, [pc, #64]	; (800a82c <prvCheckForValidListAndQueue+0x64>)
 800a7ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7ec:	4b12      	ldr	r3, [pc, #72]	; (800a838 <prvCheckForValidListAndQueue+0x70>)
 800a7ee:	4a10      	ldr	r2, [pc, #64]	; (800a830 <prvCheckForValidListAndQueue+0x68>)
 800a7f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	4b11      	ldr	r3, [pc, #68]	; (800a83c <prvCheckForValidListAndQueue+0x74>)
 800a7f8:	4a11      	ldr	r2, [pc, #68]	; (800a840 <prvCheckForValidListAndQueue+0x78>)
 800a7fa:	2110      	movs	r1, #16
 800a7fc:	200a      	movs	r0, #10
 800a7fe:	f7fd fe27 	bl	8008450 <xQueueGenericCreateStatic>
 800a802:	4602      	mov	r2, r0
 800a804:	4b08      	ldr	r3, [pc, #32]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a806:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a808:	4b07      	ldr	r3, [pc, #28]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d005      	beq.n	800a81c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a810:	4b05      	ldr	r3, [pc, #20]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	490b      	ldr	r1, [pc, #44]	; (800a844 <prvCheckForValidListAndQueue+0x7c>)
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fcb8 	bl	800918c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a81c:	f000 f92a 	bl	800aa74 <vPortExitCritical>
}
 800a820:	bf00      	nop
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20000de8 	.word	0x20000de8
 800a82c:	20000db8 	.word	0x20000db8
 800a830:	20000dcc 	.word	0x20000dcc
 800a834:	20000de0 	.word	0x20000de0
 800a838:	20000de4 	.word	0x20000de4
 800a83c:	20000e94 	.word	0x20000e94
 800a840:	20000df4 	.word	0x20000df4
 800a844:	0800cfe8 	.word	0x0800cfe8

0800a848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3b04      	subs	r3, #4
 800a858:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3b04      	subs	r3, #4
 800a866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	f023 0201 	bic.w	r2, r3, #1
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b04      	subs	r3, #4
 800a876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a878:	4a08      	ldr	r2, [pc, #32]	; (800a89c <pxPortInitialiseStack+0x54>)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3b14      	subs	r3, #20
 800a882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3b20      	subs	r3, #32
 800a88e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a890:	68fb      	ldr	r3, [r7, #12]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	bc80      	pop	{r7}
 800a89a:	4770      	bx	lr
 800a89c:	0800a8a1 	.word	0x0800a8a1

0800a8a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8aa:	4b10      	ldr	r3, [pc, #64]	; (800a8ec <prvTaskExitError+0x4c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b2:	d009      	beq.n	800a8c8 <prvTaskExitError+0x28>
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	e7fe      	b.n	800a8c6 <prvTaskExitError+0x26>
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8da:	bf00      	nop
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d0fc      	beq.n	800a8dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8e2:	bf00      	nop
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr
 800a8ec:	2000006c 	.word	0x2000006c

0800a8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8f0:	4b07      	ldr	r3, [pc, #28]	; (800a910 <pxCurrentTCBConst2>)
 800a8f2:	6819      	ldr	r1, [r3, #0]
 800a8f4:	6808      	ldr	r0, [r1, #0]
 800a8f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8fa:	f380 8809 	msr	PSP, r0
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f04f 0000 	mov.w	r0, #0
 800a906:	f380 8811 	msr	BASEPRI, r0
 800a90a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a90e:	4770      	bx	lr

0800a910 <pxCurrentTCBConst2>:
 800a910:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop

0800a918 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a918:	4806      	ldr	r0, [pc, #24]	; (800a934 <prvPortStartFirstTask+0x1c>)
 800a91a:	6800      	ldr	r0, [r0, #0]
 800a91c:	6800      	ldr	r0, [r0, #0]
 800a91e:	f380 8808 	msr	MSP, r0
 800a922:	b662      	cpsie	i
 800a924:	b661      	cpsie	f
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	f3bf 8f6f 	isb	sy
 800a92e:	df00      	svc	0
 800a930:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a932:	bf00      	nop
 800a934:	e000ed08 	.word	0xe000ed08

0800a938 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a93e:	4b31      	ldr	r3, [pc, #196]	; (800aa04 <xPortStartScheduler+0xcc>)
 800a940:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	b2db      	uxtb	r3, r3
 800a948:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	22ff      	movs	r2, #255	; 0xff
 800a94e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	b2db      	uxtb	r3, r3
 800a956:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a960:	b2da      	uxtb	r2, r3
 800a962:	4b29      	ldr	r3, [pc, #164]	; (800aa08 <xPortStartScheduler+0xd0>)
 800a964:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a966:	4b29      	ldr	r3, [pc, #164]	; (800aa0c <xPortStartScheduler+0xd4>)
 800a968:	2207      	movs	r2, #7
 800a96a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a96c:	e009      	b.n	800a982 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a96e:	4b27      	ldr	r3, [pc, #156]	; (800aa0c <xPortStartScheduler+0xd4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3b01      	subs	r3, #1
 800a974:	4a25      	ldr	r2, [pc, #148]	; (800aa0c <xPortStartScheduler+0xd4>)
 800a976:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a978:	78fb      	ldrb	r3, [r7, #3]
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98a:	2b80      	cmp	r3, #128	; 0x80
 800a98c:	d0ef      	beq.n	800a96e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a98e:	4b1f      	ldr	r3, [pc, #124]	; (800aa0c <xPortStartScheduler+0xd4>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f1c3 0307 	rsb	r3, r3, #7
 800a996:	2b04      	cmp	r3, #4
 800a998:	d009      	beq.n	800a9ae <xPortStartScheduler+0x76>
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	60bb      	str	r3, [r7, #8]
 800a9ac:	e7fe      	b.n	800a9ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9ae:	4b17      	ldr	r3, [pc, #92]	; (800aa0c <xPortStartScheduler+0xd4>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	021b      	lsls	r3, r3, #8
 800a9b4:	4a15      	ldr	r2, [pc, #84]	; (800aa0c <xPortStartScheduler+0xd4>)
 800a9b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9b8:	4b14      	ldr	r3, [pc, #80]	; (800aa0c <xPortStartScheduler+0xd4>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9c0:	4a12      	ldr	r2, [pc, #72]	; (800aa0c <xPortStartScheduler+0xd4>)
 800a9c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9cc:	4b10      	ldr	r3, [pc, #64]	; (800aa10 <xPortStartScheduler+0xd8>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a0f      	ldr	r2, [pc, #60]	; (800aa10 <xPortStartScheduler+0xd8>)
 800a9d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9d8:	4b0d      	ldr	r3, [pc, #52]	; (800aa10 <xPortStartScheduler+0xd8>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a0c      	ldr	r2, [pc, #48]	; (800aa10 <xPortStartScheduler+0xd8>)
 800a9de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9e4:	f000 f8b0 	bl	800ab48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <xPortStartScheduler+0xdc>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9ee:	f7ff ff93 	bl	800a918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9f2:	f7fe ffc9 	bl	8009988 <vTaskSwitchContext>
	prvTaskExitError();
 800a9f6:	f7ff ff53 	bl	800a8a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	e000e400 	.word	0xe000e400
 800aa08:	20000ee4 	.word	0x20000ee4
 800aa0c:	20000ee8 	.word	0x20000ee8
 800aa10:	e000ed20 	.word	0xe000ed20
 800aa14:	2000006c 	.word	0x2000006c

0800aa18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa30:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <vPortEnterCritical+0x54>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3301      	adds	r3, #1
 800aa36:	4a0d      	ldr	r2, [pc, #52]	; (800aa6c <vPortEnterCritical+0x54>)
 800aa38:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa3a:	4b0c      	ldr	r3, [pc, #48]	; (800aa6c <vPortEnterCritical+0x54>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d10e      	bne.n	800aa60 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa42:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <vPortEnterCritical+0x58>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d009      	beq.n	800aa60 <vPortEnterCritical+0x48>
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	603b      	str	r3, [r7, #0]
 800aa5e:	e7fe      	b.n	800aa5e <vPortEnterCritical+0x46>
	}
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bc80      	pop	{r7}
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	2000006c 	.word	0x2000006c
 800aa70:	e000ed04 	.word	0xe000ed04

0800aa74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa7a:	4b10      	ldr	r3, [pc, #64]	; (800aabc <vPortExitCritical+0x48>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d109      	bne.n	800aa96 <vPortExitCritical+0x22>
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	607b      	str	r3, [r7, #4]
 800aa94:	e7fe      	b.n	800aa94 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800aa96:	4b09      	ldr	r3, [pc, #36]	; (800aabc <vPortExitCritical+0x48>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	4a07      	ldr	r2, [pc, #28]	; (800aabc <vPortExitCritical+0x48>)
 800aa9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aaa0:	4b06      	ldr	r3, [pc, #24]	; (800aabc <vPortExitCritical+0x48>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d104      	bne.n	800aab2 <vPortExitCritical+0x3e>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aab2:	bf00      	nop
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bc80      	pop	{r7}
 800aaba:	4770      	bx	lr
 800aabc:	2000006c 	.word	0x2000006c

0800aac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aac0:	f3ef 8009 	mrs	r0, PSP
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	4b0d      	ldr	r3, [pc, #52]	; (800ab00 <pxCurrentTCBConst>)
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aad0:	6010      	str	r0, [r2, #0]
 800aad2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800aad6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aada:	f380 8811 	msr	BASEPRI, r0
 800aade:	f7fe ff53 	bl	8009988 <vTaskSwitchContext>
 800aae2:	f04f 0000 	mov.w	r0, #0
 800aae6:	f380 8811 	msr	BASEPRI, r0
 800aaea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aaee:	6819      	ldr	r1, [r3, #0]
 800aaf0:	6808      	ldr	r0, [r1, #0]
 800aaf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aaf6:	f380 8809 	msr	PSP, r0
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	4770      	bx	lr

0800ab00 <pxCurrentTCBConst>:
 800ab00:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab04:	bf00      	nop
 800ab06:	bf00      	nop

0800ab08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab20:	f7fe fe74 	bl	800980c <xTaskIncrementTick>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab2a:	4b06      	ldr	r3, [pc, #24]	; (800ab44 <SysTick_Handler+0x3c>)
 800ab2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	2300      	movs	r3, #0
 800ab34:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab3c:	bf00      	nop
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	e000ed04 	.word	0xe000ed04

0800ab48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <vPortSetupTimerInterrupt+0x30>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab52:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <vPortSetupTimerInterrupt+0x34>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab58:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <vPortSetupTimerInterrupt+0x38>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a09      	ldr	r2, [pc, #36]	; (800ab84 <vPortSetupTimerInterrupt+0x3c>)
 800ab5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab62:	099b      	lsrs	r3, r3, #6
 800ab64:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <vPortSetupTimerInterrupt+0x40>)
 800ab66:	3b01      	subs	r3, #1
 800ab68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab6a:	4b03      	ldr	r3, [pc, #12]	; (800ab78 <vPortSetupTimerInterrupt+0x30>)
 800ab6c:	2207      	movs	r2, #7
 800ab6e:	601a      	str	r2, [r3, #0]
}
 800ab70:	bf00      	nop
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bc80      	pop	{r7}
 800ab76:	4770      	bx	lr
 800ab78:	e000e010 	.word	0xe000e010
 800ab7c:	e000e018 	.word	0xe000e018
 800ab80:	20000070 	.word	0x20000070
 800ab84:	10624dd3 	.word	0x10624dd3
 800ab88:	e000e014 	.word	0xe000e014

0800ab8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab92:	f3ef 8305 	mrs	r3, IPSR
 800ab96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b0f      	cmp	r3, #15
 800ab9c:	d913      	bls.n	800abc6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab9e:	4a15      	ldr	r2, [pc, #84]	; (800abf4 <vPortValidateInterruptPriority+0x68>)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aba8:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <vPortValidateInterruptPriority+0x6c>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	7afa      	ldrb	r2, [r7, #11]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d209      	bcs.n	800abc6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	607b      	str	r3, [r7, #4]
 800abc4:	e7fe      	b.n	800abc4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abc6:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <vPortValidateInterruptPriority+0x70>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abce:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <vPortValidateInterruptPriority+0x74>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d909      	bls.n	800abea <vPortValidateInterruptPriority+0x5e>
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	e7fe      	b.n	800abe8 <vPortValidateInterruptPriority+0x5c>
	}
 800abea:	bf00      	nop
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	bc80      	pop	{r7}
 800abf2:	4770      	bx	lr
 800abf4:	e000e3f0 	.word	0xe000e3f0
 800abf8:	20000ee4 	.word	0x20000ee4
 800abfc:	e000ed0c 	.word	0xe000ed0c
 800ac00:	20000ee8 	.word	0x20000ee8

0800ac04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b08a      	sub	sp, #40	; 0x28
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac10:	f7fe fd44 	bl	800969c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac14:	4b57      	ldr	r3, [pc, #348]	; (800ad74 <pvPortMalloc+0x170>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac1c:	f000 f90c 	bl	800ae38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac20:	4b55      	ldr	r3, [pc, #340]	; (800ad78 <pvPortMalloc+0x174>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4013      	ands	r3, r2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f040 808c 	bne.w	800ad46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d01c      	beq.n	800ac6e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ac34:	2208      	movs	r2, #8
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4413      	add	r3, r2
 800ac3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d013      	beq.n	800ac6e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f023 0307 	bic.w	r3, r3, #7
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <pvPortMalloc+0x6a>
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	e7fe      	b.n	800ac6c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d068      	beq.n	800ad46 <pvPortMalloc+0x142>
 800ac74:	4b41      	ldr	r3, [pc, #260]	; (800ad7c <pvPortMalloc+0x178>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d863      	bhi.n	800ad46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac7e:	4b40      	ldr	r3, [pc, #256]	; (800ad80 <pvPortMalloc+0x17c>)
 800ac80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac82:	4b3f      	ldr	r3, [pc, #252]	; (800ad80 <pvPortMalloc+0x17c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac88:	e004      	b.n	800ac94 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d903      	bls.n	800aca6 <pvPortMalloc+0xa2>
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1f1      	bne.n	800ac8a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aca6:	4b33      	ldr	r3, [pc, #204]	; (800ad74 <pvPortMalloc+0x170>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acac:	429a      	cmp	r2, r3
 800acae:	d04a      	beq.n	800ad46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acb0:	6a3b      	ldr	r3, [r7, #32]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2208      	movs	r2, #8
 800acb6:	4413      	add	r3, r2
 800acb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	1ad2      	subs	r2, r2, r3
 800acca:	2308      	movs	r3, #8
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	429a      	cmp	r2, r3
 800acd0:	d91e      	bls.n	800ad10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4413      	add	r3, r2
 800acd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	f003 0307 	and.w	r3, r3, #7
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d009      	beq.n	800acf8 <pvPortMalloc+0xf4>
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	613b      	str	r3, [r7, #16]
 800acf6:	e7fe      	b.n	800acf6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad0a:	69b8      	ldr	r0, [r7, #24]
 800ad0c:	f000 f8f6 	bl	800aefc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad10:	4b1a      	ldr	r3, [pc, #104]	; (800ad7c <pvPortMalloc+0x178>)
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	4a18      	ldr	r2, [pc, #96]	; (800ad7c <pvPortMalloc+0x178>)
 800ad1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad1e:	4b17      	ldr	r3, [pc, #92]	; (800ad7c <pvPortMalloc+0x178>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	4b18      	ldr	r3, [pc, #96]	; (800ad84 <pvPortMalloc+0x180>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d203      	bcs.n	800ad32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad2a:	4b14      	ldr	r3, [pc, #80]	; (800ad7c <pvPortMalloc+0x178>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a15      	ldr	r2, [pc, #84]	; (800ad84 <pvPortMalloc+0x180>)
 800ad30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	4b10      	ldr	r3, [pc, #64]	; (800ad78 <pvPortMalloc+0x174>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad46:	f7fe fcb7 	bl	80096b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	f003 0307 	and.w	r3, r3, #7
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d009      	beq.n	800ad68 <pvPortMalloc+0x164>
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	e7fe      	b.n	800ad66 <pvPortMalloc+0x162>
	return pvReturn;
 800ad68:	69fb      	ldr	r3, [r7, #28]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3728      	adds	r7, #40	; 0x28
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20001af4 	.word	0x20001af4
 800ad78:	20001b00 	.word	0x20001b00
 800ad7c:	20001af8 	.word	0x20001af8
 800ad80:	20001aec 	.word	0x20001aec
 800ad84:	20001afc 	.word	0x20001afc

0800ad88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d046      	beq.n	800ae28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad9a:	2308      	movs	r3, #8
 800ad9c:	425b      	negs	r3, r3
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	4413      	add	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	4b20      	ldr	r3, [pc, #128]	; (800ae30 <vPortFree+0xa8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4013      	ands	r3, r2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d109      	bne.n	800adca <vPortFree+0x42>
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	e7fe      	b.n	800adc8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d009      	beq.n	800ade6 <vPortFree+0x5e>
 800add2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	60bb      	str	r3, [r7, #8]
 800ade4:	e7fe      	b.n	800ade4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	4b11      	ldr	r3, [pc, #68]	; (800ae30 <vPortFree+0xa8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4013      	ands	r3, r2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d019      	beq.n	800ae28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d115      	bne.n	800ae28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	4b0b      	ldr	r3, [pc, #44]	; (800ae30 <vPortFree+0xa8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	43db      	mvns	r3, r3
 800ae06:	401a      	ands	r2, r3
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae0c:	f7fe fc46 	bl	800969c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <vPortFree+0xac>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4413      	add	r3, r2
 800ae1a:	4a06      	ldr	r2, [pc, #24]	; (800ae34 <vPortFree+0xac>)
 800ae1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae1e:	6938      	ldr	r0, [r7, #16]
 800ae20:	f000 f86c 	bl	800aefc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae24:	f7fe fc48 	bl	80096b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae28:	bf00      	nop
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	20001b00 	.word	0x20001b00
 800ae34:	20001af8 	.word	0x20001af8

0800ae38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ae42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae44:	4b27      	ldr	r3, [pc, #156]	; (800aee4 <prvHeapInit+0xac>)
 800ae46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f003 0307 	and.w	r3, r3, #7
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00c      	beq.n	800ae6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3307      	adds	r3, #7
 800ae56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f023 0307 	bic.w	r3, r3, #7
 800ae5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	4a1f      	ldr	r2, [pc, #124]	; (800aee4 <prvHeapInit+0xac>)
 800ae68:	4413      	add	r3, r2
 800ae6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae70:	4a1d      	ldr	r2, [pc, #116]	; (800aee8 <prvHeapInit+0xb0>)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae76:	4b1c      	ldr	r3, [pc, #112]	; (800aee8 <prvHeapInit+0xb0>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	4413      	add	r3, r2
 800ae82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae84:	2208      	movs	r2, #8
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	1a9b      	subs	r3, r3, r2
 800ae8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f023 0307 	bic.w	r3, r3, #7
 800ae92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4a15      	ldr	r2, [pc, #84]	; (800aeec <prvHeapInit+0xb4>)
 800ae98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae9a:	4b14      	ldr	r3, [pc, #80]	; (800aeec <prvHeapInit+0xb4>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aea2:	4b12      	ldr	r3, [pc, #72]	; (800aeec <prvHeapInit+0xb4>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2200      	movs	r2, #0
 800aea8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	1ad2      	subs	r2, r2, r3
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aeb8:	4b0c      	ldr	r3, [pc, #48]	; (800aeec <prvHeapInit+0xb4>)
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	4a0a      	ldr	r2, [pc, #40]	; (800aef0 <prvHeapInit+0xb8>)
 800aec6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	4a09      	ldr	r2, [pc, #36]	; (800aef4 <prvHeapInit+0xbc>)
 800aece:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aed0:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <prvHeapInit+0xc0>)
 800aed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aed6:	601a      	str	r2, [r3, #0]
}
 800aed8:	bf00      	nop
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	bc80      	pop	{r7}
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	20000eec 	.word	0x20000eec
 800aee8:	20001aec 	.word	0x20001aec
 800aeec:	20001af4 	.word	0x20001af4
 800aef0:	20001afc 	.word	0x20001afc
 800aef4:	20001af8 	.word	0x20001af8
 800aef8:	20001b00 	.word	0x20001b00

0800aefc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af04:	4b27      	ldr	r3, [pc, #156]	; (800afa4 <prvInsertBlockIntoFreeList+0xa8>)
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	e002      	b.n	800af10 <prvInsertBlockIntoFreeList+0x14>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	429a      	cmp	r2, r3
 800af18:	d8f7      	bhi.n	800af0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	4413      	add	r3, r2
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d108      	bne.n	800af3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	441a      	add	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	441a      	add	r2, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d118      	bne.n	800af84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	4b14      	ldr	r3, [pc, #80]	; (800afa8 <prvInsertBlockIntoFreeList+0xac>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d00d      	beq.n	800af7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	441a      	add	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	e008      	b.n	800af8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af7a:	4b0b      	ldr	r3, [pc, #44]	; (800afa8 <prvInsertBlockIntoFreeList+0xac>)
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	601a      	str	r2, [r3, #0]
 800af82:	e003      	b.n	800af8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	429a      	cmp	r2, r3
 800af92:	d002      	beq.n	800af9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af9a:	bf00      	nop
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr
 800afa4:	20001aec 	.word	0x20001aec
 800afa8:	20001af4 	.word	0x20001af4

0800afac <Board_Init>:
 * @description: 板载初始化
 * @param {void} 
 * @return {void} 
 */
void Board_Init(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
    Board.GPIO_Init();
 800afb0:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <Board_Init+0x1c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4798      	blx	r3
    Board.PWM_Init();
 800afb6:	4b04      	ldr	r3, [pc, #16]	; (800afc8 <Board_Init+0x1c>)
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	4798      	blx	r3
    Board.USART_Init();
 800afbc:	4b02      	ldr	r3, [pc, #8]	; (800afc8 <Board_Init+0x1c>)
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	4798      	blx	r3
}
 800afc2:	bf00      	nop
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	20001f60 	.word	0x20001f60

0800afcc <Led_Init>:
 * @description: LED灯初始化
 * @param {void} 
 * @return {void} 
 */
void Led_Init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
    Led.Set_Power(OFF);
 800afd0:	4b02      	ldr	r3, [pc, #8]	; (800afdc <Led_Init+0x10>)
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	2001      	movs	r0, #1
 800afd6:	4798      	blx	r3
}
 800afd8:	bf00      	nop
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20001f6c 	.word	0x20001f6c

0800afe0 <Wheel_Init>:
 * @description: 轮子初始化
 * @param {void} 
 * @return {void} 
 */
void Wheel_Init(void)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	af00      	add	r7, sp, #0
    Left_Wheel.Set_Dire(FRONT);
 800afe4:	4b08      	ldr	r3, [pc, #32]	; (800b008 <Wheel_Init+0x28>)
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	2000      	movs	r0, #0
 800afea:	4798      	blx	r3
    Left_Wheel.Set_Speed((uint32_t)0);
 800afec:	4b06      	ldr	r3, [pc, #24]	; (800b008 <Wheel_Init+0x28>)
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	2000      	movs	r0, #0
 800aff2:	4798      	blx	r3
    Right_Wheel.Set_Dire(FRONT);
 800aff4:	4b05      	ldr	r3, [pc, #20]	; (800b00c <Wheel_Init+0x2c>)
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	2000      	movs	r0, #0
 800affa:	4798      	blx	r3
    Right_Wheel.Set_Speed((uint32_t)0);
 800affc:	4b03      	ldr	r3, [pc, #12]	; (800b00c <Wheel_Init+0x2c>)
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	2000      	movs	r0, #0
 800b002:	4798      	blx	r3
}
 800b004:	bf00      	nop
 800b006:	bd80      	pop	{r7, pc}
 800b008:	20001f50 	.word	0x20001f50
 800b00c:	20001f40 	.word	0x20001f40

0800b010 <SerialPort_Init>:

void SerialPort_Init(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0
    PC_SerialPort.Receive_Data(PC_SerialPort.rx_data,PC_SerialPort.rx_len);
 800b014:	4b04      	ldr	r3, [pc, #16]	; (800b028 <SerialPort_Init+0x18>)
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	4a03      	ldr	r2, [pc, #12]	; (800b028 <SerialPort_Init+0x18>)
 800b01a:	6850      	ldr	r0, [r2, #4]
 800b01c:	4a02      	ldr	r2, [pc, #8]	; (800b028 <SerialPort_Init+0x18>)
 800b01e:	68d2      	ldr	r2, [r2, #12]
 800b020:	4611      	mov	r1, r2
 800b022:	4798      	blx	r3
}
 800b024:	bf00      	nop
 800b026:	bd80      	pop	{r7, pc}
 800b028:	20001f28 	.word	0x20001f28

0800b02c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800b032:	1d3b      	adds	r3, r7, #4
 800b034:	2200      	movs	r2, #0
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	605a      	str	r2, [r3, #4]
 800b03a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800b03c:	4b18      	ldr	r3, [pc, #96]	; (800b0a0 <MX_ADC1_Init+0x74>)
 800b03e:	4a19      	ldr	r2, [pc, #100]	; (800b0a4 <MX_ADC1_Init+0x78>)
 800b040:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b042:	4b17      	ldr	r3, [pc, #92]	; (800b0a0 <MX_ADC1_Init+0x74>)
 800b044:	2200      	movs	r2, #0
 800b046:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b048:	4b15      	ldr	r3, [pc, #84]	; (800b0a0 <MX_ADC1_Init+0x74>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b04e:	4b14      	ldr	r3, [pc, #80]	; (800b0a0 <MX_ADC1_Init+0x74>)
 800b050:	2200      	movs	r2, #0
 800b052:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b054:	4b12      	ldr	r3, [pc, #72]	; (800b0a0 <MX_ADC1_Init+0x74>)
 800b056:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800b05a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b05c:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <MX_ADC1_Init+0x74>)
 800b05e:	2200      	movs	r2, #0
 800b060:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800b062:	4b0f      	ldr	r3, [pc, #60]	; (800b0a0 <MX_ADC1_Init+0x74>)
 800b064:	2201      	movs	r2, #1
 800b066:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b068:	480d      	ldr	r0, [pc, #52]	; (800b0a0 <MX_ADC1_Init+0x74>)
 800b06a:	f7f5 f8c5 	bl	80001f8 <HAL_ADC_Init>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800b074:	f000 fd6e 	bl	800bb54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800b078:	2305      	movs	r3, #5
 800b07a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b07c:	2301      	movs	r3, #1
 800b07e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b084:	1d3b      	adds	r3, r7, #4
 800b086:	4619      	mov	r1, r3
 800b088:	4805      	ldr	r0, [pc, #20]	; (800b0a0 <MX_ADC1_Init+0x74>)
 800b08a:	f7f5 f98d 	bl	80003a8 <HAL_ADC_ConfigChannel>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800b094:	f000 fd5e 	bl	800bb54 <Error_Handler>
  }

}
 800b098:	bf00      	nop
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	20001fe4 	.word	0x20001fe4
 800b0a4:	40012400 	.word	0x40012400

0800b0a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800b0ae:	1d3b      	adds	r3, r7, #4
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	605a      	str	r2, [r3, #4]
 800b0b6:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc2.Instance = ADC2;
 800b0b8:	4b18      	ldr	r3, [pc, #96]	; (800b11c <MX_ADC2_Init+0x74>)
 800b0ba:	4a19      	ldr	r2, [pc, #100]	; (800b120 <MX_ADC2_Init+0x78>)
 800b0bc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b0be:	4b17      	ldr	r3, [pc, #92]	; (800b11c <MX_ADC2_Init+0x74>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800b0c4:	4b15      	ldr	r3, [pc, #84]	; (800b11c <MX_ADC2_Init+0x74>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800b0ca:	4b14      	ldr	r3, [pc, #80]	; (800b11c <MX_ADC2_Init+0x74>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b0d0:	4b12      	ldr	r3, [pc, #72]	; (800b11c <MX_ADC2_Init+0x74>)
 800b0d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800b0d6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b0d8:	4b10      	ldr	r3, [pc, #64]	; (800b11c <MX_ADC2_Init+0x74>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800b0de:	4b0f      	ldr	r3, [pc, #60]	; (800b11c <MX_ADC2_Init+0x74>)
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800b0e4:	480d      	ldr	r0, [pc, #52]	; (800b11c <MX_ADC2_Init+0x74>)
 800b0e6:	f7f5 f887 	bl	80001f8 <HAL_ADC_Init>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800b0f0:	f000 fd30 	bl	800bb54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800b0f4:	2305      	movs	r3, #5
 800b0f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800b100:	1d3b      	adds	r3, r7, #4
 800b102:	4619      	mov	r1, r3
 800b104:	4805      	ldr	r0, [pc, #20]	; (800b11c <MX_ADC2_Init+0x74>)
 800b106:	f7f5 f94f 	bl	80003a8 <HAL_ADC_ConfigChannel>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800b110:	f000 fd20 	bl	800bb54 <Error_Handler>
  }

}
 800b114:	bf00      	nop
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20001fb4 	.word	0x20001fb4
 800b120:	40012800 	.word	0x40012800

0800b124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08a      	sub	sp, #40	; 0x28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b12c:	f107 0318 	add.w	r3, r7, #24
 800b130:	2200      	movs	r2, #0
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	605a      	str	r2, [r3, #4]
 800b136:	609a      	str	r2, [r3, #8]
 800b138:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a28      	ldr	r2, [pc, #160]	; (800b1e0 <HAL_ADC_MspInit+0xbc>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d122      	bne.n	800b18a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b144:	4b27      	ldr	r3, [pc, #156]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	4a26      	ldr	r2, [pc, #152]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b14a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b14e:	6193      	str	r3, [r2, #24]
 800b150:	4b24      	ldr	r3, [pc, #144]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b158:	617b      	str	r3, [r7, #20]
 800b15a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b15c:	4b21      	ldr	r3, [pc, #132]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	4a20      	ldr	r2, [pc, #128]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b162:	f043 0304 	orr.w	r3, r3, #4
 800b166:	6193      	str	r3, [r2, #24]
 800b168:	4b1e      	ldr	r3, [pc, #120]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	f003 0304 	and.w	r3, r3, #4
 800b170:	613b      	str	r3, [r7, #16]
 800b172:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b174:	2330      	movs	r3, #48	; 0x30
 800b176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b178:	2303      	movs	r3, #3
 800b17a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b17c:	f107 0318 	add.w	r3, r7, #24
 800b180:	4619      	mov	r1, r3
 800b182:	4819      	ldr	r0, [pc, #100]	; (800b1e8 <HAL_ADC_MspInit+0xc4>)
 800b184:	f7f5 fda2 	bl	8000ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800b188:	e026      	b.n	800b1d8 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a17      	ldr	r2, [pc, #92]	; (800b1ec <HAL_ADC_MspInit+0xc8>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d121      	bne.n	800b1d8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800b194:	4b13      	ldr	r3, [pc, #76]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	4a12      	ldr	r2, [pc, #72]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b19a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b19e:	6193      	str	r3, [r2, #24]
 800b1a0:	4b10      	ldr	r3, [pc, #64]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1ac:	4b0d      	ldr	r3, [pc, #52]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b1ae:	699b      	ldr	r3, [r3, #24]
 800b1b0:	4a0c      	ldr	r2, [pc, #48]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b1b2:	f043 0304 	orr.w	r3, r3, #4
 800b1b6:	6193      	str	r3, [r2, #24]
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	; (800b1e4 <HAL_ADC_MspInit+0xc0>)
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	f003 0304 	and.w	r3, r3, #4
 800b1c0:	60bb      	str	r3, [r7, #8]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b1c4:	2330      	movs	r3, #48	; 0x30
 800b1c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1cc:	f107 0318 	add.w	r3, r7, #24
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4805      	ldr	r0, [pc, #20]	; (800b1e8 <HAL_ADC_MspInit+0xc4>)
 800b1d4:	f7f5 fd7a 	bl	8000ccc <HAL_GPIO_Init>
}
 800b1d8:	bf00      	nop
 800b1da:	3728      	adds	r7, #40	; 0x28
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	40012400 	.word	0x40012400
 800b1e4:	40021000 	.word	0x40021000
 800b1e8:	40010800 	.word	0x40010800
 800b1ec:	40012800 	.word	0x40012800

0800b1f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <MX_CRC_Init+0x20>)
 800b1f6:	4a07      	ldr	r2, [pc, #28]	; (800b214 <MX_CRC_Init+0x24>)
 800b1f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800b1fa:	4805      	ldr	r0, [pc, #20]	; (800b210 <MX_CRC_Init+0x20>)
 800b1fc:	f7f5 fae5 	bl	80007ca <HAL_CRC_Init>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800b206:	f000 fca5 	bl	800bb54 <Error_Handler>
  }

}
 800b20a:	bf00      	nop
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	20002014 	.word	0x20002014
 800b214:	40023000 	.word	0x40023000

0800b218 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a09      	ldr	r2, [pc, #36]	; (800b24c <HAL_CRC_MspInit+0x34>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d10b      	bne.n	800b242 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800b22a:	4b09      	ldr	r3, [pc, #36]	; (800b250 <HAL_CRC_MspInit+0x38>)
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	4a08      	ldr	r2, [pc, #32]	; (800b250 <HAL_CRC_MspInit+0x38>)
 800b230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b234:	6153      	str	r3, [r2, #20]
 800b236:	4b06      	ldr	r3, [pc, #24]	; (800b250 <HAL_CRC_MspInit+0x38>)
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800b242:	bf00      	nop
 800b244:	3714      	adds	r7, #20
 800b246:	46bd      	mov	sp, r7
 800b248:	bc80      	pop	{r7}
 800b24a:	4770      	bx	lr
 800b24c:	40023000 	.word	0x40023000
 800b250:	40021000 	.word	0x40021000

0800b254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b25a:	4b10      	ldr	r3, [pc, #64]	; (800b29c <MX_DMA_Init+0x48>)
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	4a0f      	ldr	r2, [pc, #60]	; (800b29c <MX_DMA_Init+0x48>)
 800b260:	f043 0301 	orr.w	r3, r3, #1
 800b264:	6153      	str	r3, [r2, #20]
 800b266:	4b0d      	ldr	r3, [pc, #52]	; (800b29c <MX_DMA_Init+0x48>)
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	607b      	str	r3, [r7, #4]
 800b270:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800b272:	2200      	movs	r2, #0
 800b274:	2100      	movs	r1, #0
 800b276:	200e      	movs	r0, #14
 800b278:	f7f5 fa7d 	bl	8000776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800b27c:	200e      	movs	r0, #14
 800b27e:	f7f5 fa96 	bl	80007ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800b282:	2200      	movs	r2, #0
 800b284:	2100      	movs	r1, #0
 800b286:	200f      	movs	r0, #15
 800b288:	f7f5 fa75 	bl	8000776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800b28c:	200f      	movs	r0, #15
 800b28e:	f7f5 fa8e 	bl	80007ae <HAL_NVIC_EnableIRQ>

}
 800b292:	bf00      	nop
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	40021000 	.word	0x40021000

0800b2a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of defaultMutex */
  defaultMutexHandle = osMutexNew(&defaultMutex_attributes);
 800b2a4:	483e      	ldr	r0, [pc, #248]	; (800b3a0 <MX_FREERTOS_Init+0x100>)
 800b2a6:	f7fc fcd5 	bl	8007c54 <osMutexNew>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	4b3d      	ldr	r3, [pc, #244]	; (800b3a4 <MX_FREERTOS_Init+0x104>)
 800b2ae:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  pc_tx_dataMutexHandle = osMutexNew(&pc_tx_dataMutex_attributes);
 800b2b0:	483d      	ldr	r0, [pc, #244]	; (800b3a8 <MX_FREERTOS_Init+0x108>)
 800b2b2:	f7fc fccf 	bl	8007c54 <osMutexNew>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	4b3c      	ldr	r3, [pc, #240]	; (800b3ac <MX_FREERTOS_Init+0x10c>)
 800b2ba:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of defaultQueue */
  defaultQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &defaultQueue_attributes);
 800b2bc:	4a3c      	ldr	r2, [pc, #240]	; (800b3b0 <MX_FREERTOS_Init+0x110>)
 800b2be:	2104      	movs	r1, #4
 800b2c0:	2010      	movs	r0, #16
 800b2c2:	f7fc fe0f 	bl	8007ee4 <osMessageQueueNew>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	4b3a      	ldr	r3, [pc, #232]	; (800b3b4 <MX_FREERTOS_Init+0x114>)
 800b2ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  /* creation of defaultQueue */
  led_powerQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &led_powerQueue_attributes);
 800b2cc:	4a3a      	ldr	r2, [pc, #232]	; (800b3b8 <MX_FREERTOS_Init+0x118>)
 800b2ce:	2104      	movs	r1, #4
 800b2d0:	2010      	movs	r0, #16
 800b2d2:	f7fc fe07 	bl	8007ee4 <osMessageQueueNew>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	4b38      	ldr	r3, [pc, #224]	; (800b3bc <MX_FREERTOS_Init+0x11c>)
 800b2da:	601a      	str	r2, [r3, #0]

  left_direQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &left_direQueue_attributes);
 800b2dc:	4a38      	ldr	r2, [pc, #224]	; (800b3c0 <MX_FREERTOS_Init+0x120>)
 800b2de:	2104      	movs	r1, #4
 800b2e0:	2010      	movs	r0, #16
 800b2e2:	f7fc fdff 	bl	8007ee4 <osMessageQueueNew>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	4b36      	ldr	r3, [pc, #216]	; (800b3c4 <MX_FREERTOS_Init+0x124>)
 800b2ea:	601a      	str	r2, [r3, #0]
  left_speedQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &left_speedQueue_attributes);
 800b2ec:	4a36      	ldr	r2, [pc, #216]	; (800b3c8 <MX_FREERTOS_Init+0x128>)
 800b2ee:	2104      	movs	r1, #4
 800b2f0:	2010      	movs	r0, #16
 800b2f2:	f7fc fdf7 	bl	8007ee4 <osMessageQueueNew>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	4b34      	ldr	r3, [pc, #208]	; (800b3cc <MX_FREERTOS_Init+0x12c>)
 800b2fa:	601a      	str	r2, [r3, #0]

  right_direQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &right_direQueue_attributes);
 800b2fc:	4a34      	ldr	r2, [pc, #208]	; (800b3d0 <MX_FREERTOS_Init+0x130>)
 800b2fe:	2104      	movs	r1, #4
 800b300:	2010      	movs	r0, #16
 800b302:	f7fc fdef 	bl	8007ee4 <osMessageQueueNew>
 800b306:	4602      	mov	r2, r0
 800b308:	4b32      	ldr	r3, [pc, #200]	; (800b3d4 <MX_FREERTOS_Init+0x134>)
 800b30a:	601a      	str	r2, [r3, #0]
  right_speedQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &right_speedQueue_attributes);
 800b30c:	4a32      	ldr	r2, [pc, #200]	; (800b3d8 <MX_FREERTOS_Init+0x138>)
 800b30e:	2104      	movs	r1, #4
 800b310:	2010      	movs	r0, #16
 800b312:	f7fc fde7 	bl	8007ee4 <osMessageQueueNew>
 800b316:	4602      	mov	r2, r0
 800b318:	4b30      	ldr	r3, [pc, #192]	; (800b3dc <MX_FREERTOS_Init+0x13c>)
 800b31a:	601a      	str	r2, [r3, #0]

  pc_tx_dataQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &pc_tx_dataQueue_attributes);
 800b31c:	4a30      	ldr	r2, [pc, #192]	; (800b3e0 <MX_FREERTOS_Init+0x140>)
 800b31e:	2104      	movs	r1, #4
 800b320:	2010      	movs	r0, #16
 800b322:	f7fc fddf 	bl	8007ee4 <osMessageQueueNew>
 800b326:	4602      	mov	r2, r0
 800b328:	4b2e      	ldr	r3, [pc, #184]	; (800b3e4 <MX_FREERTOS_Init+0x144>)
 800b32a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800b32c:	4a2e      	ldr	r2, [pc, #184]	; (800b3e8 <MX_FREERTOS_Init+0x148>)
 800b32e:	2100      	movs	r1, #0
 800b330:	482e      	ldr	r0, [pc, #184]	; (800b3ec <MX_FREERTOS_Init+0x14c>)
 800b332:	f7fc fbb7 	bl	8007aa4 <osThreadNew>
 800b336:	4602      	mov	r2, r0
 800b338:	4b2d      	ldr	r3, [pc, #180]	; (800b3f0 <MX_FREERTOS_Init+0x150>)
 800b33a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* creation of ledTask */
  led_powerTaskHandle = osThreadNew(StartLedPowerTask, NULL, &led_powerTask_attributes);
 800b33c:	4a2d      	ldr	r2, [pc, #180]	; (800b3f4 <MX_FREERTOS_Init+0x154>)
 800b33e:	2100      	movs	r1, #0
 800b340:	482d      	ldr	r0, [pc, #180]	; (800b3f8 <MX_FREERTOS_Init+0x158>)
 800b342:	f7fc fbaf 	bl	8007aa4 <osThreadNew>
 800b346:	4602      	mov	r2, r0
 800b348:	4b2c      	ldr	r3, [pc, #176]	; (800b3fc <MX_FREERTOS_Init+0x15c>)
 800b34a:	601a      	str	r2, [r3, #0]

  left_direTaskHandle = osThreadNew(StartLedPowerTask, NULL, &left_direTask_attributes);
 800b34c:	4a2c      	ldr	r2, [pc, #176]	; (800b400 <MX_FREERTOS_Init+0x160>)
 800b34e:	2100      	movs	r1, #0
 800b350:	4829      	ldr	r0, [pc, #164]	; (800b3f8 <MX_FREERTOS_Init+0x158>)
 800b352:	f7fc fba7 	bl	8007aa4 <osThreadNew>
 800b356:	4602      	mov	r2, r0
 800b358:	4b2a      	ldr	r3, [pc, #168]	; (800b404 <MX_FREERTOS_Init+0x164>)
 800b35a:	601a      	str	r2, [r3, #0]
  left_speedTaskHandle = osThreadNew(StartLedPowerTask, NULL, &left_speedTask_attributes);
 800b35c:	4a2a      	ldr	r2, [pc, #168]	; (800b408 <MX_FREERTOS_Init+0x168>)
 800b35e:	2100      	movs	r1, #0
 800b360:	4825      	ldr	r0, [pc, #148]	; (800b3f8 <MX_FREERTOS_Init+0x158>)
 800b362:	f7fc fb9f 	bl	8007aa4 <osThreadNew>
 800b366:	4602      	mov	r2, r0
 800b368:	4b28      	ldr	r3, [pc, #160]	; (800b40c <MX_FREERTOS_Init+0x16c>)
 800b36a:	601a      	str	r2, [r3, #0]

  right_direTaskHandle = osThreadNew(StartLedPowerTask, NULL, &right_direTask_attributes);
 800b36c:	4a28      	ldr	r2, [pc, #160]	; (800b410 <MX_FREERTOS_Init+0x170>)
 800b36e:	2100      	movs	r1, #0
 800b370:	4821      	ldr	r0, [pc, #132]	; (800b3f8 <MX_FREERTOS_Init+0x158>)
 800b372:	f7fc fb97 	bl	8007aa4 <osThreadNew>
 800b376:	4602      	mov	r2, r0
 800b378:	4b26      	ldr	r3, [pc, #152]	; (800b414 <MX_FREERTOS_Init+0x174>)
 800b37a:	601a      	str	r2, [r3, #0]
  right_speedTaskHandle = osThreadNew(StartLedPowerTask, NULL, &right_speedTask_attributes);
 800b37c:	4a26      	ldr	r2, [pc, #152]	; (800b418 <MX_FREERTOS_Init+0x178>)
 800b37e:	2100      	movs	r1, #0
 800b380:	481d      	ldr	r0, [pc, #116]	; (800b3f8 <MX_FREERTOS_Init+0x158>)
 800b382:	f7fc fb8f 	bl	8007aa4 <osThreadNew>
 800b386:	4602      	mov	r2, r0
 800b388:	4b24      	ldr	r3, [pc, #144]	; (800b41c <MX_FREERTOS_Init+0x17c>)
 800b38a:	601a      	str	r2, [r3, #0]

  pc_tx_dataTaskHandle = osThreadNew(StartPcTxDataTask, NULL, &pc_tx_dataTask_attributes); 
 800b38c:	4a24      	ldr	r2, [pc, #144]	; (800b420 <MX_FREERTOS_Init+0x180>)
 800b38e:	2100      	movs	r1, #0
 800b390:	4824      	ldr	r0, [pc, #144]	; (800b424 <MX_FREERTOS_Init+0x184>)
 800b392:	f7fc fb87 	bl	8007aa4 <osThreadNew>
 800b396:	4602      	mov	r2, r0
 800b398:	4b23      	ldr	r3, [pc, #140]	; (800b428 <MX_FREERTOS_Init+0x188>)
 800b39a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 800b39c:	bf00      	nop
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	0800d354 	.word	0x0800d354
 800b3a4:	20002030 	.word	0x20002030
 800b3a8:	0800d308 	.word	0x0800d308
 800b3ac:	20002050 	.word	0x20002050
 800b3b0:	0800d33c 	.word	0x0800d33c
 800b3b4:	20002038 	.word	0x20002038
 800b3b8:	0800d278 	.word	0x0800d278
 800b3bc:	2000203c 	.word	0x2000203c
 800b3c0:	0800d290 	.word	0x0800d290
 800b3c4:	2000204c 	.word	0x2000204c
 800b3c8:	0800d2a8 	.word	0x0800d2a8
 800b3cc:	20002048 	.word	0x20002048
 800b3d0:	0800d2c0 	.word	0x0800d2c0
 800b3d4:	20002028 	.word	0x20002028
 800b3d8:	0800d2d8 	.word	0x0800d2d8
 800b3dc:	20002058 	.word	0x20002058
 800b3e0:	0800d2f0 	.word	0x0800d2f0
 800b3e4:	20002024 	.word	0x20002024
 800b3e8:	0800d318 	.word	0x0800d318
 800b3ec:	0800b42d 	.word	0x0800b42d
 800b3f0:	20002020 	.word	0x20002020
 800b3f4:	0800d1a0 	.word	0x0800d1a0
 800b3f8:	0800b479 	.word	0x0800b479
 800b3fc:	20002040 	.word	0x20002040
 800b400:	0800d1c4 	.word	0x0800d1c4
 800b404:	20002044 	.word	0x20002044
 800b408:	0800d1e8 	.word	0x0800d1e8
 800b40c:	2000201c 	.word	0x2000201c
 800b410:	0800d20c 	.word	0x0800d20c
 800b414:	20002034 	.word	0x20002034
 800b418:	0800d230 	.word	0x0800d230
 800b41c:	20002054 	.word	0x20002054
 800b420:	0800d254 	.word	0x0800d254
 800b424:	0800b4d9 	.word	0x0800b4d9
 800b428:	2000202c 	.word	0x2000202c

0800b42c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800b434:	f001 f928 	bl	800c688 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
#define LED_Test 1
#if LED_Test
  osStatus_t status;
  Power_t power = OFF;
 800b438:	2301      	movs	r3, #1
 800b43a:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
    status = osMessageQueuePut(led_powerQueueHandle,&power,0,osWaitForever);
 800b43c:	4b0c      	ldr	r3, [pc, #48]	; (800b470 <StartDefaultTask+0x44>)
 800b43e:	6818      	ldr	r0, [r3, #0]
 800b440:	f107 010b 	add.w	r1, r7, #11
 800b444:	f04f 33ff 	mov.w	r3, #4294967295
 800b448:	2200      	movs	r2, #0
 800b44a:	f7fc fdd1 	bl	8007ff0 <osMessageQueuePut>
 800b44e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f2      	bne.n	800b43c <StartDefaultTask+0x10>
    {
      if(Led.power == ON)
 800b456:	4b07      	ldr	r3, [pc, #28]	; (800b474 <StartDefaultTask+0x48>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d102      	bne.n	800b464 <StartDefaultTask+0x38>
      {
        power = OFF;
 800b45e:	2301      	movs	r3, #1
 800b460:	72fb      	strb	r3, [r7, #11]
 800b462:	e001      	b.n	800b468 <StartDefaultTask+0x3c>
      }else
      {
        power = ON;
 800b464:	2300      	movs	r3, #0
 800b466:	72fb      	strb	r3, [r7, #11]
      }
      osDelay(100);
 800b468:	2064      	movs	r0, #100	; 0x64
 800b46a:	f7fc fbc5 	bl	8007bf8 <osDelay>
    status = osMessageQueuePut(led_powerQueueHandle,&power,0,osWaitForever);
 800b46e:	e7e5      	b.n	800b43c <StartDefaultTask+0x10>
 800b470:	2000203c 	.word	0x2000203c
 800b474:	20001f6c 	.word	0x20001f6c

0800b478 <StartLedPowerTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartLedPowerTask(void *argument)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  osStatus_t status;
  Power_t power = OFF;
 800b480:	2301      	movs	r3, #1
 800b482:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
    status = osMessageQueueGet(led_powerQueueHandle,&power,NULL,osWaitForever);
 800b484:	4b12      	ldr	r3, [pc, #72]	; (800b4d0 <StartLedPowerTask+0x58>)
 800b486:	6818      	ldr	r0, [r3, #0]
 800b488:	f107 010b 	add.w	r1, r7, #11
 800b48c:	f04f 33ff 	mov.w	r3, #4294967295
 800b490:	2200      	movs	r2, #0
 800b492:	f7fc fe21 	bl	80080d8 <osMessageQueueGet>
 800b496:	60f8      	str	r0, [r7, #12]
    if(status == osOK)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d115      	bne.n	800b4ca <StartLedPowerTask+0x52>
    {
      switch (power)
 800b49e:	7afb      	ldrb	r3, [r7, #11]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d002      	beq.n	800b4aa <StartLedPowerTask+0x32>
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d008      	beq.n	800b4ba <StartLedPowerTask+0x42>
      case OFF:
        Led.Set_Power(OFF);
        Led.power=OFF;
        break;
      default:
        break;
 800b4a8:	e010      	b.n	800b4cc <StartLedPowerTask+0x54>
        Led.Set_Power(ON);
 800b4aa:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <StartLedPowerTask+0x5c>)
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	4798      	blx	r3
        Led.power=ON;
 800b4b2:	4b08      	ldr	r3, [pc, #32]	; (800b4d4 <StartLedPowerTask+0x5c>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	701a      	strb	r2, [r3, #0]
        break;
 800b4b8:	e008      	b.n	800b4cc <StartLedPowerTask+0x54>
        Led.Set_Power(OFF);
 800b4ba:	4b06      	ldr	r3, [pc, #24]	; (800b4d4 <StartLedPowerTask+0x5c>)
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	2001      	movs	r0, #1
 800b4c0:	4798      	blx	r3
        Led.power=OFF;
 800b4c2:	4b04      	ldr	r3, [pc, #16]	; (800b4d4 <StartLedPowerTask+0x5c>)
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	701a      	strb	r2, [r3, #0]
        break;
 800b4c8:	e000      	b.n	800b4cc <StartLedPowerTask+0x54>
      }
    }
 800b4ca:	bf00      	nop
    status = osMessageQueueGet(led_powerQueueHandle,&power,NULL,osWaitForever);
 800b4cc:	e7da      	b.n	800b484 <StartLedPowerTask+0xc>
 800b4ce:	bf00      	nop
 800b4d0:	2000203c 	.word	0x2000203c
 800b4d4:	20001f6c 	.word	0x20001f6c

0800b4d8 <StartPcTxDataTask>:
    }
  } 
}

void StartPcTxDataTask(void *argument)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  osStatus_t status;
  uint8_t *tx_data=NULL;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60fb      	str	r3, [r7, #12]
  while(1)
  {
    status = osMutexWait(pc_tx_dataMutexHandle,osWaitForever);
 800b4e4:	4b12      	ldr	r3, [pc, #72]	; (800b530 <StartPcTxDataTask+0x58>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fc fc4b 	bl	8007d88 <osMutexAcquire>
 800b4f2:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1f4      	bne.n	800b4e4 <StartPcTxDataTask+0xc>
    {
      status =osMessageQueueGet(pc_tx_dataQueueHandle,NULL,NULL,osWaitForever);
 800b4fa:	4b0e      	ldr	r3, [pc, #56]	; (800b534 <StartPcTxDataTask+0x5c>)
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b502:	2200      	movs	r2, #0
 800b504:	2100      	movs	r1, #0
 800b506:	f7fc fde7 	bl	80080d8 <osMessageQueueGet>
 800b50a:	60b8      	str	r0, [r7, #8]
      if (status == osOK)
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d107      	bne.n	800b522 <StartPcTxDataTask+0x4a>
      {
          PC_SerialPort.Transmit_Data(PC_SerialPort.tx_data,PC_SerialPort.tx_len);
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <StartPcTxDataTask+0x60>)
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	4a08      	ldr	r2, [pc, #32]	; (800b538 <StartPcTxDataTask+0x60>)
 800b518:	6810      	ldr	r0, [r2, #0]
 800b51a:	4a07      	ldr	r2, [pc, #28]	; (800b538 <StartPcTxDataTask+0x60>)
 800b51c:	6892      	ldr	r2, [r2, #8]
 800b51e:	4611      	mov	r1, r2
 800b520:	4798      	blx	r3
      }
      osMutexRelease(pc_tx_dataMutexHandle);
 800b522:	4b03      	ldr	r3, [pc, #12]	; (800b530 <StartPcTxDataTask+0x58>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4618      	mov	r0, r3
 800b528:	f7fc fc8c 	bl	8007e44 <osMutexRelease>
    status = osMutexWait(pc_tx_dataMutexHandle,osWaitForever);
 800b52c:	e7da      	b.n	800b4e4 <StartPcTxDataTask+0xc>
 800b52e:	bf00      	nop
 800b530:	20002050 	.word	0x20002050
 800b534:	20002024 	.word	0x20002024
 800b538:	20001f28 	.word	0x20001f28

0800b53c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b088      	sub	sp, #32
 800b540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b542:	f107 0310 	add.w	r3, r7, #16
 800b546:	2200      	movs	r2, #0
 800b548:	601a      	str	r2, [r3, #0]
 800b54a:	605a      	str	r2, [r3, #4]
 800b54c:	609a      	str	r2, [r3, #8]
 800b54e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b550:	4b39      	ldr	r3, [pc, #228]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	4a38      	ldr	r2, [pc, #224]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b556:	f043 0310 	orr.w	r3, r3, #16
 800b55a:	6193      	str	r3, [r2, #24]
 800b55c:	4b36      	ldr	r3, [pc, #216]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	f003 0310 	and.w	r3, r3, #16
 800b564:	60fb      	str	r3, [r7, #12]
 800b566:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b568:	4b33      	ldr	r3, [pc, #204]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	4a32      	ldr	r2, [pc, #200]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b56e:	f043 0320 	orr.w	r3, r3, #32
 800b572:	6193      	str	r3, [r2, #24]
 800b574:	4b30      	ldr	r3, [pc, #192]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	f003 0320 	and.w	r3, r3, #32
 800b57c:	60bb      	str	r3, [r7, #8]
 800b57e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b580:	4b2d      	ldr	r3, [pc, #180]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	4a2c      	ldr	r2, [pc, #176]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b586:	f043 0304 	orr.w	r3, r3, #4
 800b58a:	6193      	str	r3, [r2, #24]
 800b58c:	4b2a      	ldr	r3, [pc, #168]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	f003 0304 	and.w	r3, r3, #4
 800b594:	607b      	str	r3, [r7, #4]
 800b596:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b598:	4b27      	ldr	r3, [pc, #156]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	4a26      	ldr	r2, [pc, #152]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b59e:	f043 0308 	orr.w	r3, r3, #8
 800b5a2:	6193      	str	r3, [r2, #24]
 800b5a4:	4b24      	ldr	r3, [pc, #144]	; (800b638 <MX_GPIO_Init+0xfc>)
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	f003 0308 	and.w	r3, r3, #8
 800b5ac:	603b      	str	r3, [r7, #0]
 800b5ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b5b6:	4821      	ldr	r0, [pc, #132]	; (800b63c <MX_GPIO_Init+0x100>)
 800b5b8:	f7f5 fce2 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_Dire2_Pin|R_Dire2_Pin|R_Dire1_Pin, GPIO_PIN_RESET);
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f241 0130 	movw	r1, #4144	; 0x1030
 800b5c2:	481f      	ldr	r0, [pc, #124]	; (800b640 <MX_GPIO_Init+0x104>)
 800b5c4:	f7f5 fcdc 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_Dire1_GPIO_Port, L_Dire1_Pin, GPIO_PIN_RESET);
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b5ce:	481d      	ldr	r0, [pc, #116]	; (800b644 <MX_GPIO_Init+0x108>)
 800b5d0:	f7f5 fcd6 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800b5d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800b5e6:	f107 0310 	add.w	r3, r7, #16
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4813      	ldr	r0, [pc, #76]	; (800b63c <MX_GPIO_Init+0x100>)
 800b5ee:	f7f5 fb6d 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = L_Dire2_Pin|R_Dire2_Pin|R_Dire1_Pin;
 800b5f2:	f241 0330 	movw	r3, #4144	; 0x1030
 800b5f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b600:	2302      	movs	r3, #2
 800b602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b604:	f107 0310 	add.w	r3, r7, #16
 800b608:	4619      	mov	r1, r3
 800b60a:	480d      	ldr	r0, [pc, #52]	; (800b640 <MX_GPIO_Init+0x104>)
 800b60c:	f7f5 fb5e 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L_Dire1_Pin;
 800b610:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b616:	2301      	movs	r3, #1
 800b618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b61a:	2301      	movs	r3, #1
 800b61c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b61e:	2302      	movs	r3, #2
 800b620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_Dire1_GPIO_Port, &GPIO_InitStruct);
 800b622:	f107 0310 	add.w	r3, r7, #16
 800b626:	4619      	mov	r1, r3
 800b628:	4806      	ldr	r0, [pc, #24]	; (800b644 <MX_GPIO_Init+0x108>)
 800b62a:	f7f5 fb4f 	bl	8000ccc <HAL_GPIO_Init>

}
 800b62e:	bf00      	nop
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	40021000 	.word	0x40021000
 800b63c:	40011000 	.word	0x40011000
 800b640:	40010c00 	.word	0x40010c00
 800b644:	40010800 	.word	0x40010800

0800b648 <Board_GPIO_Init>:

/* USER CODE BEGIN 2 */
void Board_GPIO_Init(void)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 800b64c:	2200      	movs	r2, #0
 800b64e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b652:	480d      	ldr	r0, [pc, #52]	; (800b688 <Board_GPIO_Init+0x40>)
 800b654:	f7f5 fc94 	bl	8000f80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_Dire1_GPIO_Port,L_Dire1_Pin,GPIO_PIN_RESET);
 800b658:	2200      	movs	r2, #0
 800b65a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b65e:	480b      	ldr	r0, [pc, #44]	; (800b68c <Board_GPIO_Init+0x44>)
 800b660:	f7f5 fc8e 	bl	8000f80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_Dire2_GPIO_Port,L_Dire2_Pin,GPIO_PIN_RESET);
 800b664:	2200      	movs	r2, #0
 800b666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b66a:	4809      	ldr	r0, [pc, #36]	; (800b690 <Board_GPIO_Init+0x48>)
 800b66c:	f7f5 fc88 	bl	8000f80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_Dire1_GPIO_Port,R_Dire1_Pin,GPIO_PIN_RESET);
 800b670:	2200      	movs	r2, #0
 800b672:	2120      	movs	r1, #32
 800b674:	4806      	ldr	r0, [pc, #24]	; (800b690 <Board_GPIO_Init+0x48>)
 800b676:	f7f5 fc83 	bl	8000f80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R_Dire2_GPIO_Port,R_Dire2_Pin,GPIO_PIN_RESET);
 800b67a:	2200      	movs	r2, #0
 800b67c:	2110      	movs	r1, #16
 800b67e:	4804      	ldr	r0, [pc, #16]	; (800b690 <Board_GPIO_Init+0x48>)
 800b680:	f7f5 fc7e 	bl	8000f80 <HAL_GPIO_WritePin>
}
 800b684:	bf00      	nop
 800b686:	bd80      	pop	{r7, pc}
 800b688:	40011000 	.word	0x40011000
 800b68c:	40010800 	.word	0x40010800
 800b690:	40010c00 	.word	0x40010c00

0800b694 <Led_Set_Power>:

void Led_Set_Power(Power_t power)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	71fb      	strb	r3, [r7, #7]
  switch (power)
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <Led_Set_Power+0x16>
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d007      	beq.n	800b6b8 <Led_Set_Power+0x24>
    break;
  case OFF:
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
    break;
  default:
    break;
 800b6a8:	e00d      	b.n	800b6c6 <Led_Set_Power+0x32>
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b6b0:	4807      	ldr	r0, [pc, #28]	; (800b6d0 <Led_Set_Power+0x3c>)
 800b6b2:	f7f5 fc65 	bl	8000f80 <HAL_GPIO_WritePin>
    break;
 800b6b6:	e006      	b.n	800b6c6 <Led_Set_Power+0x32>
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b6be:	4804      	ldr	r0, [pc, #16]	; (800b6d0 <Led_Set_Power+0x3c>)
 800b6c0:	f7f5 fc5e 	bl	8000f80 <HAL_GPIO_WritePin>
    break;
 800b6c4:	bf00      	nop
  }
}
 800b6c6:	bf00      	nop
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	40011000 	.word	0x40011000

0800b6d4 <Left_Wheel_Set_Dire>:

void Left_Wheel_Set_Dire(Dire_t dire)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	71fb      	strb	r3, [r7, #7]
  switch (dire)
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <Left_Wheel_Set_Dire+0x16>
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d00d      	beq.n	800b704 <Left_Wheel_Set_Dire+0x30>
  case BACK:
    HAL_GPIO_WritePin(L_Dire1_GPIO_Port,L_Dire1_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(L_Dire2_GPIO_Port,L_Dire2_Pin,GPIO_PIN_RESET);
    break;
  default:
    break;
 800b6e8:	e019      	b.n	800b71e <Left_Wheel_Set_Dire+0x4a>
    HAL_GPIO_WritePin(L_Dire1_GPIO_Port,L_Dire1_Pin,GPIO_PIN_RESET);
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b6f0:	480d      	ldr	r0, [pc, #52]	; (800b728 <Left_Wheel_Set_Dire+0x54>)
 800b6f2:	f7f5 fc45 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(L_Dire2_GPIO_Port,L_Dire2_Pin,GPIO_PIN_SET);
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b6fc:	480b      	ldr	r0, [pc, #44]	; (800b72c <Left_Wheel_Set_Dire+0x58>)
 800b6fe:	f7f5 fc3f 	bl	8000f80 <HAL_GPIO_WritePin>
    break;
 800b702:	e00c      	b.n	800b71e <Left_Wheel_Set_Dire+0x4a>
    HAL_GPIO_WritePin(L_Dire1_GPIO_Port,L_Dire1_Pin,GPIO_PIN_SET);
 800b704:	2201      	movs	r2, #1
 800b706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b70a:	4807      	ldr	r0, [pc, #28]	; (800b728 <Left_Wheel_Set_Dire+0x54>)
 800b70c:	f7f5 fc38 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(L_Dire2_GPIO_Port,L_Dire2_Pin,GPIO_PIN_RESET);
 800b710:	2200      	movs	r2, #0
 800b712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b716:	4805      	ldr	r0, [pc, #20]	; (800b72c <Left_Wheel_Set_Dire+0x58>)
 800b718:	f7f5 fc32 	bl	8000f80 <HAL_GPIO_WritePin>
    break;
 800b71c:	bf00      	nop
  }
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	40010800 	.word	0x40010800
 800b72c:	40010c00 	.word	0x40010c00

0800b730 <Right_Wheel_Set_Dire>:
void Right_Wheel_Set_Dire(Dire_t dire)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	71fb      	strb	r3, [r7, #7]
  switch (dire)
 800b73a:	79fb      	ldrb	r3, [r7, #7]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <Right_Wheel_Set_Dire+0x16>
 800b740:	2b01      	cmp	r3, #1
 800b742:	d00b      	beq.n	800b75c <Right_Wheel_Set_Dire+0x2c>
  case BACK:
    HAL_GPIO_WritePin(R_Dire1_GPIO_Port,R_Dire1_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(R_Dire2_GPIO_Port,R_Dire2_Pin,GPIO_PIN_RESET);
    break;
  default:
    break;
 800b744:	e015      	b.n	800b772 <Right_Wheel_Set_Dire+0x42>
    HAL_GPIO_WritePin(R_Dire1_GPIO_Port,R_Dire1_Pin,GPIO_PIN_RESET);
 800b746:	2200      	movs	r2, #0
 800b748:	2120      	movs	r1, #32
 800b74a:	480c      	ldr	r0, [pc, #48]	; (800b77c <Right_Wheel_Set_Dire+0x4c>)
 800b74c:	f7f5 fc18 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R_Dire2_GPIO_Port,R_Dire2_Pin,GPIO_PIN_SET);
 800b750:	2201      	movs	r2, #1
 800b752:	2110      	movs	r1, #16
 800b754:	4809      	ldr	r0, [pc, #36]	; (800b77c <Right_Wheel_Set_Dire+0x4c>)
 800b756:	f7f5 fc13 	bl	8000f80 <HAL_GPIO_WritePin>
    break;
 800b75a:	e00a      	b.n	800b772 <Right_Wheel_Set_Dire+0x42>
    HAL_GPIO_WritePin(R_Dire1_GPIO_Port,R_Dire1_Pin,GPIO_PIN_SET);
 800b75c:	2201      	movs	r2, #1
 800b75e:	2120      	movs	r1, #32
 800b760:	4806      	ldr	r0, [pc, #24]	; (800b77c <Right_Wheel_Set_Dire+0x4c>)
 800b762:	f7f5 fc0d 	bl	8000f80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(R_Dire2_GPIO_Port,R_Dire2_Pin,GPIO_PIN_RESET);
 800b766:	2200      	movs	r2, #0
 800b768:	2110      	movs	r1, #16
 800b76a:	4804      	ldr	r0, [pc, #16]	; (800b77c <Right_Wheel_Set_Dire+0x4c>)
 800b76c:	f7f5 fc08 	bl	8000f80 <HAL_GPIO_WritePin>
    break;
 800b770:	bf00      	nop
  }
}
 800b772:	bf00      	nop
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	40010c00 	.word	0x40010c00

0800b780 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800b784:	4b12      	ldr	r3, [pc, #72]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b786:	4a13      	ldr	r2, [pc, #76]	; (800b7d4 <MX_I2C1_Init+0x54>)
 800b788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b78a:	4b11      	ldr	r3, [pc, #68]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b78c:	4a12      	ldr	r2, [pc, #72]	; (800b7d8 <MX_I2C1_Init+0x58>)
 800b78e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b790:	4b0f      	ldr	r3, [pc, #60]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b792:	2200      	movs	r2, #0
 800b794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b796:	4b0e      	ldr	r3, [pc, #56]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b798:	2200      	movs	r2, #0
 800b79a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b79c:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b79e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b7a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b7a4:	4b0a      	ldr	r3, [pc, #40]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b7aa:	4b09      	ldr	r3, [pc, #36]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b7b0:	4b07      	ldr	r3, [pc, #28]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b7b6:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b7bc:	4804      	ldr	r0, [pc, #16]	; (800b7d0 <MX_I2C1_Init+0x50>)
 800b7be:	f7f5 fbf7 	bl	8000fb0 <HAL_I2C_Init>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d001      	beq.n	800b7cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800b7c8:	f000 f9c4 	bl	800bb54 <Error_Handler>
  }

}
 800b7cc:	bf00      	nop
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	2000205c 	.word	0x2000205c
 800b7d4:	40005400 	.word	0x40005400
 800b7d8:	000186a0 	.word	0x000186a0

0800b7dc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800b7e0:	4b12      	ldr	r3, [pc, #72]	; (800b82c <MX_I2C2_Init+0x50>)
 800b7e2:	4a13      	ldr	r2, [pc, #76]	; (800b830 <MX_I2C2_Init+0x54>)
 800b7e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800b7e6:	4b11      	ldr	r3, [pc, #68]	; (800b82c <MX_I2C2_Init+0x50>)
 800b7e8:	4a12      	ldr	r2, [pc, #72]	; (800b834 <MX_I2C2_Init+0x58>)
 800b7ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b7ec:	4b0f      	ldr	r3, [pc, #60]	; (800b82c <MX_I2C2_Init+0x50>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800b7f2:	4b0e      	ldr	r3, [pc, #56]	; (800b82c <MX_I2C2_Init+0x50>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b7f8:	4b0c      	ldr	r3, [pc, #48]	; (800b82c <MX_I2C2_Init+0x50>)
 800b7fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b7fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b800:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <MX_I2C2_Init+0x50>)
 800b802:	2200      	movs	r2, #0
 800b804:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800b806:	4b09      	ldr	r3, [pc, #36]	; (800b82c <MX_I2C2_Init+0x50>)
 800b808:	2200      	movs	r2, #0
 800b80a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b80c:	4b07      	ldr	r3, [pc, #28]	; (800b82c <MX_I2C2_Init+0x50>)
 800b80e:	2200      	movs	r2, #0
 800b810:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b812:	4b06      	ldr	r3, [pc, #24]	; (800b82c <MX_I2C2_Init+0x50>)
 800b814:	2200      	movs	r2, #0
 800b816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b818:	4804      	ldr	r0, [pc, #16]	; (800b82c <MX_I2C2_Init+0x50>)
 800b81a:	f7f5 fbc9 	bl	8000fb0 <HAL_I2C_Init>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800b824:	f000 f996 	bl	800bb54 <Error_Handler>
  }

}
 800b828:	bf00      	nop
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	200020b0 	.word	0x200020b0
 800b830:	40005800 	.word	0x40005800
 800b834:	000186a0 	.word	0x000186a0

0800b838 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08c      	sub	sp, #48	; 0x30
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b840:	f107 031c 	add.w	r3, r7, #28
 800b844:	2200      	movs	r2, #0
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	605a      	str	r2, [r3, #4]
 800b84a:	609a      	str	r2, [r3, #8]
 800b84c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a32      	ldr	r2, [pc, #200]	; (800b91c <HAL_I2C_MspInit+0xe4>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d133      	bne.n	800b8c0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b858:	4b31      	ldr	r3, [pc, #196]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	4a30      	ldr	r2, [pc, #192]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b85e:	f043 0308 	orr.w	r3, r3, #8
 800b862:	6193      	str	r3, [r2, #24]
 800b864:	4b2e      	ldr	r3, [pc, #184]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	f003 0308 	and.w	r3, r3, #8
 800b86c:	61bb      	str	r3, [r7, #24]
 800b86e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b870:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b876:	2312      	movs	r3, #18
 800b878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b87a:	2303      	movs	r3, #3
 800b87c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b87e:	f107 031c 	add.w	r3, r7, #28
 800b882:	4619      	mov	r1, r3
 800b884:	4827      	ldr	r0, [pc, #156]	; (800b924 <HAL_I2C_MspInit+0xec>)
 800b886:	f7f5 fa21 	bl	8000ccc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800b88a:	4b27      	ldr	r3, [pc, #156]	; (800b928 <HAL_I2C_MspInit+0xf0>)
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800b896:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89a:	f043 0302 	orr.w	r3, r3, #2
 800b89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8a0:	4a21      	ldr	r2, [pc, #132]	; (800b928 <HAL_I2C_MspInit+0xf0>)
 800b8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b8a6:	4b1e      	ldr	r3, [pc, #120]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b8a8:	69db      	ldr	r3, [r3, #28]
 800b8aa:	4a1d      	ldr	r2, [pc, #116]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b8ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8b0:	61d3      	str	r3, [r2, #28]
 800b8b2:	4b1b      	ldr	r3, [pc, #108]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b8be:	e029      	b.n	800b914 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a19      	ldr	r2, [pc, #100]	; (800b92c <HAL_I2C_MspInit+0xf4>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d124      	bne.n	800b914 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b8ca:	4b15      	ldr	r3, [pc, #84]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	4a14      	ldr	r2, [pc, #80]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b8d0:	f043 0308 	orr.w	r3, r3, #8
 800b8d4:	6193      	str	r3, [r2, #24]
 800b8d6:	4b12      	ldr	r3, [pc, #72]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	f003 0308 	and.w	r3, r3, #8
 800b8de:	613b      	str	r3, [r7, #16]
 800b8e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b8e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b8e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b8e8:	2312      	movs	r3, #18
 800b8ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8f0:	f107 031c 	add.w	r3, r7, #28
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	480b      	ldr	r0, [pc, #44]	; (800b924 <HAL_I2C_MspInit+0xec>)
 800b8f8:	f7f5 f9e8 	bl	8000ccc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b8fc:	4b08      	ldr	r3, [pc, #32]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b8fe:	69db      	ldr	r3, [r3, #28]
 800b900:	4a07      	ldr	r2, [pc, #28]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b902:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b906:	61d3      	str	r3, [r2, #28]
 800b908:	4b05      	ldr	r3, [pc, #20]	; (800b920 <HAL_I2C_MspInit+0xe8>)
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b910:	60fb      	str	r3, [r7, #12]
 800b912:	68fb      	ldr	r3, [r7, #12]
}
 800b914:	bf00      	nop
 800b916:	3730      	adds	r7, #48	; 0x30
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	40005400 	.word	0x40005400
 800b920:	40021000 	.word	0x40021000
 800b924:	40010c00 	.word	0x40010c00
 800b928:	40010000 	.word	0x40010000
 800b92c:	40005800 	.word	0x40005800

0800b930 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 800b934:	4b09      	ldr	r3, [pc, #36]	; (800b95c <MX_IWDG_Init+0x2c>)
 800b936:	4a0a      	ldr	r2, [pc, #40]	; (800b960 <MX_IWDG_Init+0x30>)
 800b938:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800b93a:	4b08      	ldr	r3, [pc, #32]	; (800b95c <MX_IWDG_Init+0x2c>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800b940:	4b06      	ldr	r3, [pc, #24]	; (800b95c <MX_IWDG_Init+0x2c>)
 800b942:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b946:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800b948:	4804      	ldr	r0, [pc, #16]	; (800b95c <MX_IWDG_Init+0x2c>)
 800b94a:	f7f5 fc59 	bl	8001200 <HAL_IWDG_Init>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800b954:	f000 f8fe 	bl	800bb54 <Error_Handler>
  }

}
 800b958:	bf00      	nop
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	20002104 	.word	0x20002104
 800b960:	40003000 	.word	0x40003000

0800b964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b968:	f7f4 fbf2 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b96c:	f000 f87c 	bl	800ba68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b970:	f7ff fde4 	bl	800b53c <MX_GPIO_Init>
  MX_DMA_Init();
 800b974:	f7ff fc6e 	bl	800b254 <MX_DMA_Init>
  MX_ADC1_Init();
 800b978:	f7ff fb58 	bl	800b02c <MX_ADC1_Init>
  MX_ADC2_Init();
 800b97c:	f7ff fb94 	bl	800b0a8 <MX_ADC2_Init>
  MX_CRC_Init();
 800b980:	f7ff fc36 	bl	800b1f0 <MX_CRC_Init>
  MX_I2C1_Init();
 800b984:	f7ff fefc 	bl	800b780 <MX_I2C1_Init>
  MX_I2C2_Init();
 800b988:	f7ff ff28 	bl	800b7dc <MX_I2C2_Init>
  MX_IWDG_Init();
 800b98c:	f7ff ffd0 	bl	800b930 <MX_IWDG_Init>
  MX_RTC_Init();
 800b990:	f000 f8e6 	bl	800bb60 <MX_RTC_Init>
  MX_SPI2_Init();
 800b994:	f000 f952 	bl	800bc3c <MX_SPI2_Init>
  MX_TIM2_Init();
 800b998:	f000 fad8 	bl	800bf4c <MX_TIM2_Init>
  MX_TIM3_Init();
 800b99c:	f000 fb6e 	bl	800c07c <MX_TIM3_Init>
  MX_TIM4_Init();
 800b9a0:	f000 fbc0 	bl	800c124 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800b9a4:	f000 fd54 	bl	800c450 <MX_USART1_UART_Init>
  MX_WWDG_Init();
 800b9a8:	f001 fa5a 	bl	800ce60 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  Board.GPIO_Init=Board_GPIO_Init;
 800b9ac:	4b1d      	ldr	r3, [pc, #116]	; (800ba24 <main+0xc0>)
 800b9ae:	4a1e      	ldr	r2, [pc, #120]	; (800ba28 <main+0xc4>)
 800b9b0:	601a      	str	r2, [r3, #0]
  Board.PWM_Init=Board_PWM_Init;
 800b9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ba24 <main+0xc0>)
 800b9b4:	4a1d      	ldr	r2, [pc, #116]	; (800ba2c <main+0xc8>)
 800b9b6:	605a      	str	r2, [r3, #4]
  Board.USART_Init=Board_USART_Init;
 800b9b8:	4b1a      	ldr	r3, [pc, #104]	; (800ba24 <main+0xc0>)
 800b9ba:	4a1d      	ldr	r2, [pc, #116]	; (800ba30 <main+0xcc>)
 800b9bc:	609a      	str	r2, [r3, #8]
  Board_Init();
 800b9be:	f7ff faf5 	bl	800afac <Board_Init>

  Led.Set_Power=Led_Set_Power;
 800b9c2:	4b1c      	ldr	r3, [pc, #112]	; (800ba34 <main+0xd0>)
 800b9c4:	4a1c      	ldr	r2, [pc, #112]	; (800ba38 <main+0xd4>)
 800b9c6:	605a      	str	r2, [r3, #4]
  Led_Init();
 800b9c8:	f7ff fb00 	bl	800afcc <Led_Init>

  Left_Wheel.Set_Dire=Left_Wheel_Set_Dire;
 800b9cc:	4b1b      	ldr	r3, [pc, #108]	; (800ba3c <main+0xd8>)
 800b9ce:	4a1c      	ldr	r2, [pc, #112]	; (800ba40 <main+0xdc>)
 800b9d0:	60da      	str	r2, [r3, #12]
  Left_Wheel.Set_Speed=Left_Wheel_Set_Speed;
 800b9d2:	4b1a      	ldr	r3, [pc, #104]	; (800ba3c <main+0xd8>)
 800b9d4:	4a1b      	ldr	r2, [pc, #108]	; (800ba44 <main+0xe0>)
 800b9d6:	609a      	str	r2, [r3, #8]
  Right_Wheel.Set_Dire=Right_Wheel_Set_Dire;
 800b9d8:	4b1b      	ldr	r3, [pc, #108]	; (800ba48 <main+0xe4>)
 800b9da:	4a1c      	ldr	r2, [pc, #112]	; (800ba4c <main+0xe8>)
 800b9dc:	60da      	str	r2, [r3, #12]
  Right_Wheel.Set_Speed=Right_Wheel_Set_Speed;
 800b9de:	4b1a      	ldr	r3, [pc, #104]	; (800ba48 <main+0xe4>)
 800b9e0:	4a1b      	ldr	r2, [pc, #108]	; (800ba50 <main+0xec>)
 800b9e2:	609a      	str	r2, [r3, #8]
  Wheel_Init();
 800b9e4:	f7ff fafc 	bl	800afe0 <Wheel_Init>
  
  PC_SerialPort.tx_data=TxBuffer;
 800b9e8:	4b1a      	ldr	r3, [pc, #104]	; (800ba54 <main+0xf0>)
 800b9ea:	4a1b      	ldr	r2, [pc, #108]	; (800ba58 <main+0xf4>)
 800b9ec:	601a      	str	r2, [r3, #0]
  PC_SerialPort.rx_data=RxBuffer;
 800b9ee:	4b19      	ldr	r3, [pc, #100]	; (800ba54 <main+0xf0>)
 800b9f0:	4a1a      	ldr	r2, [pc, #104]	; (800ba5c <main+0xf8>)
 800b9f2:	605a      	str	r2, [r3, #4]
  PC_SerialPort.tx_len=TXBUFFERSIZE;
 800b9f4:	4b17      	ldr	r3, [pc, #92]	; (800ba54 <main+0xf0>)
 800b9f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9fa:	609a      	str	r2, [r3, #8]
  PC_SerialPort.rx_len=RXBUFFERSIZE;
 800b9fc:	4b15      	ldr	r3, [pc, #84]	; (800ba54 <main+0xf0>)
 800b9fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba02:	60da      	str	r2, [r3, #12]
  PC_SerialPort.Transmit_Data=PC_SerialPort_Transmit_Data;
 800ba04:	4b13      	ldr	r3, [pc, #76]	; (800ba54 <main+0xf0>)
 800ba06:	4a16      	ldr	r2, [pc, #88]	; (800ba60 <main+0xfc>)
 800ba08:	611a      	str	r2, [r3, #16]
  PC_SerialPort.Receive_Data=PC_SerialPort_Receive_Data;
 800ba0a:	4b12      	ldr	r3, [pc, #72]	; (800ba54 <main+0xf0>)
 800ba0c:	4a15      	ldr	r2, [pc, #84]	; (800ba64 <main+0x100>)
 800ba0e:	615a      	str	r2, [r3, #20]
  SerialPort_Init();
 800ba10:	f7ff fafe 	bl	800b010 <SerialPort_Init>
  

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800ba14:	f7fb ffe0 	bl	80079d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800ba18:	f7ff fc42 	bl	800b2a0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800ba1c:	f7fc f80e 	bl	8007a3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ba20:	e7fe      	b.n	800ba20 <main+0xbc>
 800ba22:	bf00      	nop
 800ba24:	20001f60 	.word	0x20001f60
 800ba28:	0800b649 	.word	0x0800b649
 800ba2c:	0800c39d 	.word	0x0800c39d
 800ba30:	0800c5f9 	.word	0x0800c5f9
 800ba34:	20001f6c 	.word	0x20001f6c
 800ba38:	0800b695 	.word	0x0800b695
 800ba3c:	20001f50 	.word	0x20001f50
 800ba40:	0800b6d5 	.word	0x0800b6d5
 800ba44:	0800c411 	.word	0x0800c411
 800ba48:	20001f40 	.word	0x20001f40
 800ba4c:	0800b731 	.word	0x0800b731
 800ba50:	0800c431 	.word	0x0800c431
 800ba54:	20001f28 	.word	0x20001f28
 800ba58:	20002210 	.word	0x20002210
 800ba5c:	20002110 	.word	0x20002110
 800ba60:	0800c605 	.word	0x0800c605
 800ba64:	0800c635 	.word	0x0800c635

0800ba68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b094      	sub	sp, #80	; 0x50
 800ba6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ba6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba72:	2228      	movs	r2, #40	; 0x28
 800ba74:	2100      	movs	r1, #0
 800ba76:	4618      	mov	r0, r3
 800ba78:	f001 fa85 	bl	800cf86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ba7c:	f107 0314 	add.w	r3, r7, #20
 800ba80:	2200      	movs	r2, #0
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	605a      	str	r2, [r3, #4]
 800ba86:	609a      	str	r2, [r3, #8]
 800ba88:	60da      	str	r2, [r3, #12]
 800ba8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba8c:	1d3b      	adds	r3, r7, #4
 800ba8e:	2200      	movs	r2, #0
 800ba90:	601a      	str	r2, [r3, #0]
 800ba92:	605a      	str	r2, [r3, #4]
 800ba94:	609a      	str	r2, [r3, #8]
 800ba96:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800ba98:	2309      	movs	r3, #9
 800ba9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ba9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800baa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800baa2:	2300      	movs	r3, #0
 800baa4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800baa6:	2301      	movs	r3, #1
 800baa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800baaa:	2301      	movs	r3, #1
 800baac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800baae:	2302      	movs	r3, #2
 800bab0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800bab8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800babc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800babe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7f6 fa9c 	bl	8002000 <HAL_RCC_OscConfig>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800bace:	f000 f841 	bl	800bb54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bad2:	230f      	movs	r3, #15
 800bad4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bad6:	2302      	movs	r3, #2
 800bad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bada:	2300      	movs	r3, #0
 800badc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800bade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bae2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bae4:	2300      	movs	r3, #0
 800bae6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800bae8:	f107 0314 	add.w	r3, r7, #20
 800baec:	2102      	movs	r1, #2
 800baee:	4618      	mov	r0, r3
 800baf0:	f7f6 fd06 	bl	8002500 <HAL_RCC_ClockConfig>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <SystemClock_Config+0x96>
  {
    Error_Handler();
 800bafa:	f000 f82b 	bl	800bb54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 800bafe:	2313      	movs	r3, #19
 800bb00:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800bb02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb06:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800bb08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb12:	1d3b      	adds	r3, r7, #4
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7f6 fee5 	bl	80028e4 <HAL_RCCEx_PeriphCLKConfig>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800bb20:	f000 f818 	bl	800bb54 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800bb24:	f7f6 fdd6 	bl	80026d4 <HAL_RCC_EnableCSS>
}
 800bb28:	bf00      	nop
 800bb2a:	3750      	adds	r7, #80	; 0x50
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a04      	ldr	r2, [pc, #16]	; (800bb50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d101      	bne.n	800bb46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800bb42:	f7f4 fb1b 	bl	800017c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800bb46:	bf00      	nop
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	40012c00 	.word	0x40012c00

0800bb54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bb54:	b480      	push	{r7}
 800bb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800bb58:	bf00      	nop
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bc80      	pop	{r7}
 800bb5e:	4770      	bx	lr

0800bb60 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800bb66:	1d3b      	adds	r3, r7, #4
 800bb68:	2100      	movs	r1, #0
 800bb6a:	460a      	mov	r2, r1
 800bb6c:	801a      	strh	r2, [r3, #0]
 800bb6e:	460a      	mov	r2, r1
 800bb70:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800bb72:	2300      	movs	r3, #0
 800bb74:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800bb76:	4b1d      	ldr	r3, [pc, #116]	; (800bbec <MX_RTC_Init+0x8c>)
 800bb78:	4a1d      	ldr	r2, [pc, #116]	; (800bbf0 <MX_RTC_Init+0x90>)
 800bb7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800bb7c:	4b1b      	ldr	r3, [pc, #108]	; (800bbec <MX_RTC_Init+0x8c>)
 800bb7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb82:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800bb84:	4b19      	ldr	r3, [pc, #100]	; (800bbec <MX_RTC_Init+0x8c>)
 800bb86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb8a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800bb8c:	4817      	ldr	r0, [pc, #92]	; (800bbec <MX_RTC_Init+0x8c>)
 800bb8e:	f7f7 f81b 	bl	8002bc8 <HAL_RTC_Init>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800bb98:	f7ff ffdc 	bl	800bb54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800bba0:	2300      	movs	r3, #0
 800bba2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800bba8:	1d3b      	adds	r3, r7, #4
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4619      	mov	r1, r3
 800bbae:	480f      	ldr	r0, [pc, #60]	; (800bbec <MX_RTC_Init+0x8c>)
 800bbb0:	f7f7 f8a0 	bl	8002cf4 <HAL_RTC_SetTime>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800bbba:	f7ff ffcb 	bl	800bb54 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800bbce:	463b      	mov	r3, r7
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	4805      	ldr	r0, [pc, #20]	; (800bbec <MX_RTC_Init+0x8c>)
 800bbd6:	f7f7 f925 	bl	8002e24 <HAL_RTC_SetDate>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800bbe0:	f7ff ffb8 	bl	800bb54 <Error_Handler>
  }

}
 800bbe4:	bf00      	nop
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20002310 	.word	0x20002310
 800bbf0:	40002800 	.word	0x40002800

0800bbf4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a0b      	ldr	r2, [pc, #44]	; (800bc30 <HAL_RTC_MspInit+0x3c>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d110      	bne.n	800bc28 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800bc06:	f7f6 f9ef 	bl	8001fe8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <HAL_RTC_MspInit+0x40>)
 800bc0c:	69db      	ldr	r3, [r3, #28]
 800bc0e:	4a09      	ldr	r2, [pc, #36]	; (800bc34 <HAL_RTC_MspInit+0x40>)
 800bc10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc14:	61d3      	str	r3, [r2, #28]
 800bc16:	4b07      	ldr	r3, [pc, #28]	; (800bc34 <HAL_RTC_MspInit+0x40>)
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800bc22:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <HAL_RTC_MspInit+0x44>)
 800bc24:	2201      	movs	r2, #1
 800bc26:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	40002800 	.word	0x40002800
 800bc34:	40021000 	.word	0x40021000
 800bc38:	4242043c 	.word	0x4242043c

0800bc3c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800bc40:	4b17      	ldr	r3, [pc, #92]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc42:	4a18      	ldr	r2, [pc, #96]	; (800bca4 <MX_SPI2_Init+0x68>)
 800bc44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800bc46:	4b16      	ldr	r3, [pc, #88]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc48:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bc4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800bc4e:	4b14      	ldr	r3, [pc, #80]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800bc54:	4b12      	ldr	r3, [pc, #72]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bc5a:	4b11      	ldr	r3, [pc, #68]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bc60:	4b0f      	ldr	r3, [pc, #60]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800bc66:	4b0e      	ldr	r3, [pc, #56]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bc6e:	4b0c      	ldr	r3, [pc, #48]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bc74:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800bc7a:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800bc86:	4b06      	ldr	r3, [pc, #24]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc88:	220a      	movs	r2, #10
 800bc8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800bc8c:	4804      	ldr	r0, [pc, #16]	; (800bca0 <MX_SPI2_Init+0x64>)
 800bc8e:	f7f7 fb29 	bl	80032e4 <HAL_SPI_Init>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800bc98:	f7ff ff5c 	bl	800bb54 <Error_Handler>
  }

}
 800bc9c:	bf00      	nop
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	20002324 	.word	0x20002324
 800bca4:	40003800 	.word	0x40003800

0800bca8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b088      	sub	sp, #32
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcb0:	f107 0310 	add.w	r3, r7, #16
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	601a      	str	r2, [r3, #0]
 800bcb8:	605a      	str	r2, [r3, #4]
 800bcba:	609a      	str	r2, [r3, #8]
 800bcbc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a1c      	ldr	r2, [pc, #112]	; (800bd34 <HAL_SPI_MspInit+0x8c>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d131      	bne.n	800bd2c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800bcc8:	4b1b      	ldr	r3, [pc, #108]	; (800bd38 <HAL_SPI_MspInit+0x90>)
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	4a1a      	ldr	r2, [pc, #104]	; (800bd38 <HAL_SPI_MspInit+0x90>)
 800bcce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bcd2:	61d3      	str	r3, [r2, #28]
 800bcd4:	4b18      	ldr	r3, [pc, #96]	; (800bd38 <HAL_SPI_MspInit+0x90>)
 800bcd6:	69db      	ldr	r3, [r3, #28]
 800bcd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcdc:	60fb      	str	r3, [r7, #12]
 800bcde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bce0:	4b15      	ldr	r3, [pc, #84]	; (800bd38 <HAL_SPI_MspInit+0x90>)
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	4a14      	ldr	r2, [pc, #80]	; (800bd38 <HAL_SPI_MspInit+0x90>)
 800bce6:	f043 0308 	orr.w	r3, r3, #8
 800bcea:	6193      	str	r3, [r2, #24]
 800bcec:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <HAL_SPI_MspInit+0x90>)
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	f003 0308 	and.w	r3, r3, #8
 800bcf4:	60bb      	str	r3, [r7, #8]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800bcf8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800bcfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcfe:	2302      	movs	r3, #2
 800bd00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd02:	2303      	movs	r3, #3
 800bd04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd06:	f107 0310 	add.w	r3, r7, #16
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	480b      	ldr	r0, [pc, #44]	; (800bd3c <HAL_SPI_MspInit+0x94>)
 800bd0e:	f7f4 ffdd 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800bd12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bd16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd20:	f107 0310 	add.w	r3, r7, #16
 800bd24:	4619      	mov	r1, r3
 800bd26:	4805      	ldr	r0, [pc, #20]	; (800bd3c <HAL_SPI_MspInit+0x94>)
 800bd28:	f7f4 ffd0 	bl	8000ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800bd2c:	bf00      	nop
 800bd2e:	3720      	adds	r7, #32
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	40003800 	.word	0x40003800
 800bd38:	40021000 	.word	0x40021000
 800bd3c:	40010c00 	.word	0x40010c00

0800bd40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800bd46:	4b15      	ldr	r3, [pc, #84]	; (800bd9c <HAL_MspInit+0x5c>)
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	4a14      	ldr	r2, [pc, #80]	; (800bd9c <HAL_MspInit+0x5c>)
 800bd4c:	f043 0301 	orr.w	r3, r3, #1
 800bd50:	6193      	str	r3, [r2, #24]
 800bd52:	4b12      	ldr	r3, [pc, #72]	; (800bd9c <HAL_MspInit+0x5c>)
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	60bb      	str	r3, [r7, #8]
 800bd5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bd5e:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <HAL_MspInit+0x5c>)
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	4a0e      	ldr	r2, [pc, #56]	; (800bd9c <HAL_MspInit+0x5c>)
 800bd64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd68:	61d3      	str	r3, [r2, #28]
 800bd6a:	4b0c      	ldr	r3, [pc, #48]	; (800bd9c <HAL_MspInit+0x5c>)
 800bd6c:	69db      	ldr	r3, [r3, #28]
 800bd6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd72:	607b      	str	r3, [r7, #4]
 800bd74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800bd76:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <HAL_MspInit+0x60>)
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bd8a:	60fb      	str	r3, [r7, #12]
 800bd8c:	4a04      	ldr	r2, [pc, #16]	; (800bda0 <HAL_MspInit+0x60>)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bd92:	bf00      	nop
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bc80      	pop	{r7}
 800bd9a:	4770      	bx	lr
 800bd9c:	40021000 	.word	0x40021000
 800bda0:	40010000 	.word	0x40010000

0800bda4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b08c      	sub	sp, #48	; 0x30
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	2019      	movs	r0, #25
 800bdba:	f7f4 fcdc 	bl	8000776 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800bdbe:	2019      	movs	r0, #25
 800bdc0:	f7f4 fcf5 	bl	80007ae <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800bdc4:	4b1e      	ldr	r3, [pc, #120]	; (800be40 <HAL_InitTick+0x9c>)
 800bdc6:	699b      	ldr	r3, [r3, #24]
 800bdc8:	4a1d      	ldr	r2, [pc, #116]	; (800be40 <HAL_InitTick+0x9c>)
 800bdca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bdce:	6193      	str	r3, [r2, #24]
 800bdd0:	4b1b      	ldr	r3, [pc, #108]	; (800be40 <HAL_InitTick+0x9c>)
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bddc:	f107 0210 	add.w	r2, r7, #16
 800bde0:	f107 0314 	add.w	r3, r7, #20
 800bde4:	4611      	mov	r1, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7f6 fd14 	bl	8002814 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800bdec:	f7f6 fcfe 	bl	80027ec <HAL_RCC_GetPCLK2Freq>
 800bdf0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	4a13      	ldr	r2, [pc, #76]	; (800be44 <HAL_InitTick+0xa0>)
 800bdf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfa:	0c9b      	lsrs	r3, r3, #18
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800be00:	4b11      	ldr	r3, [pc, #68]	; (800be48 <HAL_InitTick+0xa4>)
 800be02:	4a12      	ldr	r2, [pc, #72]	; (800be4c <HAL_InitTick+0xa8>)
 800be04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800be06:	4b10      	ldr	r3, [pc, #64]	; (800be48 <HAL_InitTick+0xa4>)
 800be08:	f240 32e7 	movw	r2, #999	; 0x3e7
 800be0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800be0e:	4a0e      	ldr	r2, [pc, #56]	; (800be48 <HAL_InitTick+0xa4>)
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800be14:	4b0c      	ldr	r3, [pc, #48]	; (800be48 <HAL_InitTick+0xa4>)
 800be16:	2200      	movs	r2, #0
 800be18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800be1a:	4b0b      	ldr	r3, [pc, #44]	; (800be48 <HAL_InitTick+0xa4>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800be20:	4809      	ldr	r0, [pc, #36]	; (800be48 <HAL_InitTick+0xa4>)
 800be22:	f7f7 fac0 	bl	80033a6 <HAL_TIM_Base_Init>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d104      	bne.n	800be36 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800be2c:	4806      	ldr	r0, [pc, #24]	; (800be48 <HAL_InitTick+0xa4>)
 800be2e:	f7f7 fae5 	bl	80033fc <HAL_TIM_Base_Start_IT>
 800be32:	4603      	mov	r3, r0
 800be34:	e000      	b.n	800be38 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3730      	adds	r7, #48	; 0x30
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	40021000 	.word	0x40021000
 800be44:	431bde83 	.word	0x431bde83
 800be48:	2000237c 	.word	0x2000237c
 800be4c:	40012c00 	.word	0x40012c00

0800be50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800be54:	f7f6 fd0e 	bl	8002874 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800be58:	bf00      	nop
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800be5c:	b480      	push	{r7}
 800be5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800be60:	e7fe      	b.n	800be60 <HardFault_Handler+0x4>

0800be62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800be62:	b480      	push	{r7}
 800be64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800be66:	e7fe      	b.n	800be66 <MemManage_Handler+0x4>

0800be68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800be68:	b480      	push	{r7}
 800be6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800be6c:	e7fe      	b.n	800be6c <BusFault_Handler+0x4>

0800be6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800be6e:	b480      	push	{r7}
 800be70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800be72:	e7fe      	b.n	800be72 <UsageFault_Handler+0x4>

0800be74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800be74:	b480      	push	{r7}
 800be76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800be78:	bf00      	nop
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bc80      	pop	{r7}
 800be7e:	4770      	bx	lr

0800be80 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800be84:	4802      	ldr	r0, [pc, #8]	; (800be90 <DMA1_Channel4_IRQHandler+0x10>)
 800be86:	f7f4 fded 	bl	8000a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800be8a:	bf00      	nop
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	2000247c 	.word	0x2000247c

0800be94 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800be98:	4802      	ldr	r0, [pc, #8]	; (800bea4 <DMA1_Channel5_IRQHandler+0x10>)
 800be9a:	f7f4 fde3 	bl	8000a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800be9e:	bf00      	nop
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	200024c0 	.word	0x200024c0

0800bea8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800beac:	4802      	ldr	r0, [pc, #8]	; (800beb8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800beae:	f7f5 fb17 	bl	80014e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800beb2:	bf00      	nop
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	20002808 	.word	0x20002808

0800bebc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bec0:	4802      	ldr	r0, [pc, #8]	; (800becc <TIM1_UP_IRQHandler+0x10>)
 800bec2:	f7f7 fbb3 	bl	800362c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800bec6:	bf00      	nop
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	2000237c 	.word	0x2000237c

0800bed0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800bed4:	4802      	ldr	r0, [pc, #8]	; (800bee0 <USART1_IRQHandler+0x10>)
 800bed6:	f7f8 fa87 	bl	80043e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800beda:	bf00      	nop
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	20002504 	.word	0x20002504

0800bee4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bee4:	b480      	push	{r7}
 800bee6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800bee8:	4b15      	ldr	r3, [pc, #84]	; (800bf40 <SystemInit+0x5c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a14      	ldr	r2, [pc, #80]	; (800bf40 <SystemInit+0x5c>)
 800beee:	f043 0301 	orr.w	r3, r3, #1
 800bef2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800bef4:	4b12      	ldr	r3, [pc, #72]	; (800bf40 <SystemInit+0x5c>)
 800bef6:	685a      	ldr	r2, [r3, #4]
 800bef8:	4911      	ldr	r1, [pc, #68]	; (800bf40 <SystemInit+0x5c>)
 800befa:	4b12      	ldr	r3, [pc, #72]	; (800bf44 <SystemInit+0x60>)
 800befc:	4013      	ands	r3, r2
 800befe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800bf00:	4b0f      	ldr	r3, [pc, #60]	; (800bf40 <SystemInit+0x5c>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a0e      	ldr	r2, [pc, #56]	; (800bf40 <SystemInit+0x5c>)
 800bf06:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bf0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf0e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bf10:	4b0b      	ldr	r3, [pc, #44]	; (800bf40 <SystemInit+0x5c>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a0a      	ldr	r2, [pc, #40]	; (800bf40 <SystemInit+0x5c>)
 800bf16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800bf1c:	4b08      	ldr	r3, [pc, #32]	; (800bf40 <SystemInit+0x5c>)
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	4a07      	ldr	r2, [pc, #28]	; (800bf40 <SystemInit+0x5c>)
 800bf22:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800bf26:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800bf28:	4b05      	ldr	r3, [pc, #20]	; (800bf40 <SystemInit+0x5c>)
 800bf2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800bf2e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800bf30:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <SystemInit+0x64>)
 800bf32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bf36:	609a      	str	r2, [r3, #8]
#endif 
}
 800bf38:	bf00      	nop
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bc80      	pop	{r7}
 800bf3e:	4770      	bx	lr
 800bf40:	40021000 	.word	0x40021000
 800bf44:	f8ff0000 	.word	0xf8ff0000
 800bf48:	e000ed00 	.word	0xe000ed00

0800bf4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	; 0x38
 800bf50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bf52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf56:	2200      	movs	r2, #0
 800bf58:	601a      	str	r2, [r3, #0]
 800bf5a:	605a      	str	r2, [r3, #4]
 800bf5c:	609a      	str	r2, [r3, #8]
 800bf5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bf60:	f107 0320 	add.w	r3, r7, #32
 800bf64:	2200      	movs	r2, #0
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bf6a:	1d3b      	adds	r3, r7, #4
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	605a      	str	r2, [r3, #4]
 800bf72:	609a      	str	r2, [r3, #8]
 800bf74:	60da      	str	r2, [r3, #12]
 800bf76:	611a      	str	r2, [r3, #16]
 800bf78:	615a      	str	r2, [r3, #20]
 800bf7a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800bf7c:	4b3e      	ldr	r3, [pc, #248]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bf7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bf82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 800bf84:	4b3c      	ldr	r3, [pc, #240]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bf86:	f240 529f 	movw	r2, #1439	; 0x59f
 800bf8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf8c:	4b3a      	ldr	r3, [pc, #232]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800bf92:	4b39      	ldr	r3, [pc, #228]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bf94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bf9a:	4b37      	ldr	r3, [pc, #220]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bfa0:	4b35      	ldr	r3, [pc, #212]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800bfa6:	4834      	ldr	r0, [pc, #208]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bfa8:	f7f7 f9fd 	bl	80033a6 <HAL_TIM_Base_Init>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800bfb2:	f7ff fdcf 	bl	800bb54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bfb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800bfbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	482d      	ldr	r0, [pc, #180]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bfc4:	f7f7 fd00 	bl	80039c8 <HAL_TIM_ConfigClockSource>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800bfce:	f7ff fdc1 	bl	800bb54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800bfd2:	4829      	ldr	r0, [pc, #164]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bfd4:	f7f7 fa35 	bl	8003442 <HAL_TIM_PWM_Init>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800bfde:	f7ff fdb9 	bl	800bb54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bfea:	f107 0320 	add.w	r3, r7, #32
 800bfee:	4619      	mov	r1, r3
 800bff0:	4821      	ldr	r0, [pc, #132]	; (800c078 <MX_TIM2_Init+0x12c>)
 800bff2:	f7f8 f869 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d001      	beq.n	800c000 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800bffc:	f7ff fdaa 	bl	800bb54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c000:	2360      	movs	r3, #96	; 0x60
 800c002:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c008:	2300      	movs	r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c010:	1d3b      	adds	r3, r7, #4
 800c012:	2200      	movs	r2, #0
 800c014:	4619      	mov	r1, r3
 800c016:	4818      	ldr	r0, [pc, #96]	; (800c078 <MX_TIM2_Init+0x12c>)
 800c018:	f7f7 fc10 	bl	800383c <HAL_TIM_PWM_ConfigChannel>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800c022:	f7ff fd97 	bl	800bb54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c026:	1d3b      	adds	r3, r7, #4
 800c028:	2204      	movs	r2, #4
 800c02a:	4619      	mov	r1, r3
 800c02c:	4812      	ldr	r0, [pc, #72]	; (800c078 <MX_TIM2_Init+0x12c>)
 800c02e:	f7f7 fc05 	bl	800383c <HAL_TIM_PWM_ConfigChannel>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800c038:	f7ff fd8c 	bl	800bb54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c03c:	1d3b      	adds	r3, r7, #4
 800c03e:	2208      	movs	r2, #8
 800c040:	4619      	mov	r1, r3
 800c042:	480d      	ldr	r0, [pc, #52]	; (800c078 <MX_TIM2_Init+0x12c>)
 800c044:	f7f7 fbfa 	bl	800383c <HAL_TIM_PWM_ConfigChannel>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800c04e:	f7ff fd81 	bl	800bb54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c052:	1d3b      	adds	r3, r7, #4
 800c054:	220c      	movs	r2, #12
 800c056:	4619      	mov	r1, r3
 800c058:	4807      	ldr	r0, [pc, #28]	; (800c078 <MX_TIM2_Init+0x12c>)
 800c05a:	f7f7 fbef 	bl	800383c <HAL_TIM_PWM_ConfigChannel>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d001      	beq.n	800c068 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 800c064:	f7ff fd76 	bl	800bb54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800c068:	4803      	ldr	r0, [pc, #12]	; (800c078 <MX_TIM2_Init+0x12c>)
 800c06a:	f000 f937 	bl	800c2dc <HAL_TIM_MspPostInit>

}
 800c06e:	bf00      	nop
 800c070:	3738      	adds	r7, #56	; 0x38
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	2000243c 	.word	0x2000243c

0800c07c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b08c      	sub	sp, #48	; 0x30
 800c080:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c082:	f107 030c 	add.w	r3, r7, #12
 800c086:	2224      	movs	r2, #36	; 0x24
 800c088:	2100      	movs	r1, #0
 800c08a:	4618      	mov	r0, r3
 800c08c:	f000 ff7b 	bl	800cf86 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c090:	1d3b      	adds	r3, r7, #4
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800c098:	4b20      	ldr	r3, [pc, #128]	; (800c11c <MX_TIM3_Init+0xa0>)
 800c09a:	4a21      	ldr	r2, [pc, #132]	; (800c120 <MX_TIM3_Init+0xa4>)
 800c09c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800c09e:	4b1f      	ldr	r3, [pc, #124]	; (800c11c <MX_TIM3_Init+0xa0>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c0a4:	4b1d      	ldr	r3, [pc, #116]	; (800c11c <MX_TIM3_Init+0xa0>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800c0aa:	4b1c      	ldr	r3, [pc, #112]	; (800c11c <MX_TIM3_Init+0xa0>)
 800c0ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c0b2:	4b1a      	ldr	r3, [pc, #104]	; (800c11c <MX_TIM3_Init+0xa0>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c0b8:	4b18      	ldr	r3, [pc, #96]	; (800c11c <MX_TIM3_Init+0xa0>)
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800c0e2:	f107 030c 	add.w	r3, r7, #12
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	480c      	ldr	r0, [pc, #48]	; (800c11c <MX_TIM3_Init+0xa0>)
 800c0ea:	f7f7 fa11 	bl	8003510 <HAL_TIM_Encoder_Init>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d001      	beq.n	800c0f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800c0f4:	f7ff fd2e 	bl	800bb54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c100:	1d3b      	adds	r3, r7, #4
 800c102:	4619      	mov	r1, r3
 800c104:	4805      	ldr	r0, [pc, #20]	; (800c11c <MX_TIM3_Init+0xa0>)
 800c106:	f7f7 ffdf 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800c110:	f7ff fd20 	bl	800bb54 <Error_Handler>
  }

}
 800c114:	bf00      	nop
 800c116:	3730      	adds	r7, #48	; 0x30
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	200023fc 	.word	0x200023fc
 800c120:	40000400 	.word	0x40000400

0800c124 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b08c      	sub	sp, #48	; 0x30
 800c128:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	2224      	movs	r2, #36	; 0x24
 800c130:	2100      	movs	r1, #0
 800c132:	4618      	mov	r0, r3
 800c134:	f000 ff27 	bl	800cf86 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c138:	1d3b      	adds	r3, r7, #4
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800c140:	4b20      	ldr	r3, [pc, #128]	; (800c1c4 <MX_TIM4_Init+0xa0>)
 800c142:	4a21      	ldr	r2, [pc, #132]	; (800c1c8 <MX_TIM4_Init+0xa4>)
 800c144:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800c146:	4b1f      	ldr	r3, [pc, #124]	; (800c1c4 <MX_TIM4_Init+0xa0>)
 800c148:	2200      	movs	r2, #0
 800c14a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c14c:	4b1d      	ldr	r3, [pc, #116]	; (800c1c4 <MX_TIM4_Init+0xa0>)
 800c14e:	2200      	movs	r2, #0
 800c150:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800c152:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <MX_TIM4_Init+0xa0>)
 800c154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c158:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c15a:	4b1a      	ldr	r3, [pc, #104]	; (800c1c4 <MX_TIM4_Init+0xa0>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c160:	4b18      	ldr	r3, [pc, #96]	; (800c1c4 <MX_TIM4_Init+0xa0>)
 800c162:	2200      	movs	r2, #0
 800c164:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800c166:	2301      	movs	r3, #1
 800c168:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800c16a:	2300      	movs	r3, #0
 800c16c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c16e:	2301      	movs	r3, #1
 800c170:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800c172:	2300      	movs	r3, #0
 800c174:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800c17a:	2300      	movs	r3, #0
 800c17c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c17e:	2301      	movs	r3, #1
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800c182:	2300      	movs	r3, #0
 800c184:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800c18a:	f107 030c 	add.w	r3, r7, #12
 800c18e:	4619      	mov	r1, r3
 800c190:	480c      	ldr	r0, [pc, #48]	; (800c1c4 <MX_TIM4_Init+0xa0>)
 800c192:	f7f7 f9bd 	bl	8003510 <HAL_TIM_Encoder_Init>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800c19c:	f7ff fcda 	bl	800bb54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800c1a8:	1d3b      	adds	r3, r7, #4
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4805      	ldr	r0, [pc, #20]	; (800c1c4 <MX_TIM4_Init+0xa0>)
 800c1ae:	f7f7 ff8b 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800c1b8:	f7ff fccc 	bl	800bb54 <Error_Handler>
  }

}
 800c1bc:	bf00      	nop
 800c1be:	3730      	adds	r7, #48	; 0x30
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	200023bc 	.word	0x200023bc
 800c1c8:	40000800 	.word	0x40000800

0800c1cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1dc:	d10b      	bne.n	800c1f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c1de:	4b08      	ldr	r3, [pc, #32]	; (800c200 <HAL_TIM_Base_MspInit+0x34>)
 800c1e0:	69db      	ldr	r3, [r3, #28]
 800c1e2:	4a07      	ldr	r2, [pc, #28]	; (800c200 <HAL_TIM_Base_MspInit+0x34>)
 800c1e4:	f043 0301 	orr.w	r3, r3, #1
 800c1e8:	61d3      	str	r3, [r2, #28]
 800c1ea:	4b05      	ldr	r3, [pc, #20]	; (800c200 <HAL_TIM_Base_MspInit+0x34>)
 800c1ec:	69db      	ldr	r3, [r3, #28]
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bc80      	pop	{r7}
 800c1fe:	4770      	bx	lr
 800c200:	40021000 	.word	0x40021000

0800c204 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b08a      	sub	sp, #40	; 0x28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c20c:	f107 0318 	add.w	r3, r7, #24
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	605a      	str	r2, [r3, #4]
 800c216:	609a      	str	r2, [r3, #8]
 800c218:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a2a      	ldr	r2, [pc, #168]	; (800c2c8 <HAL_TIM_Encoder_MspInit+0xc4>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d124      	bne.n	800c26e <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c224:	4b29      	ldr	r3, [pc, #164]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	4a28      	ldr	r2, [pc, #160]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c22a:	f043 0302 	orr.w	r3, r3, #2
 800c22e:	61d3      	str	r3, [r2, #28]
 800c230:	4b26      	ldr	r3, [pc, #152]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c232:	69db      	ldr	r3, [r3, #28]
 800c234:	f003 0302 	and.w	r3, r3, #2
 800c238:	617b      	str	r3, [r7, #20]
 800c23a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c23c:	4b23      	ldr	r3, [pc, #140]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	4a22      	ldr	r2, [pc, #136]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c242:	f043 0304 	orr.w	r3, r3, #4
 800c246:	6193      	str	r3, [r2, #24]
 800c248:	4b20      	ldr	r3, [pc, #128]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	f003 0304 	and.w	r3, r3, #4
 800c250:	613b      	str	r3, [r7, #16]
 800c252:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c254:	23c0      	movs	r3, #192	; 0xc0
 800c256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c258:	2300      	movs	r3, #0
 800c25a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c25c:	2300      	movs	r3, #0
 800c25e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c260:	f107 0318 	add.w	r3, r7, #24
 800c264:	4619      	mov	r1, r3
 800c266:	481a      	ldr	r0, [pc, #104]	; (800c2d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800c268:	f7f4 fd30 	bl	8000ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800c26c:	e028      	b.n	800c2c0 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM4)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a18      	ldr	r2, [pc, #96]	; (800c2d4 <HAL_TIM_Encoder_MspInit+0xd0>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d123      	bne.n	800c2c0 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c278:	4b14      	ldr	r3, [pc, #80]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c27a:	69db      	ldr	r3, [r3, #28]
 800c27c:	4a13      	ldr	r2, [pc, #76]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c27e:	f043 0304 	orr.w	r3, r3, #4
 800c282:	61d3      	str	r3, [r2, #28]
 800c284:	4b11      	ldr	r3, [pc, #68]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c286:	69db      	ldr	r3, [r3, #28]
 800c288:	f003 0304 	and.w	r3, r3, #4
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c290:	4b0e      	ldr	r3, [pc, #56]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	4a0d      	ldr	r2, [pc, #52]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c296:	f043 0308 	orr.w	r3, r3, #8
 800c29a:	6193      	str	r3, [r2, #24]
 800c29c:	4b0b      	ldr	r3, [pc, #44]	; (800c2cc <HAL_TIM_Encoder_MspInit+0xc8>)
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	f003 0308 	and.w	r3, r3, #8
 800c2a4:	60bb      	str	r3, [r7, #8]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c2a8:	23c0      	movs	r3, #192	; 0xc0
 800c2aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c2b4:	f107 0318 	add.w	r3, r7, #24
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4807      	ldr	r0, [pc, #28]	; (800c2d8 <HAL_TIM_Encoder_MspInit+0xd4>)
 800c2bc:	f7f4 fd06 	bl	8000ccc <HAL_GPIO_Init>
}
 800c2c0:	bf00      	nop
 800c2c2:	3728      	adds	r7, #40	; 0x28
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	40000400 	.word	0x40000400
 800c2cc:	40021000 	.word	0x40021000
 800c2d0:	40010800 	.word	0x40010800
 800c2d4:	40000800 	.word	0x40000800
 800c2d8:	40010c00 	.word	0x40010c00

0800c2dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08a      	sub	sp, #40	; 0x28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2e4:	f107 0314 	add.w	r3, r7, #20
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	605a      	str	r2, [r3, #4]
 800c2ee:	609a      	str	r2, [r3, #8]
 800c2f0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2fa:	d142      	bne.n	800c382 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2fc:	4b23      	ldr	r3, [pc, #140]	; (800c38c <HAL_TIM_MspPostInit+0xb0>)
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	4a22      	ldr	r2, [pc, #136]	; (800c38c <HAL_TIM_MspPostInit+0xb0>)
 800c302:	f043 0304 	orr.w	r3, r3, #4
 800c306:	6193      	str	r3, [r2, #24]
 800c308:	4b20      	ldr	r3, [pc, #128]	; (800c38c <HAL_TIM_MspPostInit+0xb0>)
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	613b      	str	r3, [r7, #16]
 800c312:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c314:	4b1d      	ldr	r3, [pc, #116]	; (800c38c <HAL_TIM_MspPostInit+0xb0>)
 800c316:	699b      	ldr	r3, [r3, #24]
 800c318:	4a1c      	ldr	r2, [pc, #112]	; (800c38c <HAL_TIM_MspPostInit+0xb0>)
 800c31a:	f043 0308 	orr.w	r3, r3, #8
 800c31e:	6193      	str	r3, [r2, #24]
 800c320:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <HAL_TIM_MspPostInit+0xb0>)
 800c322:	699b      	ldr	r3, [r3, #24]
 800c324:	f003 0308 	and.w	r3, r3, #8
 800c328:	60fb      	str	r3, [r7, #12]
 800c32a:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800c32c:	f248 030c 	movw	r3, #32780	; 0x800c
 800c330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c332:	2302      	movs	r3, #2
 800c334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c336:	2302      	movs	r3, #2
 800c338:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c33a:	f107 0314 	add.w	r3, r7, #20
 800c33e:	4619      	mov	r1, r3
 800c340:	4813      	ldr	r0, [pc, #76]	; (800c390 <HAL_TIM_MspPostInit+0xb4>)
 800c342:	f7f4 fcc3 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c346:	2308      	movs	r3, #8
 800c348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c34a:	2302      	movs	r3, #2
 800c34c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c34e:	2302      	movs	r3, #2
 800c350:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c352:	f107 0314 	add.w	r3, r7, #20
 800c356:	4619      	mov	r1, r3
 800c358:	480e      	ldr	r0, [pc, #56]	; (800c394 <HAL_TIM_MspPostInit+0xb8>)
 800c35a:	f7f4 fcb7 	bl	8000ccc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800c35e:	4b0e      	ldr	r3, [pc, #56]	; (800c398 <HAL_TIM_MspPostInit+0xbc>)
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800c372:	627b      	str	r3, [r7, #36]	; 0x24
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c37a:	627b      	str	r3, [r7, #36]	; 0x24
 800c37c:	4a06      	ldr	r2, [pc, #24]	; (800c398 <HAL_TIM_MspPostInit+0xbc>)
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800c382:	bf00      	nop
 800c384:	3728      	adds	r7, #40	; 0x28
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	40021000 	.word	0x40021000
 800c390:	40010800 	.word	0x40010800
 800c394:	40010c00 	.word	0x40010c00
 800c398:	40010000 	.word	0x40010000

0800c39c <Board_PWM_Init>:
  }
}

/* USER CODE BEGIN 1 */
void Board_PWM_Init(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800c3a0:	4b1a      	ldr	r3, [pc, #104]	; (800c40c <Board_PWM_Init+0x70>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800c3a8:	4b18      	ldr	r3, [pc, #96]	; (800c40c <Board_PWM_Init+0x70>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800c3b0:	4b16      	ldr	r3, [pc, #88]	; (800c40c <Board_PWM_Init+0x70>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800c3b8:	4b14      	ldr	r3, [pc, #80]	; (800c40c <Board_PWM_Init+0x70>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	641a      	str	r2, [r3, #64]	; 0x40
  /* Start channel 1 */
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	4812      	ldr	r0, [pc, #72]	; (800c40c <Board_PWM_Init+0x70>)
 800c3c4:	f7f7 f872 	bl	80034ac <HAL_TIM_PWM_Start>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <Board_PWM_Init+0x36>
  {
    /* PWM Generation Error */
    Error_Handler();
 800c3ce:	f7ff fbc1 	bl	800bb54 <Error_Handler>
  }
  /* Start channel 2 */
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 800c3d2:	2104      	movs	r1, #4
 800c3d4:	480d      	ldr	r0, [pc, #52]	; (800c40c <Board_PWM_Init+0x70>)
 800c3d6:	f7f7 f869 	bl	80034ac <HAL_TIM_PWM_Start>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d001      	beq.n	800c3e4 <Board_PWM_Init+0x48>
  {
    /* PWM Generation Error */
    Error_Handler();
 800c3e0:	f7ff fbb8 	bl	800bb54 <Error_Handler>
  }
  /* Start channel 3 */
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK)
 800c3e4:	2108      	movs	r1, #8
 800c3e6:	4809      	ldr	r0, [pc, #36]	; (800c40c <Board_PWM_Init+0x70>)
 800c3e8:	f7f7 f860 	bl	80034ac <HAL_TIM_PWM_Start>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <Board_PWM_Init+0x5a>
  {
    /* PWM generation Error */
    Error_Handler();
 800c3f2:	f7ff fbaf 	bl	800bb54 <Error_Handler>
  }
  /* Start channel 4 */
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 800c3f6:	210c      	movs	r1, #12
 800c3f8:	4804      	ldr	r0, [pc, #16]	; (800c40c <Board_PWM_Init+0x70>)
 800c3fa:	f7f7 f857 	bl	80034ac <HAL_TIM_PWM_Start>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d001      	beq.n	800c408 <Board_PWM_Init+0x6c>
  {
    /* PWM generation Error */
    Error_Handler();
 800c404:	f7ff fba6 	bl	800bb54 <Error_Handler>
  }
}
 800c408:	bf00      	nop
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	2000243c 	.word	0x2000243c

0800c410 <Left_Wheel_Set_Speed>:
void Left_Wheel_Set_Speed(uint32_t speed)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed);
 800c418:	4b04      	ldr	r3, [pc, #16]	; (800c42c <Left_Wheel_Set_Speed+0x1c>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	bc80      	pop	{r7}
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	2000243c 	.word	0x2000243c

0800c430 <Right_Wheel_Set_Speed>:
void Right_Wheel_Set_Speed(uint32_t speed)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 800c438:	4b04      	ldr	r3, [pc, #16]	; (800c44c <Right_Wheel_Set_Speed+0x1c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c440:	bf00      	nop
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	bc80      	pop	{r7}
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	2000243c 	.word	0x2000243c

0800c450 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800c454:	4b11      	ldr	r3, [pc, #68]	; (800c49c <MX_USART1_UART_Init+0x4c>)
 800c456:	4a12      	ldr	r2, [pc, #72]	; (800c4a0 <MX_USART1_UART_Init+0x50>)
 800c458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c45a:	4b10      	ldr	r3, [pc, #64]	; (800c49c <MX_USART1_UART_Init+0x4c>)
 800c45c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c462:	4b0e      	ldr	r3, [pc, #56]	; (800c49c <MX_USART1_UART_Init+0x4c>)
 800c464:	2200      	movs	r2, #0
 800c466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c468:	4b0c      	ldr	r3, [pc, #48]	; (800c49c <MX_USART1_UART_Init+0x4c>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c46e:	4b0b      	ldr	r3, [pc, #44]	; (800c49c <MX_USART1_UART_Init+0x4c>)
 800c470:	2200      	movs	r2, #0
 800c472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c474:	4b09      	ldr	r3, [pc, #36]	; (800c49c <MX_USART1_UART_Init+0x4c>)
 800c476:	220c      	movs	r2, #12
 800c478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c47a:	4b08      	ldr	r3, [pc, #32]	; (800c49c <MX_USART1_UART_Init+0x4c>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c480:	4b06      	ldr	r3, [pc, #24]	; (800c49c <MX_USART1_UART_Init+0x4c>)
 800c482:	2200      	movs	r2, #0
 800c484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c486:	4805      	ldr	r0, [pc, #20]	; (800c49c <MX_USART1_UART_Init+0x4c>)
 800c488:	f7f7 fe74 	bl	8004174 <HAL_UART_Init>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c492:	f7ff fb5f 	bl	800bb54 <Error_Handler>
  }

}
 800c496:	bf00      	nop
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	20002504 	.word	0x20002504
 800c4a0:	40013800 	.word	0x40013800

0800c4a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b088      	sub	sp, #32
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4ac:	f107 0310 	add.w	r3, r7, #16
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	605a      	str	r2, [r3, #4]
 800c4b6:	609a      	str	r2, [r3, #8]
 800c4b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a47      	ldr	r2, [pc, #284]	; (800c5dc <HAL_UART_MspInit+0x138>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	f040 8086 	bne.w	800c5d2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c4c6:	4b46      	ldr	r3, [pc, #280]	; (800c5e0 <HAL_UART_MspInit+0x13c>)
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	4a45      	ldr	r2, [pc, #276]	; (800c5e0 <HAL_UART_MspInit+0x13c>)
 800c4cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4d0:	6193      	str	r3, [r2, #24]
 800c4d2:	4b43      	ldr	r3, [pc, #268]	; (800c5e0 <HAL_UART_MspInit+0x13c>)
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4da:	60fb      	str	r3, [r7, #12]
 800c4dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4de:	4b40      	ldr	r3, [pc, #256]	; (800c5e0 <HAL_UART_MspInit+0x13c>)
 800c4e0:	699b      	ldr	r3, [r3, #24]
 800c4e2:	4a3f      	ldr	r2, [pc, #252]	; (800c5e0 <HAL_UART_MspInit+0x13c>)
 800c4e4:	f043 0304 	orr.w	r3, r3, #4
 800c4e8:	6193      	str	r3, [r2, #24]
 800c4ea:	4b3d      	ldr	r3, [pc, #244]	; (800c5e0 <HAL_UART_MspInit+0x13c>)
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	f003 0304 	and.w	r3, r3, #4
 800c4f2:	60bb      	str	r3, [r7, #8]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c4f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c500:	2303      	movs	r3, #3
 800c502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c504:	f107 0310 	add.w	r3, r7, #16
 800c508:	4619      	mov	r1, r3
 800c50a:	4836      	ldr	r0, [pc, #216]	; (800c5e4 <HAL_UART_MspInit+0x140>)
 800c50c:	f7f4 fbde 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c516:	2300      	movs	r3, #0
 800c518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c51e:	f107 0310 	add.w	r3, r7, #16
 800c522:	4619      	mov	r1, r3
 800c524:	482f      	ldr	r0, [pc, #188]	; (800c5e4 <HAL_UART_MspInit+0x140>)
 800c526:	f7f4 fbd1 	bl	8000ccc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800c52a:	4b2f      	ldr	r3, [pc, #188]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c52c:	4a2f      	ldr	r2, [pc, #188]	; (800c5ec <HAL_UART_MspInit+0x148>)
 800c52e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c530:	4b2d      	ldr	r3, [pc, #180]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c532:	2200      	movs	r2, #0
 800c534:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c536:	4b2c      	ldr	r3, [pc, #176]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c538:	2200      	movs	r2, #0
 800c53a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c53c:	4b2a      	ldr	r3, [pc, #168]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c53e:	2280      	movs	r2, #128	; 0x80
 800c540:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c542:	4b29      	ldr	r3, [pc, #164]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c544:	2200      	movs	r2, #0
 800c546:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c548:	4b27      	ldr	r3, [pc, #156]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800c54e:	4b26      	ldr	r3, [pc, #152]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c550:	2200      	movs	r2, #0
 800c552:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c554:	4b24      	ldr	r3, [pc, #144]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c556:	2200      	movs	r2, #0
 800c558:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800c55a:	4823      	ldr	r0, [pc, #140]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c55c:	f7f4 f952 	bl	8000804 <HAL_DMA_Init>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800c566:	f7ff faf5 	bl	800bb54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a1e      	ldr	r2, [pc, #120]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c56e:	635a      	str	r2, [r3, #52]	; 0x34
 800c570:	4a1d      	ldr	r2, [pc, #116]	; (800c5e8 <HAL_UART_MspInit+0x144>)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800c576:	4b1e      	ldr	r3, [pc, #120]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c578:	4a1e      	ldr	r2, [pc, #120]	; (800c5f4 <HAL_UART_MspInit+0x150>)
 800c57a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c57c:	4b1c      	ldr	r3, [pc, #112]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c57e:	2210      	movs	r2, #16
 800c580:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c582:	4b1b      	ldr	r3, [pc, #108]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c584:	2200      	movs	r2, #0
 800c586:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c588:	4b19      	ldr	r3, [pc, #100]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c58a:	2280      	movs	r2, #128	; 0x80
 800c58c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c58e:	4b18      	ldr	r3, [pc, #96]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c590:	2200      	movs	r2, #0
 800c592:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c594:	4b16      	ldr	r3, [pc, #88]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c596:	2200      	movs	r2, #0
 800c598:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800c59a:	4b15      	ldr	r3, [pc, #84]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c59c:	2200      	movs	r2, #0
 800c59e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c5a0:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800c5a6:	4812      	ldr	r0, [pc, #72]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c5a8:	f7f4 f92c 	bl	8000804 <HAL_DMA_Init>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800c5b2:	f7ff facf 	bl	800bb54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a0d      	ldr	r2, [pc, #52]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c5ba:	631a      	str	r2, [r3, #48]	; 0x30
 800c5bc:	4a0c      	ldr	r2, [pc, #48]	; (800c5f0 <HAL_UART_MspInit+0x14c>)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	2025      	movs	r0, #37	; 0x25
 800c5c8:	f7f4 f8d5 	bl	8000776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c5cc:	2025      	movs	r0, #37	; 0x25
 800c5ce:	f7f4 f8ee 	bl	80007ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c5d2:	bf00      	nop
 800c5d4:	3720      	adds	r7, #32
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	40013800 	.word	0x40013800
 800c5e0:	40021000 	.word	0x40021000
 800c5e4:	40010800 	.word	0x40010800
 800c5e8:	200024c0 	.word	0x200024c0
 800c5ec:	40020058 	.word	0x40020058
 800c5f0:	2000247c 	.word	0x2000247c
 800c5f4:	40020044 	.word	0x40020044

0800c5f8 <Board_USART_Init>:

/* USER CODE BEGIN 1 */


void Board_USART_Init(void)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	af00      	add	r7, sp, #0

}
 800c5fc:	bf00      	nop
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bc80      	pop	{r7}
 800c602:	4770      	bx	lr

0800c604 <PC_SerialPort_Transmit_Data>:

void PC_SerialPort_Transmit_Data(uint8_t *tx_data, uint32_t tx_len)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  if(HAL_UART_Transmit_DMA(&huart1, tx_data, tx_len)!= HAL_OK)
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	b29b      	uxth	r3, r3
 800c612:	461a      	mov	r2, r3
 800c614:	6879      	ldr	r1, [r7, #4]
 800c616:	4806      	ldr	r0, [pc, #24]	; (800c630 <PC_SerialPort_Transmit_Data+0x2c>)
 800c618:	f7f7 fdfa 	bl	8004210 <HAL_UART_Transmit_DMA>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d001      	beq.n	800c626 <PC_SerialPort_Transmit_Data+0x22>
  {
    Error_Handler();
 800c622:	f7ff fa97 	bl	800bb54 <Error_Handler>
  }
}
 800c626:	bf00      	nop
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20002504 	.word	0x20002504

0800c634 <PC_SerialPort_Receive_Data>:
void PC_SerialPort_Receive_Data(uint8_t *rx_data, uint32_t rx_len)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  if(HAL_UART_Receive_DMA(&huart1, rx_data, rx_len) != HAL_OK)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	b29b      	uxth	r3, r3
 800c642:	461a      	mov	r2, r3
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	4806      	ldr	r0, [pc, #24]	; (800c660 <PC_SerialPort_Receive_Data+0x2c>)
 800c648:	f7f7 fe4e 	bl	80042e8 <HAL_UART_Receive_DMA>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <PC_SerialPort_Receive_Data+0x22>
  {
    Error_Handler();
 800c652:	f7ff fa7f 	bl	800bb54 <Error_Handler>
  }
}
 800c656:	bf00      	nop
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	20002504 	.word	0x20002504

0800c664 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and 
  *         you can add your own implementation. 
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	bc80      	pop	{r7}
 800c674:	4770      	bx	lr

0800c676 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and 
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]

}
 800c67e:	bf00      	nop
 800c680:	370c      	adds	r7, #12
 800c682:	46bd      	mov	sp, r7
 800c684:	bc80      	pop	{r7}
 800c686:	4770      	bx	lr

0800c688 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c68c:	2200      	movs	r2, #0
 800c68e:	4912      	ldr	r1, [pc, #72]	; (800c6d8 <MX_USB_DEVICE_Init+0x50>)
 800c690:	4812      	ldr	r0, [pc, #72]	; (800c6dc <MX_USB_DEVICE_Init+0x54>)
 800c692:	f7fa f8ed 	bl	8006870 <USBD_Init>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c69c:	f7ff fa5a 	bl	800bb54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800c6a0:	490f      	ldr	r1, [pc, #60]	; (800c6e0 <MX_USB_DEVICE_Init+0x58>)
 800c6a2:	480e      	ldr	r0, [pc, #56]	; (800c6dc <MX_USB_DEVICE_Init+0x54>)
 800c6a4:	f7fa f90f 	bl	80068c6 <USBD_RegisterClass>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c6ae:	f7ff fa51 	bl	800bb54 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800c6b2:	490c      	ldr	r1, [pc, #48]	; (800c6e4 <MX_USB_DEVICE_Init+0x5c>)
 800c6b4:	4809      	ldr	r0, [pc, #36]	; (800c6dc <MX_USB_DEVICE_Init+0x54>)
 800c6b6:	f7f9 fd73 	bl	80061a0 <USBD_DFU_RegisterMedia>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c6c0:	f7ff fa48 	bl	800bb54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c6c4:	4805      	ldr	r0, [pc, #20]	; (800c6dc <MX_USB_DEVICE_Init+0x54>)
 800c6c6:	f7fa f917 	bl	80068f8 <USBD_Start>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d001      	beq.n	800c6d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c6d0:	f7ff fa40 	bl	800bb54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6d4:	bf00      	nop
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	20000074 	.word	0x20000074
 800c6dc:	20002544 	.word	0x20002544
 800c6e0:	20000008 	.word	0x20000008
 800c6e4:	200000c4 	.word	0x200000c4

0800c6e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a0d      	ldr	r2, [pc, #52]	; (800c72c <HAL_PCD_MspInit+0x44>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d113      	bne.n	800c722 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c6fa:	4b0d      	ldr	r3, [pc, #52]	; (800c730 <HAL_PCD_MspInit+0x48>)
 800c6fc:	69db      	ldr	r3, [r3, #28]
 800c6fe:	4a0c      	ldr	r2, [pc, #48]	; (800c730 <HAL_PCD_MspInit+0x48>)
 800c700:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c704:	61d3      	str	r3, [r2, #28]
 800c706:	4b0a      	ldr	r3, [pc, #40]	; (800c730 <HAL_PCD_MspInit+0x48>)
 800c708:	69db      	ldr	r3, [r3, #28]
 800c70a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c712:	2200      	movs	r2, #0
 800c714:	2100      	movs	r1, #0
 800c716:	2014      	movs	r0, #20
 800c718:	f7f4 f82d 	bl	8000776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c71c:	2014      	movs	r0, #20
 800c71e:	f7f4 f846 	bl	80007ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c722:	bf00      	nop
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	40005c00 	.word	0x40005c00
 800c730:	40021000 	.word	0x40021000

0800c734 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800c748:	4619      	mov	r1, r3
 800c74a:	4610      	mov	r0, r2
 800c74c:	f7fa f932 	bl	80069b4 <USBD_LL_SetupStage>
}
 800c750:	bf00      	nop
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800c76a:	78fb      	ldrb	r3, [r7, #3]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	015b      	lsls	r3, r3, #5
 800c770:	4413      	add	r3, r2
 800c772:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	78fb      	ldrb	r3, [r7, #3]
 800c77a:	4619      	mov	r1, r3
 800c77c:	f7fa f965 	bl	8006a4a <USBD_LL_DataOutStage>
}
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	460b      	mov	r3, r1
 800c792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800c79a:	78fb      	ldrb	r3, [r7, #3]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	015b      	lsls	r3, r3, #5
 800c7a0:	4413      	add	r3, r2
 800c7a2:	333c      	adds	r3, #60	; 0x3c
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	78fb      	ldrb	r3, [r7, #3]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	f7fa f9bf 	bl	8006b2c <USBD_LL_DataInStage>
}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fa facf 	bl	8006d68 <USBD_LL_SOF>
}
 800c7ca:	bf00      	nop
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b084      	sub	sp, #16
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d001      	beq.n	800c7ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c7e6:	f7ff f9b5 	bl	800bb54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c7f0:	7bfa      	ldrb	r2, [r7, #15]
 800c7f2:	4611      	mov	r1, r2
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fa fa7f 	bl	8006cf8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c800:	4618      	mov	r0, r3
 800c802:	f7fa fa38 	bl	8006c76 <USBD_LL_Reset>
}
 800c806:	bf00      	nop
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
	...

0800c810 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fa fa79 	bl	8006d16 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	699b      	ldr	r3, [r3, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d005      	beq.n	800c838 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c82c:	4b04      	ldr	r3, [pc, #16]	; (800c840 <HAL_PCD_SuspendCallback+0x30>)
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	4a03      	ldr	r2, [pc, #12]	; (800c840 <HAL_PCD_SuspendCallback+0x30>)
 800c832:	f043 0306 	orr.w	r3, r3, #6
 800c836:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c838:	bf00      	nop
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	e000ed00 	.word	0xe000ed00

0800c844 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c852:	4618      	mov	r0, r3
 800c854:	f7fa fa73 	bl	8006d3e <USBD_LL_Resume>
}
 800c858:	bf00      	nop
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c868:	4a1b      	ldr	r2, [pc, #108]	; (800c8d8 <USBD_LL_Init+0x78>)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a19      	ldr	r2, [pc, #100]	; (800c8d8 <USBD_LL_Init+0x78>)
 800c874:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c878:	4b17      	ldr	r3, [pc, #92]	; (800c8d8 <USBD_LL_Init+0x78>)
 800c87a:	4a18      	ldr	r2, [pc, #96]	; (800c8dc <USBD_LL_Init+0x7c>)
 800c87c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c87e:	4b16      	ldr	r3, [pc, #88]	; (800c8d8 <USBD_LL_Init+0x78>)
 800c880:	2208      	movs	r2, #8
 800c882:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c884:	4b14      	ldr	r3, [pc, #80]	; (800c8d8 <USBD_LL_Init+0x78>)
 800c886:	2202      	movs	r2, #2
 800c888:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c88a:	4b13      	ldr	r3, [pc, #76]	; (800c8d8 <USBD_LL_Init+0x78>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c890:	4b11      	ldr	r3, [pc, #68]	; (800c8d8 <USBD_LL_Init+0x78>)
 800c892:	2200      	movs	r2, #0
 800c894:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c896:	4b10      	ldr	r3, [pc, #64]	; (800c8d8 <USBD_LL_Init+0x78>)
 800c898:	2200      	movs	r2, #0
 800c89a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c89c:	480e      	ldr	r0, [pc, #56]	; (800c8d8 <USBD_LL_Init+0x78>)
 800c89e:	f7f4 fce8 	bl	8001272 <HAL_PCD_Init>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d001      	beq.n	800c8ac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c8a8:	f7ff f954 	bl	800bb54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8b2:	2318      	movs	r3, #24
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	f7f5 fb5a 	bl	8001f70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8c2:	2358      	movs	r3, #88	; 0x58
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2180      	movs	r1, #128	; 0x80
 800c8c8:	f7f5 fb52 	bl	8001f70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	20002808 	.word	0x20002808
 800c8dc:	40005c00 	.word	0x40005c00

0800c8e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7f4 fd9c 	bl	8001434 <HAL_PCD_Start>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c900:	7bfb      	ldrb	r3, [r7, #15]
 800c902:	4618      	mov	r0, r3
 800c904:	f000 f930 	bl	800cb68 <USBD_Get_USB_Status>
 800c908:	4603      	mov	r3, r0
 800c90a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c90c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c922:	2300      	movs	r3, #0
 800c924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7f4 fda7 	bl	8001480 <HAL_PCD_Stop>
 800c932:	4603      	mov	r3, r0
 800c934:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 f915 	bl	800cb68 <USBD_Get_USB_Status>
 800c93e:	4603      	mov	r3, r0
 800c940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c942:	7bbb      	ldrb	r3, [r7, #14]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	4608      	mov	r0, r1
 800c956:	4611      	mov	r1, r2
 800c958:	461a      	mov	r2, r3
 800c95a:	4603      	mov	r3, r0
 800c95c:	70fb      	strb	r3, [r7, #3]
 800c95e:	460b      	mov	r3, r1
 800c960:	70bb      	strb	r3, [r7, #2]
 800c962:	4613      	mov	r3, r2
 800c964:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c96a:	2300      	movs	r3, #0
 800c96c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c974:	78bb      	ldrb	r3, [r7, #2]
 800c976:	883a      	ldrh	r2, [r7, #0]
 800c978:	78f9      	ldrb	r1, [r7, #3]
 800c97a:	f7f4 fee4 	bl	8001746 <HAL_PCD_EP_Open>
 800c97e:	4603      	mov	r3, r0
 800c980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c982:	7bfb      	ldrb	r3, [r7, #15]
 800c984:	4618      	mov	r0, r3
 800c986:	f000 f8ef 	bl	800cb68 <USBD_Get_USB_Status>
 800c98a:	4603      	mov	r3, r0
 800c98c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c98e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9b2:	78fa      	ldrb	r2, [r7, #3]
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7f4 ff98 	bl	80018ec <HAL_PCD_EP_SetStall>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 f8d0 	bl	800cb68 <USBD_Get_USB_Status>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	460b      	mov	r3, r1
 800c9e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9f0:	78fa      	ldrb	r2, [r7, #3]
 800c9f2:	4611      	mov	r1, r2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7f4 ffd3 	bl	80019a0 <HAL_PCD_EP_ClrStall>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 f8b1 	bl	800cb68 <USBD_Get_USB_Status>
 800ca06:	4603      	mov	r3, r0
 800ca08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	da08      	bge.n	800ca42 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca30:	78fb      	ldrb	r3, [r7, #3]
 800ca32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	015b      	lsls	r3, r3, #5
 800ca3a:	4413      	add	r3, r2
 800ca3c:	332a      	adds	r3, #42	; 0x2a
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	e008      	b.n	800ca54 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca42:	78fb      	ldrb	r3, [r7, #3]
 800ca44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	015b      	lsls	r3, r3, #5
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800ca52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3714      	adds	r7, #20
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bc80      	pop	{r7}
 800ca5c:	4770      	bx	lr

0800ca5e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b084      	sub	sp, #16
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	460b      	mov	r3, r1
 800ca68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca78:	78fa      	ldrb	r2, [r7, #3]
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7f4 fe3d 	bl	80016fc <HAL_PCD_SetAddress>
 800ca82:	4603      	mov	r3, r0
 800ca84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 f86d 	bl	800cb68 <USBD_Get_USB_Status>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	607a      	str	r2, [r7, #4]
 800caa6:	461a      	mov	r2, r3
 800caa8:	460b      	mov	r3, r1
 800caaa:	72fb      	strb	r3, [r7, #11]
 800caac:	4613      	mov	r3, r2
 800caae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cab4:	2300      	movs	r3, #0
 800cab6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cabe:	893b      	ldrh	r3, [r7, #8]
 800cac0:	7af9      	ldrb	r1, [r7, #11]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	f7f4 fed9 	bl	800187a <HAL_PCD_EP_Transmit>
 800cac8:	4603      	mov	r3, r0
 800caca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cacc:	7dfb      	ldrb	r3, [r7, #23]
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 f84a 	bl	800cb68 <USBD_Get_USB_Status>
 800cad4:	4603      	mov	r3, r0
 800cad6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cad8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b086      	sub	sp, #24
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	60f8      	str	r0, [r7, #12]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	461a      	mov	r2, r3
 800caee:	460b      	mov	r3, r1
 800caf0:	72fb      	strb	r3, [r7, #11]
 800caf2:	4613      	mov	r3, r2
 800caf4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf6:	2300      	movs	r3, #0
 800caf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb04:	893b      	ldrh	r3, [r7, #8]
 800cb06:	7af9      	ldrb	r1, [r7, #11]
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	f7f4 fe7c 	bl	8001806 <HAL_PCD_EP_Receive>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb12:	7dfb      	ldrb	r3, [r7, #23]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 f827 	bl	800cb68 <USBD_Get_USB_Status>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb1e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3718      	adds	r7, #24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb30:	4b02      	ldr	r3, [pc, #8]	; (800cb3c <USBD_static_malloc+0x14>)
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bc80      	pop	{r7}
 800cb3a:	4770      	bx	lr
 800cb3c:	20001b04 	.word	0x20001b04

0800cb40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]

}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bc80      	pop	{r7}
 800cb50:	4770      	bx	lr

0800cb52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb52:	b480      	push	{r7}
 800cb54:	b083      	sub	sp, #12
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cb5e:	bf00      	nop
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bc80      	pop	{r7}
 800cb66:	4770      	bx	lr

0800cb68 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb76:	79fb      	ldrb	r3, [r7, #7]
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d817      	bhi.n	800cbac <USBD_Get_USB_Status+0x44>
 800cb7c:	a201      	add	r2, pc, #4	; (adr r2, 800cb84 <USBD_Get_USB_Status+0x1c>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cb95 	.word	0x0800cb95
 800cb88:	0800cb9b 	.word	0x0800cb9b
 800cb8c:	0800cba1 	.word	0x0800cba1
 800cb90:	0800cba7 	.word	0x0800cba7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73fb      	strb	r3, [r7, #15]
    break;
 800cb98:	e00b      	b.n	800cbb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb9e:	e008      	b.n	800cbb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cba0:	2301      	movs	r3, #1
 800cba2:	73fb      	strb	r3, [r7, #15]
    break;
 800cba4:	e005      	b.n	800cbb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cba6:	2302      	movs	r3, #2
 800cba8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbaa:	e002      	b.n	800cbb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cbac:	2302      	movs	r3, #2
 800cbae:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb0:	bf00      	nop
  }
  return usb_status;
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3714      	adds	r7, #20
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bc80      	pop	{r7}
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop

0800cbc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	6039      	str	r1, [r7, #0]
 800cbca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	2212      	movs	r2, #18
 800cbd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbd2:	4b03      	ldr	r3, [pc, #12]	; (800cbe0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bc80      	pop	{r7}
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	20000090 	.word	0x20000090

0800cbe4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	4603      	mov	r3, r0
 800cbec:	6039      	str	r1, [r7, #0]
 800cbee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2204      	movs	r2, #4
 800cbf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbf6:	4b03      	ldr	r3, [pc, #12]	; (800cc04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bc80      	pop	{r7}
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	200000a4 	.word	0x200000a4

0800cc08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	6039      	str	r1, [r7, #0]
 800cc12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc14:	79fb      	ldrb	r3, [r7, #7]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d105      	bne.n	800cc26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	4907      	ldr	r1, [pc, #28]	; (800cc3c <USBD_FS_ProductStrDescriptor+0x34>)
 800cc1e:	4808      	ldr	r0, [pc, #32]	; (800cc40 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc20:	f7fa fdfd 	bl	800781e <USBD_GetString>
 800cc24:	e004      	b.n	800cc30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	4904      	ldr	r1, [pc, #16]	; (800cc3c <USBD_FS_ProductStrDescriptor+0x34>)
 800cc2a:	4805      	ldr	r0, [pc, #20]	; (800cc40 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc2c:	f7fa fdf7 	bl	800781e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc30:	4b02      	ldr	r3, [pc, #8]	; (800cc3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20002a74 	.word	0x20002a74
 800cc40:	0800d0f0 	.word	0x0800d0f0

0800cc44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	6039      	str	r1, [r7, #0]
 800cc4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	4904      	ldr	r1, [pc, #16]	; (800cc64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc54:	4804      	ldr	r0, [pc, #16]	; (800cc68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc56:	f7fa fde2 	bl	800781e <USBD_GetString>
  return USBD_StrDesc;
 800cc5a:	4b02      	ldr	r3, [pc, #8]	; (800cc64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3708      	adds	r7, #8
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	20002a74 	.word	0x20002a74
 800cc68:	0800d110 	.word	0x0800d110

0800cc6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	6039      	str	r1, [r7, #0]
 800cc76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	221a      	movs	r2, #26
 800cc7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc7e:	f000 f843 	bl	800cd08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc82:	4b02      	ldr	r3, [pc, #8]	; (800cc8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	200000a8 	.word	0x200000a8

0800cc90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	6039      	str	r1, [r7, #0]
 800cc9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc9c:	79fb      	ldrb	r3, [r7, #7]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d105      	bne.n	800ccae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cca2:	683a      	ldr	r2, [r7, #0]
 800cca4:	4907      	ldr	r1, [pc, #28]	; (800ccc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cca6:	4808      	ldr	r0, [pc, #32]	; (800ccc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cca8:	f7fa fdb9 	bl	800781e <USBD_GetString>
 800ccac:	e004      	b.n	800ccb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	4904      	ldr	r1, [pc, #16]	; (800ccc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccb2:	4805      	ldr	r0, [pc, #20]	; (800ccc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccb4:	f7fa fdb3 	bl	800781e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccb8:	4b02      	ldr	r3, [pc, #8]	; (800ccc4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20002a74 	.word	0x20002a74
 800ccc8:	0800d124 	.word	0x0800d124

0800cccc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	6039      	str	r1, [r7, #0]
 800ccd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccd8:	79fb      	ldrb	r3, [r7, #7]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d105      	bne.n	800ccea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	4907      	ldr	r1, [pc, #28]	; (800cd00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cce2:	4808      	ldr	r0, [pc, #32]	; (800cd04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cce4:	f7fa fd9b 	bl	800781e <USBD_GetString>
 800cce8:	e004      	b.n	800ccf4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	4904      	ldr	r1, [pc, #16]	; (800cd00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccee:	4805      	ldr	r0, [pc, #20]	; (800cd04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccf0:	f7fa fd95 	bl	800781e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccf4:	4b02      	ldr	r3, [pc, #8]	; (800cd00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	20002a74 	.word	0x20002a74
 800cd04:	0800d130 	.word	0x0800d130

0800cd08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd0e:	4b0f      	ldr	r3, [pc, #60]	; (800cd4c <Get_SerialNum+0x44>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd14:	4b0e      	ldr	r3, [pc, #56]	; (800cd50 <Get_SerialNum+0x48>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd1a:	4b0e      	ldr	r3, [pc, #56]	; (800cd54 <Get_SerialNum+0x4c>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4413      	add	r3, r2
 800cd26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d009      	beq.n	800cd42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd2e:	2208      	movs	r2, #8
 800cd30:	4909      	ldr	r1, [pc, #36]	; (800cd58 <Get_SerialNum+0x50>)
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 f814 	bl	800cd60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd38:	2204      	movs	r2, #4
 800cd3a:	4908      	ldr	r1, [pc, #32]	; (800cd5c <Get_SerialNum+0x54>)
 800cd3c:	68b8      	ldr	r0, [r7, #8]
 800cd3e:	f000 f80f 	bl	800cd60 <IntToUnicode>
  }
}
 800cd42:	bf00      	nop
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	1ffff7e8 	.word	0x1ffff7e8
 800cd50:	1ffff7ec 	.word	0x1ffff7ec
 800cd54:	1ffff7f0 	.word	0x1ffff7f0
 800cd58:	200000aa 	.word	0x200000aa
 800cd5c:	200000ba 	.word	0x200000ba

0800cd60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b087      	sub	sp, #28
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd72:	2300      	movs	r3, #0
 800cd74:	75fb      	strb	r3, [r7, #23]
 800cd76:	e027      	b.n	800cdc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	0f1b      	lsrs	r3, r3, #28
 800cd7c:	2b09      	cmp	r3, #9
 800cd7e:	d80b      	bhi.n	800cd98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	0f1b      	lsrs	r3, r3, #28
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	440b      	add	r3, r1
 800cd90:	3230      	adds	r2, #48	; 0x30
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	701a      	strb	r2, [r3, #0]
 800cd96:	e00a      	b.n	800cdae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	0f1b      	lsrs	r3, r3, #28
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	7dfb      	ldrb	r3, [r7, #23]
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	4619      	mov	r1, r3
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	440b      	add	r3, r1
 800cda8:	3237      	adds	r2, #55	; 0x37
 800cdaa:	b2d2      	uxtb	r2, r2
 800cdac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	011b      	lsls	r3, r3, #4
 800cdb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	005b      	lsls	r3, r3, #1
 800cdb8:	3301      	adds	r3, #1
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdc2:	7dfb      	ldrb	r3, [r7, #23]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	75fb      	strb	r3, [r7, #23]
 800cdc8:	7dfa      	ldrb	r2, [r7, #23]
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d3d3      	bcc.n	800cd78 <IntToUnicode+0x18>
  }
}
 800cdd0:	bf00      	nop
 800cdd2:	371c      	adds	r7, #28
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bc80      	pop	{r7}
 800cdd8:	4770      	bx	lr

0800cdda <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800cdda:	b480      	push	{r7}
 800cddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800cdde:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bc80      	pop	{r7}
 800cde6:	4770      	bx	lr

0800cde8 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800cde8:	b480      	push	{r7}
 800cdea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800cdec:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bc80      	pop	{r7}
 800cdf4:	4770      	bx	lr

0800cdf6 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b083      	sub	sp, #12
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800cdfe:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bc80      	pop	{r7}
 800ce08:	4770      	bx	lr

0800ce0a <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	b085      	sub	sp, #20
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	60f8      	str	r0, [r7, #12]
 800ce12:	60b9      	str	r1, [r7, #8]
 800ce14:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800ce16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bc80      	pop	{r7}
 800ce20:	4770      	bx	lr

0800ce22 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b085      	sub	sp, #20
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	60f8      	str	r0, [r7, #12]
 800ce2a:	60b9      	str	r1, [r7, #8]
 800ce2c:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800ce2e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bc80      	pop	{r7}
 800ce38:	4770      	bx	lr

0800ce3a <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b085      	sub	sp, #20
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	60f8      	str	r0, [r7, #12]
 800ce42:	460b      	mov	r3, r1
 800ce44:	607a      	str	r2, [r7, #4]
 800ce46:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800ce48:	7afb      	ldrb	r3, [r7, #11]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d000      	beq.n	800ce50 <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800ce4e:	e000      	b.n	800ce52 <MEM_If_GetStatus_FS+0x18>
    break;
 800ce50:	bf00      	nop
  }
  return (USBD_OK);
 800ce52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bc80      	pop	{r7}
 800ce5c:	4770      	bx	lr
	...

0800ce60 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 800ce64:	4b0c      	ldr	r3, [pc, #48]	; (800ce98 <MX_WWDG_Init+0x38>)
 800ce66:	4a0d      	ldr	r2, [pc, #52]	; (800ce9c <MX_WWDG_Init+0x3c>)
 800ce68:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 800ce6a:	4b0b      	ldr	r3, [pc, #44]	; (800ce98 <MX_WWDG_Init+0x38>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 800ce70:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <MX_WWDG_Init+0x38>)
 800ce72:	2240      	movs	r2, #64	; 0x40
 800ce74:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 800ce76:	4b08      	ldr	r3, [pc, #32]	; (800ce98 <MX_WWDG_Init+0x38>)
 800ce78:	2240      	movs	r2, #64	; 0x40
 800ce7a:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800ce7c:	4b06      	ldr	r3, [pc, #24]	; (800ce98 <MX_WWDG_Init+0x38>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800ce82:	4805      	ldr	r0, [pc, #20]	; (800ce98 <MX_WWDG_Init+0x38>)
 800ce84:	f7f7 fe98 	bl	8004bb8 <HAL_WWDG_Init>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d001      	beq.n	800ce92 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 800ce8e:	f7fe fe61 	bl	800bb54 <Error_Handler>
  }

}
 800ce92:	bf00      	nop
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	20002c74 	.word	0x20002c74
 800ce9c:	40002c00 	.word	0x40002c00

0800cea0 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a09      	ldr	r2, [pc, #36]	; (800ced4 <HAL_WWDG_MspInit+0x34>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d10b      	bne.n	800ceca <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800ceb2:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <HAL_WWDG_MspInit+0x38>)
 800ceb4:	69db      	ldr	r3, [r3, #28]
 800ceb6:	4a08      	ldr	r2, [pc, #32]	; (800ced8 <HAL_WWDG_MspInit+0x38>)
 800ceb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cebc:	61d3      	str	r3, [r2, #28]
 800cebe:	4b06      	ldr	r3, [pc, #24]	; (800ced8 <HAL_WWDG_MspInit+0x38>)
 800cec0:	69db      	ldr	r3, [r3, #28]
 800cec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cec6:	60fb      	str	r3, [r7, #12]
 800cec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 800ceca:	bf00      	nop
 800cecc:	3714      	adds	r7, #20
 800cece:	46bd      	mov	sp, r7
 800ced0:	bc80      	pop	{r7}
 800ced2:	4770      	bx	lr
 800ced4:	40002c00 	.word	0x40002c00
 800ced8:	40021000 	.word	0x40021000

0800cedc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800cedc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800cede:	e003      	b.n	800cee8 <LoopCopyDataInit>

0800cee0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800cee0:	4b0b      	ldr	r3, [pc, #44]	; (800cf10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800cee2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800cee4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800cee6:	3104      	adds	r1, #4

0800cee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800cee8:	480a      	ldr	r0, [pc, #40]	; (800cf14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800ceea:	4b0b      	ldr	r3, [pc, #44]	; (800cf18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800ceec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800ceee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800cef0:	d3f6      	bcc.n	800cee0 <CopyDataInit>
  ldr r2, =_sbss
 800cef2:	4a0a      	ldr	r2, [pc, #40]	; (800cf1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800cef4:	e002      	b.n	800cefc <LoopFillZerobss>

0800cef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800cef6:	2300      	movs	r3, #0
  str r3, [r2], #4
 800cef8:	f842 3b04 	str.w	r3, [r2], #4

0800cefc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800cefc:	4b08      	ldr	r3, [pc, #32]	; (800cf20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800cefe:	429a      	cmp	r2, r3
  bcc FillZerobss
 800cf00:	d3f9      	bcc.n	800cef6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800cf02:	f7fe ffef 	bl	800bee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cf06:	f000 f80f 	bl	800cf28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800cf0a:	f7fe fd2b 	bl	800b964 <main>
  bx lr
 800cf0e:	4770      	bx	lr
  ldr r3, =_sidata
 800cf10:	0800d384 	.word	0x0800d384
  ldr r0, =_sdata
 800cf14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800cf18:	200000e0 	.word	0x200000e0
  ldr r2, =_sbss
 800cf1c:	200000e0 	.word	0x200000e0
  ldr r3, = _ebss
 800cf20:	20002c88 	.word	0x20002c88

0800cf24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800cf24:	e7fe      	b.n	800cf24 <ADC1_2_IRQHandler>
	...

0800cf28 <__libc_init_array>:
 800cf28:	b570      	push	{r4, r5, r6, lr}
 800cf2a:	2500      	movs	r5, #0
 800cf2c:	4e0c      	ldr	r6, [pc, #48]	; (800cf60 <__libc_init_array+0x38>)
 800cf2e:	4c0d      	ldr	r4, [pc, #52]	; (800cf64 <__libc_init_array+0x3c>)
 800cf30:	1ba4      	subs	r4, r4, r6
 800cf32:	10a4      	asrs	r4, r4, #2
 800cf34:	42a5      	cmp	r5, r4
 800cf36:	d109      	bne.n	800cf4c <__libc_init_array+0x24>
 800cf38:	f000 f82e 	bl	800cf98 <_init>
 800cf3c:	2500      	movs	r5, #0
 800cf3e:	4e0a      	ldr	r6, [pc, #40]	; (800cf68 <__libc_init_array+0x40>)
 800cf40:	4c0a      	ldr	r4, [pc, #40]	; (800cf6c <__libc_init_array+0x44>)
 800cf42:	1ba4      	subs	r4, r4, r6
 800cf44:	10a4      	asrs	r4, r4, #2
 800cf46:	42a5      	cmp	r5, r4
 800cf48:	d105      	bne.n	800cf56 <__libc_init_array+0x2e>
 800cf4a:	bd70      	pop	{r4, r5, r6, pc}
 800cf4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf50:	4798      	blx	r3
 800cf52:	3501      	adds	r5, #1
 800cf54:	e7ee      	b.n	800cf34 <__libc_init_array+0xc>
 800cf56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf5a:	4798      	blx	r3
 800cf5c:	3501      	adds	r5, #1
 800cf5e:	e7f2      	b.n	800cf46 <__libc_init_array+0x1e>
 800cf60:	0800d37c 	.word	0x0800d37c
 800cf64:	0800d37c 	.word	0x0800d37c
 800cf68:	0800d37c 	.word	0x0800d37c
 800cf6c:	0800d380 	.word	0x0800d380

0800cf70 <memcpy>:
 800cf70:	b510      	push	{r4, lr}
 800cf72:	1e43      	subs	r3, r0, #1
 800cf74:	440a      	add	r2, r1
 800cf76:	4291      	cmp	r1, r2
 800cf78:	d100      	bne.n	800cf7c <memcpy+0xc>
 800cf7a:	bd10      	pop	{r4, pc}
 800cf7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf84:	e7f7      	b.n	800cf76 <memcpy+0x6>

0800cf86 <memset>:
 800cf86:	4603      	mov	r3, r0
 800cf88:	4402      	add	r2, r0
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d100      	bne.n	800cf90 <memset+0xa>
 800cf8e:	4770      	bx	lr
 800cf90:	f803 1b01 	strb.w	r1, [r3], #1
 800cf94:	e7f9      	b.n	800cf8a <memset+0x4>
	...

0800cf98 <_init>:
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9a:	bf00      	nop
 800cf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf9e:	bc08      	pop	{r3}
 800cfa0:	469e      	mov	lr, r3
 800cfa2:	4770      	bx	lr

0800cfa4 <_fini>:
 800cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa6:	bf00      	nop
 800cfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfaa:	bc08      	pop	{r3}
 800cfac:	469e      	mov	lr, r3
 800cfae:	4770      	bx	lr
