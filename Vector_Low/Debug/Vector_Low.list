
Vector_Low.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007184  08007184  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007184  08007184  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007184  08007184  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800718c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003584  20000010  0800719c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003594  0800719c  00023594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023aea  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000429d  00000000  00000000  00043b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001840  00000000  00000000  00047dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00049600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c0e6  00000000  00000000  0004ac80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016f63  00000000  00000000  00066d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c06e  00000000  00000000  0007dcc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119d37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  00119db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006bbc 	.word	0x08006bbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006bbc 	.word	0x08006bbc

08000150 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000162:	4a19      	ldr	r2, [pc, #100]	; (80001c8 <MX_ADC1_Init+0x78>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000166:	4b17      	ldr	r3, [pc, #92]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000168:	2200      	movs	r2, #0
 800016a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016c:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <MX_ADC1_Init+0x74>)
 800016e:	2200      	movs	r2, #0
 8000170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000172:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <MX_ADC1_Init+0x74>)
 800017a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000180:	4b10      	ldr	r3, [pc, #64]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <MX_ADC1_Init+0x74>)
 8000188:	2201      	movs	r2, #1
 800018a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018c:	480d      	ldr	r0, [pc, #52]	; (80001c4 <MX_ADC1_Init+0x74>)
 800018e:	f001 f943 	bl	8001418 <HAL_ADC_Init>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000198:	f000 fd98 	bl	8000ccc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800019c:	2301      	movs	r3, #1
 800019e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a4:	2300      	movs	r3, #0
 80001a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4619      	mov	r1, r3
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <MX_ADC1_Init+0x74>)
 80001ae:	f001 fa0b 	bl	80015c8 <HAL_ADC_ConfigChannel>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b8:	f000 fd88 	bl	8000ccc <Error_Handler>
  }

}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	20003270 	.word	0x20003270
 80001c8:	40012400 	.word	0x40012400

080001cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d4:	f107 0310 	add.w	r3, r7, #16
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a14      	ldr	r2, [pc, #80]	; (8000238 <HAL_ADC_MspInit+0x6c>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d121      	bne.n	8000230 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a12      	ldr	r2, [pc, #72]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f6:	6193      	str	r3, [r2, #24]
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <HAL_ADC_MspInit+0x70>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <HAL_ADC_MspInit+0x70>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <HAL_ADC_MspInit+0x70>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <HAL_ADC_MspInit+0x70>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800021c:	2306      	movs	r3, #6
 800021e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000220:	2303      	movs	r3, #3
 8000222:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <HAL_ADC_MspInit+0x74>)
 800022c:	f001 fbfa 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000230:	bf00      	nop
 8000232:	3720      	adds	r7, #32
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40012400 	.word	0x40012400
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800

08000244 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <MX_CRC_Init+0x20>)
 800024a:	4a07      	ldr	r2, [pc, #28]	; (8000268 <MX_CRC_Init+0x24>)
 800024c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <MX_CRC_Init+0x20>)
 8000250:	f001 fbcb 	bl	80019ea <HAL_CRC_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800025a:	f000 fd37 	bl	8000ccc <Error_Handler>
  }

}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	2000331c 	.word	0x2000331c
 8000268:	40023000 	.word	0x40023000

0800026c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a09      	ldr	r2, [pc, #36]	; (80002a0 <HAL_CRC_MspInit+0x34>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d10b      	bne.n	8000296 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <HAL_CRC_MspInit+0x38>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <HAL_CRC_MspInit+0x38>)
 8000284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_CRC_MspInit+0x38>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	40023000 	.word	0x40023000
 80002a4:	40021000 	.word	0x40021000

080002a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemUpdate */
  BinarySemUpdateHandle = osSemaphoreNew(1, 1, &BinarySemUpdate_attributes);
 80002ac:	4a78      	ldr	r2, [pc, #480]	; (8000490 <MX_FREERTOS_Init+0x1e8>)
 80002ae:	2101      	movs	r1, #1
 80002b0:	2001      	movs	r0, #1
 80002b2:	f003 fd05 	bl	8003cc0 <osSemaphoreNew>
 80002b6:	4602      	mov	r2, r0
 80002b8:	4b76      	ldr	r3, [pc, #472]	; (8000494 <MX_FREERTOS_Init+0x1ec>)
 80002ba:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueLeftWheelSpeed */
  QueueLeftWheelSpeedHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueLeftWheelSpeed_attributes);
 80002bc:	4a76      	ldr	r2, [pc, #472]	; (8000498 <MX_FREERTOS_Init+0x1f0>)
 80002be:	2104      	movs	r1, #4
 80002c0:	2003      	movs	r0, #3
 80002c2:	f003 fd9b 	bl	8003dfc <osMessageQueueNew>
 80002c6:	4602      	mov	r2, r0
 80002c8:	4b74      	ldr	r3, [pc, #464]	; (800049c <MX_FREERTOS_Init+0x1f4>)
 80002ca:	601a      	str	r2, [r3, #0]

  /* creation of QueueRightWheelSpeed */
  QueueRightWheelSpeedHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueRightWheelSpeed_attributes);
 80002cc:	4a74      	ldr	r2, [pc, #464]	; (80004a0 <MX_FREERTOS_Init+0x1f8>)
 80002ce:	2104      	movs	r1, #4
 80002d0:	2003      	movs	r0, #3
 80002d2:	f003 fd93 	bl	8003dfc <osMessageQueueNew>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4b72      	ldr	r3, [pc, #456]	; (80004a4 <MX_FREERTOS_Init+0x1fc>)
 80002da:	601a      	str	r2, [r3, #0]

  /* creation of QueueLeftEncoder */
  QueueLeftEncoderHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueLeftEncoder_attributes);
 80002dc:	4a72      	ldr	r2, [pc, #456]	; (80004a8 <MX_FREERTOS_Init+0x200>)
 80002de:	2104      	movs	r1, #4
 80002e0:	2003      	movs	r0, #3
 80002e2:	f003 fd8b 	bl	8003dfc <osMessageQueueNew>
 80002e6:	4602      	mov	r2, r0
 80002e8:	4b70      	ldr	r3, [pc, #448]	; (80004ac <MX_FREERTOS_Init+0x204>)
 80002ea:	601a      	str	r2, [r3, #0]

  /* creation of QueueRightEncoder */
  QueueRightEncoderHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueRightEncoder_attributes);
 80002ec:	4a70      	ldr	r2, [pc, #448]	; (80004b0 <MX_FREERTOS_Init+0x208>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	2003      	movs	r0, #3
 80002f2:	f003 fd83 	bl	8003dfc <osMessageQueueNew>
 80002f6:	4602      	mov	r2, r0
 80002f8:	4b6e      	ldr	r3, [pc, #440]	; (80004b4 <MX_FREERTOS_Init+0x20c>)
 80002fa:	601a      	str	r2, [r3, #0]

  /* creation of QueueMPU6050 */
  QueueMPU6050Handle = osMessageQueueNew (3, sizeof(uint32_t), &QueueMPU6050_attributes);
 80002fc:	4a6e      	ldr	r2, [pc, #440]	; (80004b8 <MX_FREERTOS_Init+0x210>)
 80002fe:	2104      	movs	r1, #4
 8000300:	2003      	movs	r0, #3
 8000302:	f003 fd7b 	bl	8003dfc <osMessageQueueNew>
 8000306:	4602      	mov	r2, r0
 8000308:	4b6c      	ldr	r3, [pc, #432]	; (80004bc <MX_FREERTOS_Init+0x214>)
 800030a:	601a      	str	r2, [r3, #0]

  /* creation of QueueVL53L0 */
  QueueVL53L0Handle = osMessageQueueNew (3, sizeof(uint32_t), &QueueVL53L0_attributes);
 800030c:	4a6c      	ldr	r2, [pc, #432]	; (80004c0 <MX_FREERTOS_Init+0x218>)
 800030e:	2104      	movs	r1, #4
 8000310:	2003      	movs	r0, #3
 8000312:	f003 fd73 	bl	8003dfc <osMessageQueueNew>
 8000316:	4602      	mov	r2, r0
 8000318:	4b6a      	ldr	r3, [pc, #424]	; (80004c4 <MX_FREERTOS_Init+0x21c>)
 800031a:	601a      	str	r2, [r3, #0]

  /* creation of QueueVL6180X */
  QueueVL6180XHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueVL6180X_attributes);
 800031c:	4a6a      	ldr	r2, [pc, #424]	; (80004c8 <MX_FREERTOS_Init+0x220>)
 800031e:	2104      	movs	r1, #4
 8000320:	2003      	movs	r0, #3
 8000322:	f003 fd6b 	bl	8003dfc <osMessageQueueNew>
 8000326:	4602      	mov	r2, r0
 8000328:	4b68      	ldr	r3, [pc, #416]	; (80004cc <MX_FREERTOS_Init+0x224>)
 800032a:	601a      	str	r2, [r3, #0]

  /* creation of QueueTouch */
  QueueTouchHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueTouch_attributes);
 800032c:	4a68      	ldr	r2, [pc, #416]	; (80004d0 <MX_FREERTOS_Init+0x228>)
 800032e:	2104      	movs	r1, #4
 8000330:	2003      	movs	r0, #3
 8000332:	f003 fd63 	bl	8003dfc <osMessageQueueNew>
 8000336:	4602      	mov	r2, r0
 8000338:	4b66      	ldr	r3, [pc, #408]	; (80004d4 <MX_FREERTOS_Init+0x22c>)
 800033a:	601a      	str	r2, [r3, #0]

  /* creation of QueueGoHome */
  QueueGoHomeHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueGoHome_attributes);
 800033c:	4a66      	ldr	r2, [pc, #408]	; (80004d8 <MX_FREERTOS_Init+0x230>)
 800033e:	2104      	movs	r1, #4
 8000340:	2003      	movs	r0, #3
 8000342:	f003 fd5b 	bl	8003dfc <osMessageQueueNew>
 8000346:	4602      	mov	r2, r0
 8000348:	4b64      	ldr	r3, [pc, #400]	; (80004dc <MX_FREERTOS_Init+0x234>)
 800034a:	601a      	str	r2, [r3, #0]

  /* creation of QueueLeftWheelDire */
  QueueLeftWheelDireHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueLeftWheelDire_attributes);
 800034c:	4a64      	ldr	r2, [pc, #400]	; (80004e0 <MX_FREERTOS_Init+0x238>)
 800034e:	2104      	movs	r1, #4
 8000350:	2003      	movs	r0, #3
 8000352:	f003 fd53 	bl	8003dfc <osMessageQueueNew>
 8000356:	4602      	mov	r2, r0
 8000358:	4b62      	ldr	r3, [pc, #392]	; (80004e4 <MX_FREERTOS_Init+0x23c>)
 800035a:	601a      	str	r2, [r3, #0]

  /* creation of QueueRightWheelDire */
  QueueRightWheelDireHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueRightWheelDire_attributes);
 800035c:	4a62      	ldr	r2, [pc, #392]	; (80004e8 <MX_FREERTOS_Init+0x240>)
 800035e:	2104      	movs	r1, #4
 8000360:	2003      	movs	r0, #3
 8000362:	f003 fd4b 	bl	8003dfc <osMessageQueueNew>
 8000366:	4602      	mov	r2, r0
 8000368:	4b60      	ldr	r3, [pc, #384]	; (80004ec <MX_FREERTOS_Init+0x244>)
 800036a:	601a      	str	r2, [r3, #0]

  /* creation of QueuePowerButton */
  QueuePowerButtonHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueuePowerButton_attributes);
 800036c:	4a60      	ldr	r2, [pc, #384]	; (80004f0 <MX_FREERTOS_Init+0x248>)
 800036e:	2104      	movs	r1, #4
 8000370:	2003      	movs	r0, #3
 8000372:	f003 fd43 	bl	8003dfc <osMessageQueueNew>
 8000376:	4602      	mov	r2, r0
 8000378:	4b5e      	ldr	r3, [pc, #376]	; (80004f4 <MX_FREERTOS_Init+0x24c>)
 800037a:	601a      	str	r2, [r3, #0]

  /* creation of QueueRgbLed */
  QueueRgbLedHandle = osMessageQueueNew (3, sizeof(uint32_t), &QueueRgbLed_attributes);
 800037c:	4a5e      	ldr	r2, [pc, #376]	; (80004f8 <MX_FREERTOS_Init+0x250>)
 800037e:	2104      	movs	r1, #4
 8000380:	2003      	movs	r0, #3
 8000382:	f003 fd3b 	bl	8003dfc <osMessageQueueNew>
 8000386:	4602      	mov	r2, r0
 8000388:	4b5c      	ldr	r3, [pc, #368]	; (80004fc <MX_FREERTOS_Init+0x254>)
 800038a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800038c:	4a5c      	ldr	r2, [pc, #368]	; (8000500 <MX_FREERTOS_Init+0x258>)
 800038e:	2100      	movs	r1, #0
 8000390:	485c      	ldr	r0, [pc, #368]	; (8000504 <MX_FREERTOS_Init+0x25c>)
 8000392:	f003 fb89 	bl	8003aa8 <osThreadNew>
 8000396:	4602      	mov	r2, r0
 8000398:	4b5b      	ldr	r3, [pc, #364]	; (8000508 <MX_FREERTOS_Init+0x260>)
 800039a:	601a      	str	r2, [r3, #0]

  /* creation of TaskLeftWheelSpeed */
  TaskLeftWheelSpeedHandle = osThreadNew(StartTaskLeftWheelSpeed, NULL, &TaskLeftWheelSpeed_attributes);
 800039c:	4a5b      	ldr	r2, [pc, #364]	; (800050c <MX_FREERTOS_Init+0x264>)
 800039e:	2100      	movs	r1, #0
 80003a0:	485b      	ldr	r0, [pc, #364]	; (8000510 <MX_FREERTOS_Init+0x268>)
 80003a2:	f003 fb81 	bl	8003aa8 <osThreadNew>
 80003a6:	4602      	mov	r2, r0
 80003a8:	4b5a      	ldr	r3, [pc, #360]	; (8000514 <MX_FREERTOS_Init+0x26c>)
 80003aa:	601a      	str	r2, [r3, #0]

  /* creation of TaskRightWheelSpeed */
  TaskRightWheelSpeedHandle = osThreadNew(StartTaskRightWheelSpeed, NULL, &TaskRightWheelSpeed_attributes);
 80003ac:	4a5a      	ldr	r2, [pc, #360]	; (8000518 <MX_FREERTOS_Init+0x270>)
 80003ae:	2100      	movs	r1, #0
 80003b0:	485a      	ldr	r0, [pc, #360]	; (800051c <MX_FREERTOS_Init+0x274>)
 80003b2:	f003 fb79 	bl	8003aa8 <osThreadNew>
 80003b6:	4602      	mov	r2, r0
 80003b8:	4b59      	ldr	r3, [pc, #356]	; (8000520 <MX_FREERTOS_Init+0x278>)
 80003ba:	601a      	str	r2, [r3, #0]

  /* creation of TaskLeftEncoder */
  TaskLeftEncoderHandle = osThreadNew(StartTaskLeftEncoder, NULL, &TaskLeftEncoder_attributes);
 80003bc:	4a59      	ldr	r2, [pc, #356]	; (8000524 <MX_FREERTOS_Init+0x27c>)
 80003be:	2100      	movs	r1, #0
 80003c0:	4859      	ldr	r0, [pc, #356]	; (8000528 <MX_FREERTOS_Init+0x280>)
 80003c2:	f003 fb71 	bl	8003aa8 <osThreadNew>
 80003c6:	4602      	mov	r2, r0
 80003c8:	4b58      	ldr	r3, [pc, #352]	; (800052c <MX_FREERTOS_Init+0x284>)
 80003ca:	601a      	str	r2, [r3, #0]

  /* creation of TaskRightEncoder */
  TaskRightEncoderHandle = osThreadNew(StartTaskRightEncoder, NULL, &TaskRightEncoder_attributes);
 80003cc:	4a58      	ldr	r2, [pc, #352]	; (8000530 <MX_FREERTOS_Init+0x288>)
 80003ce:	2100      	movs	r1, #0
 80003d0:	4858      	ldr	r0, [pc, #352]	; (8000534 <MX_FREERTOS_Init+0x28c>)
 80003d2:	f003 fb69 	bl	8003aa8 <osThreadNew>
 80003d6:	4602      	mov	r2, r0
 80003d8:	4b57      	ldr	r3, [pc, #348]	; (8000538 <MX_FREERTOS_Init+0x290>)
 80003da:	601a      	str	r2, [r3, #0]

  /* creation of TaskMPU6050 */
  TaskMPU6050Handle = osThreadNew(StartTaskMPU6050, NULL, &TaskMPU6050_attributes);
 80003dc:	4a57      	ldr	r2, [pc, #348]	; (800053c <MX_FREERTOS_Init+0x294>)
 80003de:	2100      	movs	r1, #0
 80003e0:	4857      	ldr	r0, [pc, #348]	; (8000540 <MX_FREERTOS_Init+0x298>)
 80003e2:	f003 fb61 	bl	8003aa8 <osThreadNew>
 80003e6:	4602      	mov	r2, r0
 80003e8:	4b56      	ldr	r3, [pc, #344]	; (8000544 <MX_FREERTOS_Init+0x29c>)
 80003ea:	601a      	str	r2, [r3, #0]

  /* creation of TaskVL53L0 */
  TaskVL53L0Handle = osThreadNew(StartTaskVL53L0, NULL, &TaskVL53L0_attributes);
 80003ec:	4a56      	ldr	r2, [pc, #344]	; (8000548 <MX_FREERTOS_Init+0x2a0>)
 80003ee:	2100      	movs	r1, #0
 80003f0:	4856      	ldr	r0, [pc, #344]	; (800054c <MX_FREERTOS_Init+0x2a4>)
 80003f2:	f003 fb59 	bl	8003aa8 <osThreadNew>
 80003f6:	4602      	mov	r2, r0
 80003f8:	4b55      	ldr	r3, [pc, #340]	; (8000550 <MX_FREERTOS_Init+0x2a8>)
 80003fa:	601a      	str	r2, [r3, #0]

  /* creation of TaskVL6180X */
  TaskVL6180XHandle = osThreadNew(StartTaskVL6180X, NULL, &TaskVL6180X_attributes);
 80003fc:	4a55      	ldr	r2, [pc, #340]	; (8000554 <MX_FREERTOS_Init+0x2ac>)
 80003fe:	2100      	movs	r1, #0
 8000400:	4855      	ldr	r0, [pc, #340]	; (8000558 <MX_FREERTOS_Init+0x2b0>)
 8000402:	f003 fb51 	bl	8003aa8 <osThreadNew>
 8000406:	4602      	mov	r2, r0
 8000408:	4b54      	ldr	r3, [pc, #336]	; (800055c <MX_FREERTOS_Init+0x2b4>)
 800040a:	601a      	str	r2, [r3, #0]

  /* creation of TaskTouch */
  TaskTouchHandle = osThreadNew(StartTaskTouch, NULL, &TaskTouch_attributes);
 800040c:	4a54      	ldr	r2, [pc, #336]	; (8000560 <MX_FREERTOS_Init+0x2b8>)
 800040e:	2100      	movs	r1, #0
 8000410:	4854      	ldr	r0, [pc, #336]	; (8000564 <MX_FREERTOS_Init+0x2bc>)
 8000412:	f003 fb49 	bl	8003aa8 <osThreadNew>
 8000416:	4602      	mov	r2, r0
 8000418:	4b53      	ldr	r3, [pc, #332]	; (8000568 <MX_FREERTOS_Init+0x2c0>)
 800041a:	601a      	str	r2, [r3, #0]

  /* creation of TaskGoHome */
  TaskGoHomeHandle = osThreadNew(StartTaskGoHome, NULL, &TaskGoHome_attributes);
 800041c:	4a53      	ldr	r2, [pc, #332]	; (800056c <MX_FREERTOS_Init+0x2c4>)
 800041e:	2100      	movs	r1, #0
 8000420:	4853      	ldr	r0, [pc, #332]	; (8000570 <MX_FREERTOS_Init+0x2c8>)
 8000422:	f003 fb41 	bl	8003aa8 <osThreadNew>
 8000426:	4602      	mov	r2, r0
 8000428:	4b52      	ldr	r3, [pc, #328]	; (8000574 <MX_FREERTOS_Init+0x2cc>)
 800042a:	601a      	str	r2, [r3, #0]

  /* creation of TaskUpdate */
  TaskUpdateHandle = osThreadNew(StartTaskUpdate, NULL, &TaskUpdate_attributes);
 800042c:	4a52      	ldr	r2, [pc, #328]	; (8000578 <MX_FREERTOS_Init+0x2d0>)
 800042e:	2100      	movs	r1, #0
 8000430:	4852      	ldr	r0, [pc, #328]	; (800057c <MX_FREERTOS_Init+0x2d4>)
 8000432:	f003 fb39 	bl	8003aa8 <osThreadNew>
 8000436:	4602      	mov	r2, r0
 8000438:	4b51      	ldr	r3, [pc, #324]	; (8000580 <MX_FREERTOS_Init+0x2d8>)
 800043a:	601a      	str	r2, [r3, #0]

  /* creation of TaskUsartDate */
  TaskUsartDateHandle = osThreadNew(StartTaskUsartDate, NULL, &TaskUsartDate_attributes);
 800043c:	4a51      	ldr	r2, [pc, #324]	; (8000584 <MX_FREERTOS_Init+0x2dc>)
 800043e:	2100      	movs	r1, #0
 8000440:	4851      	ldr	r0, [pc, #324]	; (8000588 <MX_FREERTOS_Init+0x2e0>)
 8000442:	f003 fb31 	bl	8003aa8 <osThreadNew>
 8000446:	4602      	mov	r2, r0
 8000448:	4b50      	ldr	r3, [pc, #320]	; (800058c <MX_FREERTOS_Init+0x2e4>)
 800044a:	601a      	str	r2, [r3, #0]

  /* creation of TaskLeftWheelDire */
  TaskLeftWheelDireHandle = osThreadNew(StartTaskLeftWheelDire, NULL, &TaskLeftWheelDire_attributes);
 800044c:	4a50      	ldr	r2, [pc, #320]	; (8000590 <MX_FREERTOS_Init+0x2e8>)
 800044e:	2100      	movs	r1, #0
 8000450:	4850      	ldr	r0, [pc, #320]	; (8000594 <MX_FREERTOS_Init+0x2ec>)
 8000452:	f003 fb29 	bl	8003aa8 <osThreadNew>
 8000456:	4602      	mov	r2, r0
 8000458:	4b4f      	ldr	r3, [pc, #316]	; (8000598 <MX_FREERTOS_Init+0x2f0>)
 800045a:	601a      	str	r2, [r3, #0]

  /* creation of TaskRightWheelDire */
  TaskRightWheelDireHandle = osThreadNew(StartTaskRightWheelDire, NULL, &TaskRightWheelDire_attributes);
 800045c:	4a4f      	ldr	r2, [pc, #316]	; (800059c <MX_FREERTOS_Init+0x2f4>)
 800045e:	2100      	movs	r1, #0
 8000460:	484f      	ldr	r0, [pc, #316]	; (80005a0 <MX_FREERTOS_Init+0x2f8>)
 8000462:	f003 fb21 	bl	8003aa8 <osThreadNew>
 8000466:	4602      	mov	r2, r0
 8000468:	4b4e      	ldr	r3, [pc, #312]	; (80005a4 <MX_FREERTOS_Init+0x2fc>)
 800046a:	601a      	str	r2, [r3, #0]

  /* creation of TaskPowerButton */
  TaskPowerButtonHandle = osThreadNew(StartTaskPowerButton, NULL, &TaskPowerButton_attributes);
 800046c:	4a4e      	ldr	r2, [pc, #312]	; (80005a8 <MX_FREERTOS_Init+0x300>)
 800046e:	2100      	movs	r1, #0
 8000470:	484e      	ldr	r0, [pc, #312]	; (80005ac <MX_FREERTOS_Init+0x304>)
 8000472:	f003 fb19 	bl	8003aa8 <osThreadNew>
 8000476:	4602      	mov	r2, r0
 8000478:	4b4d      	ldr	r3, [pc, #308]	; (80005b0 <MX_FREERTOS_Init+0x308>)
 800047a:	601a      	str	r2, [r3, #0]

  /* creation of TaskRgbLed */
  TaskRgbLedHandle = osThreadNew(StartTaskRgbLed, NULL, &TaskRgbLed_attributes);
 800047c:	4a4d      	ldr	r2, [pc, #308]	; (80005b4 <MX_FREERTOS_Init+0x30c>)
 800047e:	2100      	movs	r1, #0
 8000480:	484d      	ldr	r0, [pc, #308]	; (80005b8 <MX_FREERTOS_Init+0x310>)
 8000482:	f003 fb11 	bl	8003aa8 <osThreadNew>
 8000486:	4602      	mov	r2, r0
 8000488:	4b4c      	ldr	r3, [pc, #304]	; (80005bc <MX_FREERTOS_Init+0x314>)
 800048a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	0800715c 	.word	0x0800715c
 8000494:	20003390 	.word	0x20003390
 8000498:	08007024 	.word	0x08007024
 800049c:	2000336c 	.word	0x2000336c
 80004a0:	0800703c 	.word	0x0800703c
 80004a4:	20003374 	.word	0x20003374
 80004a8:	08007054 	.word	0x08007054
 80004ac:	20003370 	.word	0x20003370
 80004b0:	0800706c 	.word	0x0800706c
 80004b4:	2000335c 	.word	0x2000335c
 80004b8:	08007084 	.word	0x08007084
 80004bc:	2000332c 	.word	0x2000332c
 80004c0:	0800709c 	.word	0x0800709c
 80004c4:	2000337c 	.word	0x2000337c
 80004c8:	080070b4 	.word	0x080070b4
 80004cc:	20003334 	.word	0x20003334
 80004d0:	080070cc 	.word	0x080070cc
 80004d4:	20003350 	.word	0x20003350
 80004d8:	080070e4 	.word	0x080070e4
 80004dc:	20003354 	.word	0x20003354
 80004e0:	080070fc 	.word	0x080070fc
 80004e4:	20003378 	.word	0x20003378
 80004e8:	08007114 	.word	0x08007114
 80004ec:	20003330 	.word	0x20003330
 80004f0:	0800712c 	.word	0x0800712c
 80004f4:	2000334c 	.word	0x2000334c
 80004f8:	08007144 	.word	0x08007144
 80004fc:	20003324 	.word	0x20003324
 8000500:	08006de4 	.word	0x08006de4
 8000504:	080005c1 	.word	0x080005c1
 8000508:	20003328 	.word	0x20003328
 800050c:	08006e08 	.word	0x08006e08
 8000510:	08000709 	.word	0x08000709
 8000514:	20003338 	.word	0x20003338
 8000518:	08006e2c 	.word	0x08006e2c
 800051c:	08000741 	.word	0x08000741
 8000520:	20003360 	.word	0x20003360
 8000524:	08006e50 	.word	0x08006e50
 8000528:	08000779 	.word	0x08000779
 800052c:	20003368 	.word	0x20003368
 8000530:	08006e74 	.word	0x08006e74
 8000534:	080007b9 	.word	0x080007b9
 8000538:	2000333c 	.word	0x2000333c
 800053c:	08006e98 	.word	0x08006e98
 8000540:	080007f9 	.word	0x080007f9
 8000544:	20003398 	.word	0x20003398
 8000548:	08006ebc 	.word	0x08006ebc
 800054c:	08000809 	.word	0x08000809
 8000550:	20003364 	.word	0x20003364
 8000554:	08006ee0 	.word	0x08006ee0
 8000558:	08000819 	.word	0x08000819
 800055c:	20003348 	.word	0x20003348
 8000560:	08006f04 	.word	0x08006f04
 8000564:	08000829 	.word	0x08000829
 8000568:	20003384 	.word	0x20003384
 800056c:	08006f28 	.word	0x08006f28
 8000570:	08000861 	.word	0x08000861
 8000574:	20003388 	.word	0x20003388
 8000578:	08006f4c 	.word	0x08006f4c
 800057c:	08000899 	.word	0x08000899
 8000580:	20003344 	.word	0x20003344
 8000584:	08006f70 	.word	0x08006f70
 8000588:	080008a9 	.word	0x080008a9
 800058c:	20003340 	.word	0x20003340
 8000590:	08006f94 	.word	0x08006f94
 8000594:	080008b9 	.word	0x080008b9
 8000598:	20003358 	.word	0x20003358
 800059c:	08006fb8 	.word	0x08006fb8
 80005a0:	080008f1 	.word	0x080008f1
 80005a4:	20003380 	.word	0x20003380
 80005a8:	08006fdc 	.word	0x08006fdc
 80005ac:	08000929 	.word	0x08000929
 80005b0:	20003394 	.word	0x20003394
 80005b4:	08007000 	.word	0x08007000
 80005b8:	08000961 	.word	0x08000961
 80005bc:	2000338c 	.word	0x2000338c

080005c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  osStatus_t status;
  Encoder_t *Encoder=NULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  Button_t *Button=NULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
#if 1
    Left_Wheel.speed=10;
 80005d0:	4b40      	ldr	r3, [pc, #256]	; (80006d4 <StartDefaultTask+0x114>)
 80005d2:	220a      	movs	r2, #10
 80005d4:	601a      	str	r2, [r3, #0]
    status=osMessageQueuePut(QueueLeftWheelSpeedHandle,&Left_Wheel,0,osWaitForever);
 80005d6:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <StartDefaultTask+0x118>)
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	2200      	movs	r2, #0
 80005e0:	493c      	ldr	r1, [pc, #240]	; (80006d4 <StartDefaultTask+0x114>)
 80005e2:	f003 fc91 	bl	8003f08 <osMessageQueuePut>
 80005e6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
    {

    }

    Right_Wheel.speed=10;
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <StartDefaultTask+0x11c>)
 80005ea:	220a      	movs	r2, #10
 80005ec:	601a      	str	r2, [r3, #0]
    status=osMessageQueuePut(QueueRightWheelSpeedHandle,&Right_Wheel,0,osWaitForever);
 80005ee:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <StartDefaultTask+0x120>)
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	2200      	movs	r2, #0
 80005f8:	4938      	ldr	r1, [pc, #224]	; (80006dc <StartDefaultTask+0x11c>)
 80005fa:	f003 fc85 	bl	8003f08 <osMessageQueuePut>
 80005fe:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
    {

    }

    status=osMessageQueueGet(QueueLeftEncoderHandle,(void *)Encoder,NULL,0);
 8000600:	4b38      	ldr	r3, [pc, #224]	; (80006e4 <StartDefaultTask+0x124>)
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	2200      	movs	r2, #0
 8000608:	6979      	ldr	r1, [r7, #20]
 800060a:	f003 fcf1 	bl	8003ff0 <osMessageQueueGet>
 800060e:	60f8      	str	r0, [r7, #12]
    {
      // ?=Encoder->number;
      // ?=Encoder->dire;
    }

    status=osMessageQueueGet(QueueRightEncoderHandle,(void *)Encoder,NULL,0);
 8000610:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <StartDefaultTask+0x128>)
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	2200      	movs	r2, #0
 8000618:	6979      	ldr	r1, [r7, #20]
 800061a:	f003 fce9 	bl	8003ff0 <osMessageQueueGet>
 800061e:	60f8      	str	r0, [r7, #12]
    {
      // ?=Encoder->number;
      // ?=Encoder->dire;
    }

    Left_Wheel.dire=FRONT;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <StartDefaultTask+0x114>)
 8000622:	2200      	movs	r2, #0
 8000624:	711a      	strb	r2, [r3, #4]
    status=osMessageQueuePut(QueueLeftWheelSpeedHandle,&Left_Wheel,0,osWaitForever);
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <StartDefaultTask+0x118>)
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	2200      	movs	r2, #0
 8000630:	4928      	ldr	r1, [pc, #160]	; (80006d4 <StartDefaultTask+0x114>)
 8000632:	f003 fc69 	bl	8003f08 <osMessageQueuePut>
 8000636:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
    {

    }

    Right_Wheel.dire=FRONT;
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <StartDefaultTask+0x11c>)
 800063a:	2200      	movs	r2, #0
 800063c:	711a      	strb	r2, [r3, #4]
    status=osMessageQueuePut(QueueLeftWheelSpeedHandle,&Right_Wheel,0,osWaitForever);
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <StartDefaultTask+0x118>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	2200      	movs	r2, #0
 8000648:	4924      	ldr	r1, [pc, #144]	; (80006dc <StartDefaultTask+0x11c>)
 800064a:	f003 fc5d 	bl	8003f08 <osMessageQueuePut>
 800064e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
    {

    }

    Led_R.power=ON;
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <StartDefaultTask+0x12c>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
    status=osMessageQueuePut(QueueRgbLedHandle,&Led_R,0,osWaitForever);
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <StartDefaultTask+0x130>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	2200      	movs	r2, #0
 8000660:	4922      	ldr	r1, [pc, #136]	; (80006ec <StartDefaultTask+0x12c>)
 8000662:	f003 fc51 	bl	8003f08 <osMessageQueuePut>
 8000666:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
    {

    }

    Led_G.power=ON;
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <StartDefaultTask+0x134>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
    status=osMessageQueuePut(QueueRgbLedHandle,&Led_G,0,osWaitForever);
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <StartDefaultTask+0x130>)
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2200      	movs	r2, #0
 8000678:	491e      	ldr	r1, [pc, #120]	; (80006f4 <StartDefaultTask+0x134>)
 800067a:	f003 fc45 	bl	8003f08 <osMessageQueuePut>
 800067e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
    {

    }

    Led_B.power=ON;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <StartDefaultTask+0x138>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
    status=osMessageQueuePut(QueueRgbLedHandle,&Led_B,0,osWaitForever);
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <StartDefaultTask+0x130>)
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2200      	movs	r2, #0
 8000690:	4919      	ldr	r1, [pc, #100]	; (80006f8 <StartDefaultTask+0x138>)
 8000692:	f003 fc39 	bl	8003f08 <osMessageQueuePut>
 8000696:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
    {

    }

    status=osMessageQueueGet(QueuePowerButtonHandle,(void *)Button,NULL,0);
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <StartDefaultTask+0x13c>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	2200      	movs	r2, #0
 80006a0:	6939      	ldr	r1, [r7, #16]
 80006a2:	f003 fca5 	bl	8003ff0 <osMessageQueueGet>
 80006a6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
    {
      // ?=Button->updown;
    }

    status=osMessageQueueGet(QueueTouchHandle,(void *)Button,NULL,0);
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <StartDefaultTask+0x140>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	2300      	movs	r3, #0
 80006ae:	2200      	movs	r2, #0
 80006b0:	6939      	ldr	r1, [r7, #16]
 80006b2:	f003 fc9d 	bl	8003ff0 <osMessageQueueGet>
 80006b6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
    {
      // ?=Button->updown;
    }

    status=osMessageQueueGet(QueueGoHomeHandle,(void *)Button,NULL,0);
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <StartDefaultTask+0x144>)
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	2200      	movs	r2, #0
 80006c0:	6939      	ldr	r1, [r7, #16]
 80006c2:	f003 fc95 	bl	8003ff0 <osMessageQueueGet>
 80006c6:	60f8      	str	r0, [r7, #12]
      // ?=Button->updown;
    }

#endif

    osDelay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f003 fa96 	bl	8003bfc <osDelay>
    Left_Wheel.speed=10;
 80006d0:	e77e      	b.n	80005d0 <StartDefaultTask+0x10>
 80006d2:	bf00      	nop
 80006d4:	200032ec 	.word	0x200032ec
 80006d8:	2000336c 	.word	0x2000336c
 80006dc:	200032bc 	.word	0x200032bc
 80006e0:	20003374 	.word	0x20003374
 80006e4:	20003370 	.word	0x20003370
 80006e8:	2000335c 	.word	0x2000335c
 80006ec:	200032dc 	.word	0x200032dc
 80006f0:	20003324 	.word	0x20003324
 80006f4:	2000330c 	.word	0x2000330c
 80006f8:	200032d4 	.word	0x200032d4
 80006fc:	2000334c 	.word	0x2000334c
 8000700:	20003350 	.word	0x20003350
 8000704:	20003354 	.word	0x20003354

08000708 <StartTaskLeftWheelSpeed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLeftWheelSpeed */
void StartTaskLeftWheelSpeed(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLeftWheelSpeed */
  osStatus_t status;
  Wheel_t *Wheel=NULL;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    status=osMessageQueueGet(QueueLeftWheelSpeedHandle,(void*)Wheel,NULL,osWaitForever);
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <StartTaskLeftWheelSpeed+0x34>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	2200      	movs	r2, #0
 800071e:	68f9      	ldr	r1, [r7, #12]
 8000720:	f003 fc66 	bl	8003ff0 <osMessageQueueGet>
 8000724:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1f3      	bne.n	8000714 <StartTaskLeftWheelSpeed+0xc>
    {
      Wheel->Set_Speed(Wheel->speed);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	4610      	mov	r0, r2
 8000736:	4798      	blx	r3
    status=osMessageQueueGet(QueueLeftWheelSpeedHandle,(void*)Wheel,NULL,osWaitForever);
 8000738:	e7ec      	b.n	8000714 <StartTaskLeftWheelSpeed+0xc>
 800073a:	bf00      	nop
 800073c:	2000336c 	.word	0x2000336c

08000740 <StartTaskRightWheelSpeed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRightWheelSpeed */
void StartTaskRightWheelSpeed(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRightWheelSpeed */
  osStatus_t status;
  Wheel_t *Wheel=NULL;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    status=osMessageQueueGet(QueueRightWheelSpeedHandle,(void*)Wheel,NULL,osWaitForever);
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <StartTaskRightWheelSpeed+0x34>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	2200      	movs	r2, #0
 8000756:	68f9      	ldr	r1, [r7, #12]
 8000758:	f003 fc4a 	bl	8003ff0 <osMessageQueueGet>
 800075c:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f3      	bne.n	800074c <StartTaskRightWheelSpeed+0xc>
    {
      Wheel->Set_Speed(Wheel->speed);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4610      	mov	r0, r2
 800076e:	4798      	blx	r3
    status=osMessageQueueGet(QueueRightWheelSpeedHandle,(void*)Wheel,NULL,osWaitForever);
 8000770:	e7ec      	b.n	800074c <StartTaskRightWheelSpeed+0xc>
 8000772:	bf00      	nop
 8000774:	20003374 	.word	0x20003374

08000778 <StartTaskLeftEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLeftEncoder */
void StartTaskLeftEncoder(void *argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLeftEncoder */
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
    osDelayUntil (100);
 8000780:	2064      	movs	r0, #100	; 0x64
 8000782:	f003 fa69 	bl	8003c58 <osDelayUntil>
    Left_Encoder.number=Left_Encoder.Get_number();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <StartTaskLeftEncoder+0x38>)
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	4798      	blx	r3
 800078c:	4602      	mov	r2, r0
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <StartTaskLeftEncoder+0x38>)
 8000790:	605a      	str	r2, [r3, #4]
    Left_Encoder.Set_number(0);
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <StartTaskLeftEncoder+0x38>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	2000      	movs	r0, #0
 8000798:	4798      	blx	r3
    status=osMessageQueuePut(QueueLeftEncoderHandle,&Left_Encoder,0,osWaitForever);
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <StartTaskLeftEncoder+0x3c>)
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	2200      	movs	r2, #0
 80007a4:	4902      	ldr	r1, [pc, #8]	; (80007b0 <StartTaskLeftEncoder+0x38>)
 80007a6:	f003 fbaf 	bl	8003f08 <osMessageQueuePut>
 80007aa:	60f8      	str	r0, [r7, #12]
    osDelayUntil (100);
 80007ac:	e7e8      	b.n	8000780 <StartTaskLeftEncoder+0x8>
 80007ae:	bf00      	nop
 80007b0:	200032a8 	.word	0x200032a8
 80007b4:	20003370 	.word	0x20003370

080007b8 <StartTaskRightEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRightEncoder */
void StartTaskRightEncoder(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRightEncoder */
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
    osDelayUntil (100);
 80007c0:	2064      	movs	r0, #100	; 0x64
 80007c2:	f003 fa49 	bl	8003c58 <osDelayUntil>
    Right_Encoder.number=Right_Encoder.Get_number();
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <StartTaskRightEncoder+0x38>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4798      	blx	r3
 80007cc:	4602      	mov	r2, r0
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <StartTaskRightEncoder+0x38>)
 80007d0:	605a      	str	r2, [r3, #4]
    Right_Encoder.Set_number(0);
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <StartTaskRightEncoder+0x38>)
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	2000      	movs	r0, #0
 80007d8:	4798      	blx	r3
    status=osMessageQueuePut(QueueRightEncoderHandle,&Right_Encoder,0,osWaitForever);
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <StartTaskRightEncoder+0x3c>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	2200      	movs	r2, #0
 80007e4:	4902      	ldr	r1, [pc, #8]	; (80007f0 <StartTaskRightEncoder+0x38>)
 80007e6:	f003 fb8f 	bl	8003f08 <osMessageQueuePut>
 80007ea:	60f8      	str	r0, [r7, #12]
    osDelayUntil (100);
 80007ec:	e7e8      	b.n	80007c0 <StartTaskRightEncoder+0x8>
 80007ee:	bf00      	nop
 80007f0:	20003244 	.word	0x20003244
 80007f4:	2000335c 	.word	0x2000335c

080007f8 <StartTaskMPU6050>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMPU6050 */
void StartTaskMPU6050(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMPU6050 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f003 f9fb 	bl	8003bfc <osDelay>
 8000806:	e7fb      	b.n	8000800 <StartTaskMPU6050+0x8>

08000808 <StartTaskVL53L0>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskVL53L0 */
void StartTaskVL53L0(void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskVL53L0 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f003 f9f3 	bl	8003bfc <osDelay>
 8000816:	e7fb      	b.n	8000810 <StartTaskVL53L0+0x8>

08000818 <StartTaskVL6180X>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskVL6180X */
void StartTaskVL6180X(void *argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskVL6180X */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f003 f9eb 	bl	8003bfc <osDelay>
 8000826:	e7fb      	b.n	8000820 <StartTaskVL6180X+0x8>

08000828 <StartTaskTouch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTouch */
void StartTaskTouch(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTouch */
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
    osDelayUntil (100);
 8000830:	2064      	movs	r0, #100	; 0x64
 8000832:	f003 fa11 	bl	8003c58 <osDelayUntil>
    Touch_Button.updown=Touch_Button.Get_updown();
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <StartTaskTouch+0x30>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4798      	blx	r3
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <StartTaskTouch+0x30>)
 8000842:	701a      	strb	r2, [r3, #0]
    status=osMessageQueuePut(QueueTouchHandle,&Touch_Button,0,osWaitForever);
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <StartTaskTouch+0x34>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	2200      	movs	r2, #0
 800084e:	4902      	ldr	r1, [pc, #8]	; (8000858 <StartTaskTouch+0x30>)
 8000850:	f003 fb5a 	bl	8003f08 <osMessageQueuePut>
 8000854:	60f8      	str	r0, [r7, #12]
    osDelayUntil (100);
 8000856:	e7eb      	b.n	8000830 <StartTaskTouch+0x8>
 8000858:	200032e4 	.word	0x200032e4
 800085c:	20003350 	.word	0x20003350

08000860 <StartTaskGoHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGoHome */
void StartTaskGoHome(void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGoHome */
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
    osDelayUntil (100);
 8000868:	2064      	movs	r0, #100	; 0x64
 800086a:	f003 f9f5 	bl	8003c58 <osDelayUntil>
    GoHome_Button.updown=GoHome_Button.Get_updown();
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <StartTaskGoHome+0x30>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	4798      	blx	r3
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <StartTaskGoHome+0x30>)
 800087a:	701a      	strb	r2, [r3, #0]
    status=osMessageQueuePut(QueueGoHomeHandle,&GoHome_Button,0,osWaitForever);
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <StartTaskGoHome+0x34>)
 800087e:	6818      	ldr	r0, [r3, #0]
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	2200      	movs	r2, #0
 8000886:	4902      	ldr	r1, [pc, #8]	; (8000890 <StartTaskGoHome+0x30>)
 8000888:	f003 fb3e 	bl	8003f08 <osMessageQueuePut>
 800088c:	60f8      	str	r0, [r7, #12]
    osDelayUntil (100);
 800088e:	e7eb      	b.n	8000868 <StartTaskGoHome+0x8>
 8000890:	200032a0 	.word	0x200032a0
 8000894:	20003354 	.word	0x20003354

08000898 <StartTaskUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUpdate */
void StartTaskUpdate(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUpdate */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f003 f9ab 	bl	8003bfc <osDelay>
 80008a6:	e7fb      	b.n	80008a0 <StartTaskUpdate+0x8>

080008a8 <StartTaskUsartDate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUsartDate */
void StartTaskUsartDate(void *argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUsartDate */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f003 f9a3 	bl	8003bfc <osDelay>
 80008b6:	e7fb      	b.n	80008b0 <StartTaskUsartDate+0x8>

080008b8 <StartTaskLeftWheelDire>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLeftWheelDire */
void StartTaskLeftWheelDire(void *argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLeftWheelDire */
  osStatus_t status;
  Wheel_t *Wheel=NULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    status=osMessageQueueGet(QueueLeftWheelDireHandle,(void*)Wheel,NULL,osWaitForever);
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <StartTaskLeftWheelDire+0x34>)
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	2200      	movs	r2, #0
 80008ce:	68f9      	ldr	r1, [r7, #12]
 80008d0:	f003 fb8e 	bl	8003ff0 <osMessageQueueGet>
 80008d4:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f3      	bne.n	80008c4 <StartTaskLeftWheelDire+0xc>
    {
      Wheel->Set_Dire(Wheel->dire);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	7912      	ldrb	r2, [r2, #4]
 80008e4:	4610      	mov	r0, r2
 80008e6:	4798      	blx	r3
    status=osMessageQueueGet(QueueLeftWheelDireHandle,(void*)Wheel,NULL,osWaitForever);
 80008e8:	e7ec      	b.n	80008c4 <StartTaskLeftWheelDire+0xc>
 80008ea:	bf00      	nop
 80008ec:	20003378 	.word	0x20003378

080008f0 <StartTaskRightWheelDire>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRightWheelDire */
void StartTaskRightWheelDire(void *argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRightWheelDire */
  osStatus_t status;
  Wheel_t *Wheel=NULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    status=osMessageQueueGet(QueueRightWheelDireHandle,(void*)Wheel,NULL,osWaitForever);
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <StartTaskRightWheelDire+0x34>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	2200      	movs	r2, #0
 8000906:	68f9      	ldr	r1, [r7, #12]
 8000908:	f003 fb72 	bl	8003ff0 <osMessageQueueGet>
 800090c:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f3      	bne.n	80008fc <StartTaskRightWheelDire+0xc>
    {
      Wheel->Set_Dire(Wheel->dire);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	7912      	ldrb	r2, [r2, #4]
 800091c:	4610      	mov	r0, r2
 800091e:	4798      	blx	r3
    status=osMessageQueueGet(QueueRightWheelDireHandle,(void*)Wheel,NULL,osWaitForever);
 8000920:	e7ec      	b.n	80008fc <StartTaskRightWheelDire+0xc>
 8000922:	bf00      	nop
 8000924:	20003330 	.word	0x20003330

08000928 <StartTaskPowerButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPowerButton */
void StartTaskPowerButton(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPowerButton */
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
    osDelayUntil (100);
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f003 f991 	bl	8003c58 <osDelayUntil>
    Power_Button.updown=Power_Button.Get_updown();
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <StartTaskPowerButton+0x30>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	4798      	blx	r3
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <StartTaskPowerButton+0x30>)
 8000942:	701a      	strb	r2, [r3, #0]
    status=osMessageQueuePut(QueuePowerButtonHandle,&Power_Button,0,osWaitForever);
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <StartTaskPowerButton+0x34>)
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	2200      	movs	r2, #0
 800094e:	4902      	ldr	r1, [pc, #8]	; (8000958 <StartTaskPowerButton+0x30>)
 8000950:	f003 fada 	bl	8003f08 <osMessageQueuePut>
 8000954:	60f8      	str	r0, [r7, #12]
    osDelayUntil (100);
 8000956:	e7eb      	b.n	8000930 <StartTaskPowerButton+0x8>
 8000958:	200032cc 	.word	0x200032cc
 800095c:	2000334c 	.word	0x2000334c

08000960 <StartTaskRgbLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRgbLed */
void StartTaskRgbLed(void *argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRgbLed */
  osStatus_t status;
  Led_t *Led=NULL;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    status=osMessageQueueGet(QueueRgbLedHandle,(void*)Led,NULL,osWaitForever);
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <StartTaskRgbLed+0x34>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	2200      	movs	r2, #0
 8000976:	68f9      	ldr	r1, [r7, #12]
 8000978:	f003 fb3a 	bl	8003ff0 <osMessageQueueGet>
 800097c:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f3      	bne.n	800096c <StartTaskRgbLed+0xc>
    {
      Led->Set_Power(Led->power);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	4610      	mov	r0, r2
 800098e:	4798      	blx	r3
    status=osMessageQueueGet(QueueRgbLedHandle,(void*)Led,NULL,osWaitForever);
 8000990:	e7ec      	b.n	800096c <StartTaskRgbLed+0xc>
 8000992:	bf00      	nop
 8000994:	20003324 	.word	0x20003324

08000998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ac:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <MX_GPIO_Init+0x114>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a3e      	ldr	r2, [pc, #248]	; (8000aac <MX_GPIO_Init+0x114>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <MX_GPIO_Init+0x114>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c4:	4b39      	ldr	r3, [pc, #228]	; (8000aac <MX_GPIO_Init+0x114>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a38      	ldr	r2, [pc, #224]	; (8000aac <MX_GPIO_Init+0x114>)
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b36      	ldr	r3, [pc, #216]	; (8000aac <MX_GPIO_Init+0x114>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0320 	and.w	r3, r3, #32
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b33      	ldr	r3, [pc, #204]	; (8000aac <MX_GPIO_Init+0x114>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a32      	ldr	r2, [pc, #200]	; (8000aac <MX_GPIO_Init+0x114>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <MX_GPIO_Init+0x114>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_GPIO_Init+0x114>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a2c      	ldr	r2, [pc, #176]	; (8000aac <MX_GPIO_Init+0x114>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_GPIO_Init+0x114>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0308 	and.w	r3, r3, #8
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VL6180X_SCL_GPIO_Port, VL6180X_SCL_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a12:	4827      	ldr	r0, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x118>)
 8000a14:	f001 f960 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCA9685_SDA_Pin|PCA9685_SCL_Pin|VL53L0_SDA_Pin|VL53L0_SCL_Pin
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f641 01f0 	movw	r1, #6384	; 0x18f0
 8000a1e:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0x11c>)
 8000a20:	f001 f95a 	bl	8001cd8 <HAL_GPIO_WritePin>
                          |VL6180X_SDA_BL_Pin|VL6180X_SDA_BR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin|LED_B_Pin|VL6180X_SDA_FL_Pin
 8000a24:	2200      	movs	r2, #0
 8000a26:	f64f 4107 	movw	r1, #64519	; 0xfc07
 8000a2a:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000a2c:	f001 f954 	bl	8001cd8 <HAL_GPIO_WritePin>
                          |VL6180X_SDA_FR_Pin|L_Dire1_Pin|L_Dire2_Pin|R_Dire1_Pin
                          |R_Dire2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VL6180X_SCL_Pin;
 8000a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VL6180X_SCL_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0x118>)
 8000a4a:	f000 ffeb 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Power_Button_Pin|MPU6050_Input_Pin;
 8000a4e:	f240 1301 	movw	r3, #257	; 0x101
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <MX_GPIO_Init+0x11c>)
 8000a64:	f000 ffde 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = PCA9685_SDA_Pin|PCA9685_SCL_Pin|VL53L0_SDA_Pin|VL53L0_SCL_Pin
 8000a68:	f641 03f0 	movw	r3, #6384	; 0x18f0
 8000a6c:	613b      	str	r3, [r7, #16]
                          |VL6180X_SDA_BL_Pin|VL6180X_SDA_BR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <MX_GPIO_Init+0x11c>)
 8000a82:	f000 ffcf 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin|VL6180X_SDA_FL_Pin
 8000a86:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8000a8a:	613b      	str	r3, [r7, #16]
                          |VL6180X_SDA_FR_Pin|L_Dire1_Pin|L_Dire2_Pin|R_Dire1_Pin
                          |R_Dire2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_GPIO_Init+0x120>)
 8000aa0:	f000 ffc0 	bl	8001a24 <HAL_GPIO_Init>

}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40011000 	.word	0x40011000
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40010c00 	.word	0x40010c00

08000abc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <MX_I2C1_Init+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ac8:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_I2C1_Init+0x58>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000afa:	f001 f905 	bl	8001d08 <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 f8e2 	bl	8000ccc <Error_Handler>
  }

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000339c 	.word	0x2000339c
 8000b10:	40005400 	.word	0x40005400
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_I2C_MspInit+0x90>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d132      	bne.n	8000b9e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_I2C_MspInit+0x94>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <HAL_I2C_MspInit+0x94>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_I2C_MspInit+0x94>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b56:	2312      	movs	r3, #18
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <HAL_I2C_MspInit+0x98>)
 8000b66:	f000 ff5d 	bl	8001a24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_I2C_MspInit+0x9c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <HAL_I2C_MspInit+0x9c>)
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_I2C_MspInit+0x94>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_I2C_MspInit+0x94>)
 8000b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_I2C_MspInit+0x94>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010c00 	.word	0x40010c00
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbc:	f000 fbfa 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc0:	f000 f817 	bl	8000bf2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc4:	f7ff fee8 	bl	8000998 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bc8:	f7ff fac2 	bl	8000150 <MX_ADC1_Init>
  MX_CRC_Init();
 8000bcc:	f7ff fb3a 	bl	8000244 <MX_CRC_Init>
  MX_I2C1_Init();
 8000bd0:	f7ff ff74 	bl	8000abc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000bd4:	f000 f930 	bl	8000e38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bd8:	f000 f9ae 	bl	8000f38 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bdc:	f000 fa00 	bl	8000fe0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000be0:	f000 fb4c 	bl	800127c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000be4:	f002 fefa 	bl	80039dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000be8:	f7ff fb5e 	bl	80002a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000bec:	f002 ff28 	bl	8003a40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <main+0x38>

08000bf2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b094      	sub	sp, #80	; 0x50
 8000bf6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfc:	2228      	movs	r2, #40	; 0x28
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 ffd2 	bl	8006baa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c34:	2302      	movs	r3, #2
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 f996 	bl	8001f78 <HAL_RCC_OscConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000c52:	f000 f83b 	bl	8000ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	230f      	movs	r3, #15
 8000c58:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fc00 	bl	8002478 <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c7e:	f000 f825 	bl	8000ccc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c82:	2302      	movs	r3, #2
 8000c84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fde5 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c98:	f000 f818 	bl	8000ccc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000c9c:	f001 fcd6 	bl	800264c <HAL_RCC_EnableCSS>
}
 8000ca0:	bf00      	nop
 8000ca2:	3750      	adds	r7, #80	; 0x50
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cba:	f000 fb91 	bl	80013e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40012c00 	.word	0x40012c00

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_MspInit+0x5c>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_MspInit+0x5c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_MspInit+0x5c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	61d3      	str	r3, [r2, #28]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x5c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_MspInit+0x60>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_MspInit+0x60>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000

08000d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2019      	movs	r0, #25
 8000d52:	f000 fe20 	bl	8001996 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d56:	2019      	movs	r0, #25
 8000d58:	f000 fe39 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_InitTick+0x9c>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_InitTick+0x9c>)
 8000d62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_InitTick+0x9c>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d74:	f107 0210 	add.w	r2, r7, #16
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fd04 	bl	800278c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d84:	f001 fcee 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8000d88:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <HAL_InitTick+0xa0>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	0c9b      	lsrs	r3, r3, #18
 8000d94:	3b01      	subs	r3, #1
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <HAL_InitTick+0xa8>)
 8000d9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_InitTick+0xa4>)
 8000da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_InitTick+0xa4>)
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_InitTick+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_InitTick+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <HAL_InitTick+0xa4>)
 8000dba:	f001 fe05 	bl	80029c8 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d104      	bne.n	8000dce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <HAL_InitTick+0xa4>)
 8000dc6:	f001 fe4f 	bl	8002a68 <HAL_TIM_Base_Start_IT>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3730      	adds	r7, #48	; 0x30
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	431bde83 	.word	0x431bde83
 8000de0:	200033f0 	.word	0x200033f0
 8000de4:	40012c00 	.word	0x40012c00

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000dec:	f001 fcfe 	bl	80027ec <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <HardFault_Handler+0x4>

08000dfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <BusFault_Handler+0x4>

08000e06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <UsageFault_Handler+0x4>

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM1_UP_IRQHandler+0x10>)
 8000e1e:	f001 ff6f 	bl	8002d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200033f0 	.word	0x200033f0

08000e2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	; 0x38
 8000e3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	f107 0320 	add.w	r3, r7, #32
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000e68:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e90:	4828      	ldr	r0, [pc, #160]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000e92:	f001 fd99 	bl	80029c8 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e9c:	f7ff ff16 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4821      	ldr	r0, [pc, #132]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000eae:	f002 f8ed 	bl	800308c <HAL_TIM_ConfigClockSource>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000eb8:	f7ff ff08 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ebc:	481d      	ldr	r0, [pc, #116]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000ebe:	f001 fe25 	bl	8002b0c <HAL_TIM_PWM_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ec8:	f7ff ff00 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4816      	ldr	r0, [pc, #88]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000edc:	f002 fc32 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ee6:	f7ff fef1 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eea:	2360      	movs	r3, #96	; 0x60
 8000eec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2200      	movs	r2, #0
 8000efe:	4619      	mov	r1, r3
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000f02:	f002 f805 	bl	8002f10 <HAL_TIM_PWM_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f0c:	f7ff fede 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2204      	movs	r2, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4807      	ldr	r0, [pc, #28]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000f18:	f001 fffa 	bl	8002f10 <HAL_TIM_PWM_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000f22:	f7ff fed3 	bl	8000ccc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <MX_TIM2_Init+0xfc>)
 8000f28:	f000 f948 	bl	80011bc <HAL_TIM_MspPostInit>

}
 8000f2c:	bf00      	nop
 8000f2e:	3738      	adds	r7, #56	; 0x38
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200034c8 	.word	0x200034c8

08000f38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2224      	movs	r2, #36	; 0x24
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fe2f 	bl	8006baa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f56:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <MX_TIM3_Init+0xa4>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f92:	2301      	movs	r3, #1
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000fa6:	f001 fe09 	bl	8002bbc <HAL_TIM_Encoder_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000fb0:	f7ff fe8c 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_TIM3_Init+0xa0>)
 8000fc2:	f002 fbbf 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000fcc:	f7ff fe7e 	bl	8000ccc <Error_Handler>
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	; 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20003480 	.word	0x20003480
 8000fdc:	40000400 	.word	0x40000400

08000fe0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2224      	movs	r2, #36	; 0x24
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f005 fddb 	bl	8006baa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <MX_TIM4_Init+0xa0>)
 8000ffe:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_TIM4_Init+0xa4>)
 8001000:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_TIM4_Init+0xa0>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_TIM4_Init+0xa0>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM4_Init+0xa0>)
 8001010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001014:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM4_Init+0xa0>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_TIM4_Init+0xa0>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001022:	2301      	movs	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800103a:	2301      	movs	r3, #1
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4619      	mov	r1, r3
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_TIM4_Init+0xa0>)
 800104e:	f001 fdb5 	bl	8002bbc <HAL_TIM_Encoder_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001058:	f7ff fe38 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_TIM4_Init+0xa0>)
 800106a:	f002 fb6b 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001074:	f7ff fe2a 	bl	8000ccc <Error_Handler>
  }

}
 8001078:	bf00      	nop
 800107a:	3730      	adds	r7, #48	; 0x30
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20003438 	.word	0x20003438
 8001084:	40000800 	.word	0x40000800

08001088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001098:	d10b      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_TIM_Base_MspInit+0x34>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_TIM_Base_MspInit+0x34>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_TIM_Base_MspInit+0x34>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d136      	bne.n	800114e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010e0:	4b32      	ldr	r3, [pc, #200]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001110:	2330      	movs	r3, #48	; 0x30
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4823      	ldr	r0, [pc, #140]	; (80011b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001124:	f000 fc7e 	bl	8001a24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001130:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001146:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800114c:	e028      	b.n	80011a0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d123      	bne.n	80011a0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	61d3      	str	r3, [r2, #28]
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_TIM_Encoder_MspInit+0xec>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001188:	23c0      	movs	r3, #192	; 0xc0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800119c:	f000 fc42 	bl	8001a24 <HAL_GPIO_Init>
}
 80011a0:	bf00      	nop
 80011a2:	3730      	adds	r7, #48	; 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40000400 	.word	0x40000400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40010000 	.word	0x40010000
 80011b8:	40000800 	.word	0x40000800

080011bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011da:	d142      	bne.n	8001262 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <HAL_TIM_MspPostInit+0xb0>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a22      	ldr	r2, [pc, #136]	; (800126c <HAL_TIM_MspPostInit+0xb0>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_TIM_MspPostInit+0xb0>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_TIM_MspPostInit+0xb0>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_TIM_MspPostInit+0xb0>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_TIM_MspPostInit+0xb0>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800120c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4813      	ldr	r0, [pc, #76]	; (8001270 <HAL_TIM_MspPostInit+0xb4>)
 8001222:	f000 fbff 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001226:	2308      	movs	r3, #8
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2302      	movs	r3, #2
 8001230:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <HAL_TIM_MspPostInit+0xb8>)
 800123a:	f000 fbf3 	bl	8001a24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_TIM_MspPostInit+0xbc>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_TIM_MspPostInit+0xbc>)
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	40010800 	.word	0x40010800
 8001274:	40010c00 	.word	0x40010c00
 8001278:	40010000 	.word	0x40010000

0800127c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <MX_USART1_UART_Init+0x50>)
 8001284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 80012b4:	f002 fab6 	bl	8003824 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012be:	f7ff fd05 	bl	8000ccc <Error_Handler>
  }

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20003510 	.word	0x20003510
 80012cc:	40013800 	.word	0x40013800

080012d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1c      	ldr	r2, [pc, #112]	; (800135c <HAL_UART_MspInit+0x8c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d131      	bne.n	8001354 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_UART_MspInit+0x90>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_UART_MspInit+0x90>)
 80012f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_UART_MspInit+0x90>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_UART_MspInit+0x90>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <HAL_UART_MspInit+0x90>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_UART_MspInit+0x90>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4619      	mov	r1, r3
 8001334:	480b      	ldr	r0, [pc, #44]	; (8001364 <HAL_UART_MspInit+0x94>)
 8001336:	f000 fb75 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800133a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_UART_MspInit+0x94>)
 8001350:	f000 fb68 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40013800 	.word	0x40013800
 8001360:	40021000 	.word	0x40021000
 8001364:	40010800 	.word	0x40010800

08001368 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001368:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800136a:	e003      	b.n	8001374 <LoopCopyDataInit>

0800136c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800136e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001370:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001372:	3104      	adds	r1, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001374:	480a      	ldr	r0, [pc, #40]	; (80013a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001378:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800137a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800137c:	d3f6      	bcc.n	800136c <CopyDataInit>
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001380:	e002      	b.n	8001388 <LoopFillZerobss>

08001382 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001384:	f842 3b04 	str.w	r3, [r2], #4

08001388 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800138a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800138c:	d3f9      	bcc.n	8001382 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138e:	f7ff fd4d 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f005 fbdb 	bl	8006b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001396:	f7ff fc0f 	bl	8000bb8 <main>
  bx lr
 800139a:	4770      	bx	lr
  ldr r3, =_sidata
 800139c:	0800718c 	.word	0x0800718c
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013a4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80013a8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80013ac:	20003594 	.word	0x20003594

080013b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_2_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x28>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x28>)
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 fadb 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fcb6 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fc82 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x1c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x20>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_IncTick+0x20>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000008 	.word	0x20000008
 8001400:	20003550 	.word	0x20003550

08001404 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <HAL_GetTick+0x10>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20003550 	.word	0x20003550

08001418 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0be      	b.n	80015b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	d109      	bne.n	800145c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7fe feb8 	bl	80001cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f9ab 	bl	80017b8 <ADC_ConversionStop_Disable>
 8001462:	4603      	mov	r3, r0
 8001464:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 8099 	bne.w	80015a6 <HAL_ADC_Init+0x18e>
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 8095 	bne.w	80015a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001484:	f023 0302 	bic.w	r3, r3, #2
 8001488:	f043 0202 	orr.w	r2, r3, #2
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001498:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7b1b      	ldrb	r3, [r3, #12]
 800149e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b0:	d003      	beq.n	80014ba <HAL_ADC_Init+0xa2>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <HAL_ADC_Init+0xa8>
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	e000      	b.n	80014c2 <HAL_ADC_Init+0xaa>
 80014c0:	2300      	movs	r3, #0
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7d1b      	ldrb	r3, [r3, #20]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d119      	bne.n	8001504 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7b1b      	ldrb	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	3b01      	subs	r3, #1
 80014de:	035a      	lsls	r2, r3, #13
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	e00b      	b.n	8001504 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	f043 0220 	orr.w	r2, r3, #32
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_ADC_Init+0x1a8>)
 8001520:	4013      	ands	r3, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	430b      	orrs	r3, r1
 800152a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001534:	d003      	beq.n	800153e <HAL_ADC_Init+0x126>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d104      	bne.n	8001548 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	3b01      	subs	r3, #1
 8001544:	051b      	lsls	r3, r3, #20
 8001546:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	430a      	orrs	r2, r1
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_ADC_Init+0x1ac>)
 8001564:	4013      	ands	r3, r2
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	d10b      	bne.n	8001584 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	f023 0303 	bic.w	r3, r3, #3
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001582:	e018      	b.n	80015b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	f023 0312 	bic.w	r3, r3, #18
 800158c:	f043 0210 	orr.w	r2, r3, #16
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015a4:	e007      	b.n	80015b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	ffe1f7fd 	.word	0xffe1f7fd
 80015c4:	ff1f0efe 	.word	0xff1f0efe

080015c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x20>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e0dc      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x1da>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b06      	cmp	r3, #6
 80015f6:	d81c      	bhi.n	8001632 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	3b05      	subs	r3, #5
 800160a:	221f      	movs	r2, #31
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b05      	subs	r3, #5
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	635a      	str	r2, [r3, #52]	; 0x34
 8001630:	e03c      	b.n	80016ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d81c      	bhi.n	8001674 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	3b23      	subs	r3, #35	; 0x23
 800164c:	221f      	movs	r2, #31
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	4019      	ands	r1, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3b23      	subs	r3, #35	; 0x23
 8001666:	fa00 f203 	lsl.w	r2, r0, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
 8001672:	e01b      	b.n	80016ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b41      	subs	r3, #65	; 0x41
 8001686:	221f      	movs	r2, #31
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b41      	subs	r3, #65	; 0x41
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b09      	cmp	r3, #9
 80016b2:	d91c      	bls.n	80016ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68d9      	ldr	r1, [r3, #12]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	3b1e      	subs	r3, #30
 80016c6:	2207      	movs	r2, #7
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4019      	ands	r1, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6898      	ldr	r0, [r3, #8]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	3b1e      	subs	r3, #30
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	e019      	b.n	8001722 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6919      	ldr	r1, [r3, #16]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	2207      	movs	r2, #7
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	4019      	ands	r1, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	6898      	ldr	r0, [r3, #8]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	fa00 f203 	lsl.w	r2, r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b10      	cmp	r3, #16
 8001728:	d003      	beq.n	8001732 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800172e:	2b11      	cmp	r3, #17
 8001730:	d132      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_ADC_ConfigChannel+0x1e4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d125      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d126      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001758:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b10      	cmp	r3, #16
 8001760:	d11a      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	0c9a      	lsrs	r2, r3, #18
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001778:	e002      	b.n	8001780 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3b01      	subs	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f9      	bne.n	800177a <HAL_ADC_ConfigChannel+0x1b2>
 8001786:	e007      	b.n	8001798 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f043 0220 	orr.w	r2, r3, #32
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40012400 	.word	0x40012400
 80017b0:	20000000 	.word	0x20000000
 80017b4:	431bde83 	.word	0x431bde83

080017b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d127      	bne.n	8001822 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0201 	bic.w	r2, r2, #1
 80017e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017e2:	f7ff fe0f 	bl	8001404 <HAL_GetTick>
 80017e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017e8:	e014      	b.n	8001814 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017ea:	f7ff fe0b 	bl	8001404 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d90d      	bls.n	8001814 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	f043 0210 	orr.w	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e007      	b.n	8001824 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b01      	cmp	r3, #1
 8001820:	d0e3      	beq.n	80017ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4906      	ldr	r1, [pc, #24]	; (80018c4 <__NVIC_EnableIRQ+0x34>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff4f 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff64 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ffb2 	bl	800191c <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff81 	bl	80018c8 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff57 	bl	8001890 <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e00e      	b.n	8001a1a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	795b      	ldrb	r3, [r3, #5]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7fe fc2d 	bl	800026c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b08b      	sub	sp, #44	; 0x2c
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e127      	b.n	8001c88 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 8116 	bne.w	8001c82 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b12      	cmp	r3, #18
 8001a5c:	d034      	beq.n	8001ac8 <HAL_GPIO_Init+0xa4>
 8001a5e:	2b12      	cmp	r3, #18
 8001a60:	d80d      	bhi.n	8001a7e <HAL_GPIO_Init+0x5a>
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d02b      	beq.n	8001abe <HAL_GPIO_Init+0x9a>
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d804      	bhi.n	8001a74 <HAL_GPIO_Init+0x50>
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d031      	beq.n	8001ad2 <HAL_GPIO_Init+0xae>
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d01c      	beq.n	8001aac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a72:	e048      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d043      	beq.n	8001b00 <HAL_GPIO_Init+0xdc>
 8001a78:	2b11      	cmp	r3, #17
 8001a7a:	d01b      	beq.n	8001ab4 <HAL_GPIO_Init+0x90>
          break;
 8001a7c:	e043      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a7e:	4a89      	ldr	r2, [pc, #548]	; (8001ca4 <HAL_GPIO_Init+0x280>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d026      	beq.n	8001ad2 <HAL_GPIO_Init+0xae>
 8001a84:	4a87      	ldr	r2, [pc, #540]	; (8001ca4 <HAL_GPIO_Init+0x280>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d806      	bhi.n	8001a98 <HAL_GPIO_Init+0x74>
 8001a8a:	4a87      	ldr	r2, [pc, #540]	; (8001ca8 <HAL_GPIO_Init+0x284>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d020      	beq.n	8001ad2 <HAL_GPIO_Init+0xae>
 8001a90:	4a86      	ldr	r2, [pc, #536]	; (8001cac <HAL_GPIO_Init+0x288>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01d      	beq.n	8001ad2 <HAL_GPIO_Init+0xae>
          break;
 8001a96:	e036      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a98:	4a85      	ldr	r2, [pc, #532]	; (8001cb0 <HAL_GPIO_Init+0x28c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0xae>
 8001a9e:	4a85      	ldr	r2, [pc, #532]	; (8001cb4 <HAL_GPIO_Init+0x290>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d016      	beq.n	8001ad2 <HAL_GPIO_Init+0xae>
 8001aa4:	4a84      	ldr	r2, [pc, #528]	; (8001cb8 <HAL_GPIO_Init+0x294>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0xae>
          break;
 8001aaa:	e02c      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	623b      	str	r3, [r7, #32]
          break;
 8001ab2:	e028      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	623b      	str	r3, [r7, #32]
          break;
 8001abc:	e023      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	623b      	str	r3, [r7, #32]
          break;
 8001ac6:	e01e      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	330c      	adds	r3, #12
 8001ace:	623b      	str	r3, [r7, #32]
          break;
 8001ad0:	e019      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ada:	2304      	movs	r3, #4
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e012      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	611a      	str	r2, [r3, #16]
          break;
 8001af2:	e008      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af4:	2308      	movs	r3, #8
 8001af6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	615a      	str	r2, [r3, #20]
          break;
 8001afe:	e002      	b.n	8001b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
          break;
 8001b04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2bff      	cmp	r3, #255	; 0xff
 8001b0a:	d801      	bhi.n	8001b10 <HAL_GPIO_Init+0xec>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	e001      	b.n	8001b14 <HAL_GPIO_Init+0xf0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2bff      	cmp	r3, #255	; 0xff
 8001b1a:	d802      	bhi.n	8001b22 <HAL_GPIO_Init+0xfe>
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x104>
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	3b08      	subs	r3, #8
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	210f      	movs	r1, #15
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	401a      	ands	r2, r3
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	431a      	orrs	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8096 	beq.w	8001c82 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b56:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_GPIO_Init+0x298>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	4a58      	ldr	r2, [pc, #352]	; (8001cbc <HAL_GPIO_Init+0x298>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6193      	str	r3, [r2, #24]
 8001b62:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <HAL_GPIO_Init+0x298>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b6e:	4a54      	ldr	r2, [pc, #336]	; (8001cc0 <HAL_GPIO_Init+0x29c>)
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <HAL_GPIO_Init+0x2a0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0x19e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <HAL_GPIO_Init+0x2a4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00d      	beq.n	8001bbe <HAL_GPIO_Init+0x19a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d007      	beq.n	8001bba <HAL_GPIO_Init+0x196>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a48      	ldr	r2, [pc, #288]	; (8001cd0 <HAL_GPIO_Init+0x2ac>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_GPIO_Init+0x192>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x1a0>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x1a0>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x1a0>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x1a0>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bd4:	493a      	ldr	r1, [pc, #232]	; (8001cc0 <HAL_GPIO_Init+0x29c>)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bee:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4938      	ldr	r1, [pc, #224]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
 8001bfa:	e006      	b.n	8001c0a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bfc:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4933      	ldr	r1, [pc, #204]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	492e      	ldr	r1, [pc, #184]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
 8001c22:	e006      	b.n	8001c32 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c24:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	4929      	ldr	r1, [pc, #164]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4924      	ldr	r1, [pc, #144]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
 8001c4a:	e006      	b.n	8001c5a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	491f      	ldr	r1, [pc, #124]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	491a      	ldr	r1, [pc, #104]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60cb      	str	r3, [r1, #12]
 8001c72:	e006      	b.n	8001c82 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	4915      	ldr	r1, [pc, #84]	; (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	3301      	adds	r3, #1
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f47f aed0 	bne.w	8001a38 <HAL_GPIO_Init+0x14>
  }
}
 8001c98:	bf00      	nop
 8001c9a:	372c      	adds	r7, #44	; 0x2c
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	10210000 	.word	0x10210000
 8001ca8:	10110000 	.word	0x10110000
 8001cac:	10120000 	.word	0x10120000
 8001cb0:	10310000 	.word	0x10310000
 8001cb4:	10320000 	.word	0x10320000
 8001cb8:	10220000 	.word	0x10220000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40010800 	.word	0x40010800
 8001cc8:	40010c00 	.word	0x40010c00
 8001ccc:	40011000 	.word	0x40011000
 8001cd0:	40011400 	.word	0x40011400
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce8:	787b      	ldrb	r3, [r7, #1]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf4:	e003      	b.n	8001cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	041a      	lsls	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e11f      	b.n	8001f5a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe fef2 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	; 0x24
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d6c:	f000 fce6 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8001d70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4a7b      	ldr	r2, [pc, #492]	; (8001f64 <HAL_I2C_Init+0x25c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d807      	bhi.n	8001d8c <HAL_I2C_Init+0x84>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4a7a      	ldr	r2, [pc, #488]	; (8001f68 <HAL_I2C_Init+0x260>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	e006      	b.n	8001d9a <HAL_I2C_Init+0x92>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a77      	ldr	r2, [pc, #476]	; (8001f6c <HAL_I2C_Init+0x264>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	bf94      	ite	ls
 8001d94:	2301      	movls	r3, #1
 8001d96:	2300      	movhi	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0db      	b.n	8001f5a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a72      	ldr	r2, [pc, #456]	; (8001f70 <HAL_I2C_Init+0x268>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9b      	lsrs	r3, r3, #18
 8001dac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4a64      	ldr	r2, [pc, #400]	; (8001f64 <HAL_I2C_Init+0x25c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d802      	bhi.n	8001ddc <HAL_I2C_Init+0xd4>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	e009      	b.n	8001df0 <HAL_I2C_Init+0xe8>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	4a63      	ldr	r2, [pc, #396]	; (8001f74 <HAL_I2C_Init+0x26c>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	3301      	adds	r3, #1
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4956      	ldr	r1, [pc, #344]	; (8001f64 <HAL_I2C_Init+0x25c>)
 8001e0c:	428b      	cmp	r3, r1
 8001e0e:	d80d      	bhi.n	8001e2c <HAL_I2C_Init+0x124>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e59      	subs	r1, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	bf38      	it	cc
 8001e28:	2304      	movcc	r3, #4
 8001e2a:	e04f      	b.n	8001ecc <HAL_I2C_Init+0x1c4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d111      	bne.n	8001e58 <HAL_I2C_Init+0x150>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	440b      	add	r3, r1
 8001e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e012      	b.n	8001e7e <HAL_I2C_Init+0x176>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e58      	subs	r0, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	0099      	lsls	r1, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Init+0x17e>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e022      	b.n	8001ecc <HAL_I2C_Init+0x1c4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10e      	bne.n	8001eac <HAL_I2C_Init+0x1a4>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1e58      	subs	r0, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6859      	ldr	r1, [r3, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	440b      	add	r3, r1
 8001e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eaa:	e00f      	b.n	8001ecc <HAL_I2C_Init+0x1c4>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e58      	subs	r0, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	0099      	lsls	r1, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	6809      	ldr	r1, [r1, #0]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6911      	ldr	r1, [r2, #16]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68d2      	ldr	r2, [r2, #12]
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	000186a0 	.word	0x000186a0
 8001f68:	001e847f 	.word	0x001e847f
 8001f6c:	003d08ff 	.word	0x003d08ff
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	10624dd3 	.word	0x10624dd3

08001f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e26c      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8087 	beq.w	80020a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f98:	4b92      	ldr	r3, [pc, #584]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d00c      	beq.n	8001fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa4:	4b8f      	ldr	r3, [pc, #572]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d112      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5e>
 8001fb0:	4b8c      	ldr	r3, [pc, #560]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbe:	4b89      	ldr	r3, [pc, #548]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d06c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x12c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d168      	bne.n	80020a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e246      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x76>
 8001fe0:	4b80      	ldr	r3, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a7f      	ldr	r2, [pc, #508]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e02e      	b.n	800204c <HAL_RCC_OscConfig+0xd4>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x98>
 8001ff6:	4b7b      	ldr	r3, [pc, #492]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a7a      	ldr	r2, [pc, #488]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xd4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0xbc>
 800201a:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a71      	ldr	r2, [pc, #452]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a6e      	ldr	r2, [pc, #440]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xd4>
 8002034:	4b6b      	ldr	r3, [pc, #428]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a6a      	ldr	r2, [pc, #424]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b68      	ldr	r3, [pc, #416]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a67      	ldr	r2, [pc, #412]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff f9d6 	bl	8001404 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff f9d2 	bl	8001404 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1fa      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b5d      	ldr	r3, [pc, #372]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xe4>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff f9c2 	bl	8001404 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff f9be 	bl	8001404 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1e6      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x10c>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d063      	beq.n	800217a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b2:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020be:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d11c      	bne.n	8002104 <HAL_RCC_OscConfig+0x18c>
 80020ca:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d116      	bne.n	8002104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4b43      	ldr	r3, [pc, #268]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_RCC_OscConfig+0x176>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e1ba      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4939      	ldr	r1, [pc, #228]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e03a      	b.n	800217a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210c:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7ff f977 	bl	8001404 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211a:	f7ff f973 	bl	8001404 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e19b      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4927      	ldr	r1, [pc, #156]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff f956 	bl	8001404 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215c:	f7ff f952 	bl	8001404 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e17a      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d03a      	beq.n	80021fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d019      	beq.n	80021c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218e:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_RCC_OscConfig+0x274>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002194:	f7ff f936 	bl	8001404 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff f932 	bl	8001404 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e15a      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ba:	2001      	movs	r0, #1
 80021bc:	f000 fb2a 	bl	8002814 <RCC_Delay>
 80021c0:	e01c      	b.n	80021fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_OscConfig+0x274>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7ff f91c 	bl	8001404 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ce:	e00f      	b.n	80021f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d0:	f7ff f918 	bl	8001404 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d908      	bls.n	80021f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e140      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	42420000 	.word	0x42420000
 80021ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b9e      	ldr	r3, [pc, #632]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e9      	bne.n	80021d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80a6 	beq.w	8002356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b97      	ldr	r3, [pc, #604]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10d      	bne.n	8002236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	4b94      	ldr	r3, [pc, #592]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a93      	ldr	r2, [pc, #588]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	61d3      	str	r3, [r2, #28]
 8002226:	4b91      	ldr	r3, [pc, #580]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002232:	2301      	movs	r3, #1
 8002234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	4b8e      	ldr	r3, [pc, #568]	; (8002470 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d118      	bne.n	8002274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002242:	4b8b      	ldr	r3, [pc, #556]	; (8002470 <HAL_RCC_OscConfig+0x4f8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a8a      	ldr	r2, [pc, #552]	; (8002470 <HAL_RCC_OscConfig+0x4f8>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224e:	f7ff f8d9 	bl	8001404 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002256:	f7ff f8d5 	bl	8001404 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e0fd      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b81      	ldr	r3, [pc, #516]	; (8002470 <HAL_RCC_OscConfig+0x4f8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x312>
 800227c:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a7a      	ldr	r2, [pc, #488]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6213      	str	r3, [r2, #32]
 8002288:	e02d      	b.n	80022e6 <HAL_RCC_OscConfig+0x36e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x334>
 8002292:	4b76      	ldr	r3, [pc, #472]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a75      	ldr	r2, [pc, #468]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	4b73      	ldr	r3, [pc, #460]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a72      	ldr	r2, [pc, #456]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	e01c      	b.n	80022e6 <HAL_RCC_OscConfig+0x36e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x356>
 80022b4:	4b6d      	ldr	r3, [pc, #436]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a6c      	ldr	r2, [pc, #432]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	4b6a      	ldr	r3, [pc, #424]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4a69      	ldr	r2, [pc, #420]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6213      	str	r3, [r2, #32]
 80022cc:	e00b      	b.n	80022e6 <HAL_RCC_OscConfig+0x36e>
 80022ce:	4b67      	ldr	r3, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a66      	ldr	r2, [pc, #408]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6213      	str	r3, [r2, #32]
 80022da:	4b64      	ldr	r3, [pc, #400]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a63      	ldr	r2, [pc, #396]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7ff f889 	bl	8001404 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7ff f885 	bl	8001404 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0ab      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ee      	beq.n	80022f6 <HAL_RCC_OscConfig+0x37e>
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7ff f873 	bl	8001404 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7ff f86f 	bl	8001404 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e095      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b48      	ldr	r3, [pc, #288]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a47      	ldr	r2, [pc, #284]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8081 	beq.w	8002462 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002360:	4b42      	ldr	r3, [pc, #264]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d061      	beq.n	8002430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d146      	bne.n	8002402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_RCC_OscConfig+0x4fc>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff f843 	bl	8001404 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7ff f83f 	bl	8001404 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e067      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a8:	d108      	bne.n	80023bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	492d      	ldr	r1, [pc, #180]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023bc:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a19      	ldr	r1, [r3, #32]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	430b      	orrs	r3, r1
 80023ce:	4927      	ldr	r1, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x4fc>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7ff f813 	bl	8001404 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e2:	f7ff f80f 	bl	8001404 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e037      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x46a>
 8002400:	e02f      	b.n	8002462 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <HAL_RCC_OscConfig+0x4fc>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fffc 	bl	8001404 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe fff8 	bl	8001404 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e020      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x498>
 800242e:	e018      	b.n	8002462 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_OscConfig+0x4f4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
 8002474:	42420060 	.word	0x42420060

08002478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d0      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4965      	ldr	r1, [pc, #404]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d040      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e073      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4936      	ldr	r1, [pc, #216]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7fe ff4c 	bl	8001404 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe ff48 	bl	8001404 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e053      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d210      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4922      	ldr	r1, [pc, #136]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f82d 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 800260a:	4601      	mov	r1, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	5cd3      	ldrb	r3, [r2, r3]
 800261a:	fa21 f303 	lsr.w	r3, r1, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1cc>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fb88 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000
 800263c:	40021000 	.word	0x40021000
 8002640:	0800716c 	.word	0x0800716c
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCC_EnableCSS+0x14>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	4242004c 	.word	0x4242004c

08002664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b490      	push	{r4, r7}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_GetSysClockFreq+0xb0>)
 800266c:	1d3c      	adds	r4, r7, #4
 800266e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b04      	cmp	r3, #4
 800269c:	d002      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x40>
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x46>
 80026a2:	e02d      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026a6:	623b      	str	r3, [r7, #32]
      break;
 80026a8:	e02d      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	0c9b      	lsrs	r3, r3, #18
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026b6:	4413      	add	r3, r2
 80026b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0c5b      	lsrs	r3, r3, #17
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026d6:	4413      	add	r3, r2
 80026d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e2:	fb02 f203 	mul.w	r2, r2, r3
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	e004      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	623b      	str	r3, [r7, #32]
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002702:	623b      	str	r3, [r7, #32]
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	6a3b      	ldr	r3, [r7, #32]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc90      	pop	{r4, r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	08006db8 	.word	0x08006db8
 8002718:	08006dc8 	.word	0x08006dc8
 800271c:	40021000 	.word	0x40021000
 8002720:	007a1200 	.word	0x007a1200
 8002724:	003d0900 	.word	0x003d0900

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <HAL_RCC_GetHCLKFreq+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff2 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002744:	4601      	mov	r1, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4a03      	ldr	r2, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	0800717c 	.word	0x0800717c

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002768:	f7ff ffde 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 800276c:	4601      	mov	r1, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0adb      	lsrs	r3, r3, #11
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4a03      	ldr	r2, [pc, #12]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	0800717c 	.word	0x0800717c

0800278c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	220f      	movs	r2, #15
 800279a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_RCC_GetClockConfig+0x58>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0203 	and.w	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_RCC_GetClockConfig+0x58>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_GetClockConfig+0x58>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_RCC_GetClockConfig+0x58>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	08db      	lsrs	r3, r3, #3
 80027c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_GetClockConfig+0x5c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0207 	and.w	r2, r3, #7
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_NMI_IRQHandler+0x20>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d104      	bne.n	8002806 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80027fc:	f000 f828 	bl	8002850 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	701a      	strb	r2, [r3, #0]
  }
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	4002100a 	.word	0x4002100a

08002814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <RCC_Delay+0x34>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0a      	ldr	r2, [pc, #40]	; (800284c <RCC_Delay+0x38>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0a5b      	lsrs	r3, r3, #9
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	fb02 f303 	mul.w	r3, r2, r3
 800282e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002830:	bf00      	nop
  }
  while (Delay --);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	60fa      	str	r2, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f9      	bne.n	8002830 <RCC_Delay+0x1c>
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000000 	.word	0x20000000
 800284c:	10624dd3 	.word	0x10624dd3

08002850 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d07d      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287c:	4b4f      	ldr	r3, [pc, #316]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002892:	61d3      	str	r3, [r2, #28]
 8002894:	4b49      	ldr	r3, [pc, #292]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a0:	2301      	movs	r3, #1
 80028a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b46      	ldr	r3, [pc, #280]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d118      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b0:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a42      	ldr	r2, [pc, #264]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028bc:	f7fe fda2 	bl	8001404 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	e008      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c4:	f7fe fd9e 	bl	8001404 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e06d      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02e      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d027      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002916:	4a29      	ldr	r2, [pc, #164]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d014      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe fd6d 	bl	8001404 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fd69 	bl	8001404 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e036      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ee      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4917      	ldr	r1, [pc, #92]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	4313      	orrs	r3, r2
 8002960:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002972:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	490b      	ldr	r1, [pc, #44]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42420440 	.word	0x42420440

080029c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e041      	b.n	8002a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fb4a 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 fc1c 	bl	8003244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e03a      	b.n	8002af6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <HAL_TIM_Base_Start_IT+0x98>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x58>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d009      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x58>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x58>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_TIM_Base_Start_IT+0xa0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d111      	bne.n	8002ae4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d010      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae2:	e007      	b.n	8002af4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800

08002b0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e041      	b.n	8002ba2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f839 	bl	8002baa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f000 fb7a 	bl	8003244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e093      	b.n	8002cf8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe fa6b 	bl	80010c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c00:	f023 0307 	bic.w	r3, r3, #7
 8002c04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f000 fb17 	bl	8003244 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c5c:	f023 030c 	bic.w	r3, r3, #12
 8002c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	011a      	lsls	r2, r3, #4
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	031b      	lsls	r3, r3, #12
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d122      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d11b      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0202 	mvn.w	r2, #2
 8002d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa62 	bl	800320c <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fa55 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fa64 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0204 	mvn.w	r2, #4
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa38 	bl	800320c <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa2b 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fa3a 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d122      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d11b      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0208 	mvn.w	r2, #8
 8002dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa0e 	bl	800320c <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa01 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fa10 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0210 	mvn.w	r2, #16
 8002e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9e4 	bl	800320c <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9d7 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f9e6 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10e      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d107      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0201 	mvn.w	r2, #1
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd ff12 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b80      	cmp	r3, #128	; 0x80
 8002e90:	d10e      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b80      	cmp	r3, #128	; 0x80
 8002e9e:	d107      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fcb1 	bl	8003812 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d10e      	bne.n	8002edc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	d107      	bne.n	8002edc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f9aa 	bl	8003230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d10e      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d107      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0220 	mvn.w	r2, #32
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fc7c 	bl	8003800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0ac      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	f200 809f 	bhi.w	8003078 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f3a:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f40:	08002f75 	.word	0x08002f75
 8002f44:	08003079 	.word	0x08003079
 8002f48:	08003079 	.word	0x08003079
 8002f4c:	08003079 	.word	0x08003079
 8002f50:	08002fb5 	.word	0x08002fb5
 8002f54:	08003079 	.word	0x08003079
 8002f58:	08003079 	.word	0x08003079
 8002f5c:	08003079 	.word	0x08003079
 8002f60:	08002ff7 	.word	0x08002ff7
 8002f64:	08003079 	.word	0x08003079
 8002f68:	08003079 	.word	0x08003079
 8002f6c:	08003079 	.word	0x08003079
 8002f70:	08003037 	.word	0x08003037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f9c4 	bl	8003308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6999      	ldr	r1, [r3, #24]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	619a      	str	r2, [r3, #24]
      break;
 8002fb2:	e062      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fa0a 	bl	80033d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6999      	ldr	r1, [r3, #24]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	021a      	lsls	r2, r3, #8
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	619a      	str	r2, [r3, #24]
      break;
 8002ff4:	e041      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fa53 	bl	80034a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69da      	ldr	r2, [r3, #28]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0208 	orr.w	r2, r2, #8
 8003010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0204 	bic.w	r2, r2, #4
 8003020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69d9      	ldr	r1, [r3, #28]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	61da      	str	r2, [r3, #28]
      break;
 8003034:	e021      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fa9d 	bl	800357c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69d9      	ldr	r1, [r3, #28]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	021a      	lsls	r2, r3, #8
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	61da      	str	r2, [r3, #28]
      break;
 8003076:	e000      	b.n	800307a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x18>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0a6      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x166>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d067      	beq.n	80031ac <HAL_TIM_ConfigClockSource+0x120>
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d80b      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x6c>
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d073      	beq.n	80031cc <HAL_TIM_ConfigClockSource+0x140>
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d802      	bhi.n	80030ee <HAL_TIM_ConfigClockSource+0x62>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d06f      	beq.n	80031cc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030ec:	e078      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d06c      	beq.n	80031cc <HAL_TIM_ConfigClockSource+0x140>
 80030f2:	2b30      	cmp	r3, #48	; 0x30
 80030f4:	d06a      	beq.n	80031cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030f6:	e073      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030f8:	2b70      	cmp	r3, #112	; 0x70
 80030fa:	d00d      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x8c>
 80030fc:	2b70      	cmp	r3, #112	; 0x70
 80030fe:	d804      	bhi.n	800310a <HAL_TIM_ConfigClockSource+0x7e>
 8003100:	2b50      	cmp	r3, #80	; 0x50
 8003102:	d033      	beq.n	800316c <HAL_TIM_ConfigClockSource+0xe0>
 8003104:	2b60      	cmp	r3, #96	; 0x60
 8003106:	d041      	beq.n	800318c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003108:	e06a      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310e:	d066      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x152>
 8003110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003114:	d017      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003116:	e063      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6899      	ldr	r1, [r3, #8]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f000 faed 	bl	8003706 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800313a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]
      break;
 8003144:	e04c      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6899      	ldr	r1, [r3, #8]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f000 fad6 	bl	8003706 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003168:	609a      	str	r2, [r3, #8]
      break;
 800316a:	e039      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	461a      	mov	r2, r3
 800317a:	f000 fa4d 	bl	8003618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2150      	movs	r1, #80	; 0x50
 8003184:	4618      	mov	r0, r3
 8003186:	f000 faa4 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 800318a:	e029      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	461a      	mov	r2, r3
 800319a:	f000 fa6b 	bl	8003674 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2160      	movs	r1, #96	; 0x60
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fa94 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 80031aa:	e019      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f000 fa2d 	bl	8003618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2140      	movs	r1, #64	; 0x40
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fa84 	bl	80036d2 <TIM_ITRx_SetConfig>
      break;
 80031ca:	e009      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 fa7b 	bl	80036d2 <TIM_ITRx_SetConfig>
        break;
 80031dc:	e000      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
	...

08003244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a29      	ldr	r2, [pc, #164]	; (80032fc <TIM_Base_SetConfig+0xb8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00b      	beq.n	8003274 <TIM_Base_SetConfig+0x30>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d007      	beq.n	8003274 <TIM_Base_SetConfig+0x30>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a26      	ldr	r2, [pc, #152]	; (8003300 <TIM_Base_SetConfig+0xbc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_Base_SetConfig+0x30>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a25      	ldr	r2, [pc, #148]	; (8003304 <TIM_Base_SetConfig+0xc0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d108      	bne.n	8003286 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <TIM_Base_SetConfig+0xb8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00b      	beq.n	80032a6 <TIM_Base_SetConfig+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003294:	d007      	beq.n	80032a6 <TIM_Base_SetConfig+0x62>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <TIM_Base_SetConfig+0xbc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d003      	beq.n	80032a6 <TIM_Base_SetConfig+0x62>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <TIM_Base_SetConfig+0xc0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d108      	bne.n	80032b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a07      	ldr	r2, [pc, #28]	; (80032fc <TIM_Base_SetConfig+0xb8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d103      	bne.n	80032ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	615a      	str	r2, [r3, #20]
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	40000400 	.word	0x40000400
 8003304:	40000800 	.word	0x40000800

08003308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f023 0201 	bic.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f023 0302 	bic.w	r3, r3, #2
 8003350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <TIM_OC1_SetConfig+0xc8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10c      	bne.n	800337e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f023 0308 	bic.w	r3, r3, #8
 800336a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f023 0304 	bic.w	r3, r3, #4
 800337c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <TIM_OC1_SetConfig+0xc8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d111      	bne.n	80033aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800338c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	621a      	str	r2, [r3, #32]
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40012c00 	.word	0x40012c00

080033d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f023 0210 	bic.w	r2, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0320 	bic.w	r3, r3, #32
 800341e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <TIM_OC2_SetConfig+0xd0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10d      	bne.n	8003450 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800343a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <TIM_OC2_SetConfig+0xd0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d113      	bne.n	8003480 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800345e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	40012c00 	.word	0x40012c00

080034a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <TIM_OC3_SetConfig+0xd0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10d      	bne.n	8003522 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800350c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <TIM_OC3_SetConfig+0xd0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d113      	bne.n	8003552 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	621a      	str	r2, [r3, #32]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40012c00 	.word	0x40012c00

0800357c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	031b      	lsls	r3, r3, #12
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <TIM_OC4_SetConfig+0x98>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d109      	bne.n	80035f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	40012c00 	.word	0x40012c00

08003618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f023 0201 	bic.w	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 030a 	bic.w	r3, r3, #10
 8003654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f023 0210 	bic.w	r2, r3, #16
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800369e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	031b      	lsls	r3, r3, #12
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	621a      	str	r2, [r3, #32]
}
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f043 0307 	orr.w	r3, r3, #7
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003706:	b480      	push	{r7}
 8003708:	b087      	sub	sp, #28
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003720:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	021a      	lsls	r2, r3, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	431a      	orrs	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4313      	orrs	r3, r2
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	609a      	str	r2, [r3, #8]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003758:	2302      	movs	r3, #2
 800375a:	e046      	b.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00e      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d009      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a10      	ldr	r2, [pc, #64]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10c      	bne.n	80037d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800

08003800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e03f      	b.n	80038b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd fd40 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f829 	bl	80038c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800388c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800389c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038fa:	f023 030c 	bic.w	r3, r3, #12
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	430b      	orrs	r3, r1
 8003906:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2c      	ldr	r2, [pc, #176]	; (80039d4 <UART_SetConfig+0x114>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d103      	bne.n	8003930 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7fe ff1c 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	e002      	b.n	8003936 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7fe ff04 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003934:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009a      	lsls	r2, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	4a22      	ldr	r2, [pc, #136]	; (80039d8 <UART_SetConfig+0x118>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	0119      	lsls	r1, r3, #4
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009a      	lsls	r2, r3, #2
 8003960:	441a      	add	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	fbb2 f2f3 	udiv	r2, r2, r3
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <UART_SetConfig+0x118>)
 800396e:	fba3 0302 	umull	r0, r3, r3, r2
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2064      	movs	r0, #100	; 0x64
 8003976:	fb00 f303 	mul.w	r3, r0, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	3332      	adds	r3, #50	; 0x32
 8003980:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <UART_SetConfig+0x118>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800398c:	4419      	add	r1, r3
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009a      	lsls	r2, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <UART_SetConfig+0x118>)
 80039a6:	fba3 0302 	umull	r0, r3, r3, r2
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2064      	movs	r0, #100	; 0x64
 80039ae:	fb00 f303 	mul.w	r3, r0, r3
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	3332      	adds	r3, #50	; 0x32
 80039b8:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <UART_SetConfig+0x118>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	f003 020f 	and.w	r2, r3, #15
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	440a      	add	r2, r1
 80039ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40013800 	.word	0x40013800
 80039d8:	51eb851f 	.word	0x51eb851f

080039dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e2:	f3ef 8305 	mrs	r3, IPSR
 80039e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80039e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ee:	f3ef 8310 	mrs	r3, PRIMASK
 80039f2:	607b      	str	r3, [r7, #4]
  return(result);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <osKernelInitialize+0x32>
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <osKernelInitialize+0x60>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d109      	bne.n	8003a16 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a02:	f3ef 8311 	mrs	r3, BASEPRI
 8003a06:	603b      	str	r3, [r7, #0]
  return(result);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003a0e:	f06f 0305 	mvn.w	r3, #5
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e00c      	b.n	8003a30 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <osKernelInitialize+0x60>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d105      	bne.n	8003a2a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003a1e:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <osKernelInitialize+0x60>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e002      	b.n	8003a30 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a30:	68fb      	ldr	r3, [r7, #12]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	2000002c 	.word	0x2000002c

08003a40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a46:	f3ef 8305 	mrs	r3, IPSR
 8003a4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a52:	f3ef 8310 	mrs	r3, PRIMASK
 8003a56:	607b      	str	r3, [r7, #4]
  return(result);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <osKernelStart+0x32>
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <osKernelStart+0x64>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d109      	bne.n	8003a7a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a66:	f3ef 8311 	mrs	r3, BASEPRI
 8003a6a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003a72:	f06f 0305 	mvn.w	r3, #5
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e00e      	b.n	8003a98 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <osKernelStart+0x64>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d107      	bne.n	8003a92 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <osKernelStart+0x64>)
 8003a84:	2202      	movs	r2, #2
 8003a86:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003a88:	f001 fc84 	bl	8005394 <vTaskStartScheduler>
      stat = osOK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e002      	b.n	8003a98 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2000002c 	.word	0x2000002c

08003aa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b092      	sub	sp, #72	; 0x48
 8003aac:	af04      	add	r7, sp, #16
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ab8:	f3ef 8305 	mrs	r3, IPSR
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f040 8094 	bne.w	8003bee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	623b      	str	r3, [r7, #32]
  return(result);
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 808d 	bne.w	8003bee <osThreadNew+0x146>
 8003ad4:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <osThreadNew+0x150>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d106      	bne.n	8003aea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003adc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ae0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f040 8082 	bne.w	8003bee <osThreadNew+0x146>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d07e      	beq.n	8003bee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003af0:	2340      	movs	r3, #64	; 0x40
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003af4:	2318      	movs	r3, #24
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003af8:	2300      	movs	r3, #0
 8003afa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003afc:	f107 031b 	add.w	r3, r7, #27
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003b02:	f04f 33ff 	mov.w	r3, #4294967295
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d045      	beq.n	8003b9a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <osThreadNew+0x74>
        name = attr->name;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <osThreadNew+0x9a>
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	2b38      	cmp	r3, #56	; 0x38
 8003b34:	d805      	bhi.n	8003b42 <osThreadNew+0x9a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <osThreadNew+0x9e>
        return (NULL);
 8003b42:	2300      	movs	r3, #0
 8003b44:	e054      	b.n	8003bf0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <osThreadNew+0xd4>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b63      	cmp	r3, #99	; 0x63
 8003b64:	d90a      	bls.n	8003b7c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <osThreadNew+0xd4>
        mem = 1;
 8003b76:	2301      	movs	r3, #1
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7a:	e010      	b.n	8003b9e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10c      	bne.n	8003b9e <osThreadNew+0xf6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <osThreadNew+0xf6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d104      	bne.n	8003b9e <osThreadNew+0xf6>
          mem = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b98:	e001      	b.n	8003b9e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d110      	bne.n	8003bc6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bac:	9202      	str	r2, [sp, #8]
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f001 f9a8 	bl	8004f10 <xTaskCreateStatic>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e013      	b.n	8003bee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d110      	bne.n	8003bee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f001 f9ef 	bl	8004fc2 <xTaskCreate>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d001      	beq.n	8003bee <osThreadNew+0x146>
          hTask = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bee:	697b      	ldr	r3, [r7, #20]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3738      	adds	r7, #56	; 0x38
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	2000002c 	.word	0x2000002c

08003bfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c04:	f3ef 8305 	mrs	r3, IPSR
 8003c08:	613b      	str	r3, [r7, #16]
  return(result);
 8003c0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10f      	bne.n	8003c30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c10:	f3ef 8310 	mrs	r3, PRIMASK
 8003c14:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <osDelay+0x34>
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <osDelay+0x58>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d109      	bne.n	8003c38 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c24:	f3ef 8311 	mrs	r3, BASEPRI
 8003c28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <osDelay+0x3c>
    stat = osErrorISR;
 8003c30:	f06f 0305 	mvn.w	r3, #5
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e007      	b.n	8003c48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f001 fb72 	bl	800532c <vTaskDelay>
    }
  }

  return (stat);
 8003c48:	697b      	ldr	r3, [r7, #20]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	2000002c 	.word	0x2000002c

08003c58 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c60:	f3ef 8305 	mrs	r3, IPSR
 8003c64:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c66:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10f      	bne.n	8003c8c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c70:	617b      	str	r3, [r7, #20]
  return(result);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <osDelayUntil+0x34>
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <osDelayUntil+0x64>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d109      	bne.n	8003c94 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c80:	f3ef 8311 	mrs	r3, BASEPRI
 8003c84:	613b      	str	r3, [r7, #16]
  return(result);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8003c8c:	f06f 0305 	mvn.w	r3, #5
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e00e      	b.n	8003cb2 <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8003c98:	f001 fc8a 	bl	80055b0 <xTaskGetTickCount>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	1ad2      	subs	r2, r2, r3
 8003ca6:	f107 030c 	add.w	r3, r7, #12
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f001 fac3 	bl	8005238 <vTaskDelayUntil>
  }

  return (stat);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	2000002c 	.word	0x2000002c

08003cc0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08c      	sub	sp, #48	; 0x30
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cd0:	f3ef 8305 	mrs	r3, IPSR
 8003cd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cd6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 8088 	bne.w	8003dee <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cde:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce2:	617b      	str	r3, [r7, #20]
  return(result);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 8081 	bne.w	8003dee <osSemaphoreNew+0x12e>
 8003cec:	4b42      	ldr	r3, [pc, #264]	; (8003df8 <osSemaphoreNew+0x138>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d105      	bne.n	8003d00 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8003cf8:	613b      	str	r3, [r7, #16]
  return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d176      	bne.n	8003dee <osSemaphoreNew+0x12e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d073      	beq.n	8003dee <osSemaphoreNew+0x12e>
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d86f      	bhi.n	8003dee <osSemaphoreNew+0x12e>
    mem = -1;
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d015      	beq.n	8003d46 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d006      	beq.n	8003d30 <osSemaphoreNew+0x70>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b4f      	cmp	r3, #79	; 0x4f
 8003d28:	d902      	bls.n	8003d30 <osSemaphoreNew+0x70>
        mem = 1;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	623b      	str	r3, [r7, #32]
 8003d2e:	e00c      	b.n	8003d4a <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d108      	bne.n	8003d4a <osSemaphoreNew+0x8a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <osSemaphoreNew+0x8a>
          mem = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	623b      	str	r3, [r7, #32]
 8003d44:	e001      	b.n	8003d4a <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d04d      	beq.n	8003dee <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d129      	bne.n	8003dac <osSemaphoreNew+0xec>
        if (mem == 1) {
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d10b      	bne.n	8003d76 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	2303      	movs	r3, #3
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	4613      	mov	r3, r2
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f000 faf9 	bl	8004364 <xQueueGenericCreateStatic>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24
 8003d74:	e005      	b.n	8003d82 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003d76:	2203      	movs	r2, #3
 8003d78:	2100      	movs	r1, #0
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f000 fb64 	bl	8004448 <xQueueGenericCreate>
 8003d80:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d022      	beq.n	8003dce <osSemaphoreNew+0x10e>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d01f      	beq.n	8003dce <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2200      	movs	r2, #0
 8003d92:	2100      	movs	r1, #0
 8003d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d96:	f000 fc1d 	bl	80045d4 <xQueueGenericSend>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d016      	beq.n	8003dce <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8003da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da2:	f000 fefe 	bl	8004ba2 <vQueueDelete>
            hSemaphore = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
 8003daa:	e010      	b.n	8003dce <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d108      	bne.n	8003dc4 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fba4 	bl	8004508 <xQueueCreateCountingSemaphoreStatic>
 8003dc0:	6278      	str	r0, [r7, #36]	; 0x24
 8003dc2:	e004      	b.n	8003dce <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fbd3 	bl	8004572 <xQueueCreateCountingSemaphore>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00c      	beq.n	8003dee <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <osSemaphoreNew+0x122>
          name = attr->name;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e001      	b.n	8003de6 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003de6:	69f9      	ldr	r1, [r7, #28]
 8003de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dea:	f001 f80d 	bl	8004e08 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3728      	adds	r7, #40	; 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	2000002c 	.word	0x2000002c

08003dfc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08c      	sub	sp, #48	; 0x30
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e0c:	f3ef 8305 	mrs	r3, IPSR
 8003e10:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e12:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d170      	bne.n	8003efa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e18:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d16a      	bne.n	8003efa <osMessageQueueNew+0xfe>
 8003e24:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <osMessageQueueNew+0x108>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d105      	bne.n	8003e38 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e2c:	f3ef 8311 	mrs	r3, BASEPRI
 8003e30:	613b      	str	r3, [r7, #16]
  return(result);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d160      	bne.n	8003efa <osMessageQueueNew+0xfe>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d05d      	beq.n	8003efa <osMessageQueueNew+0xfe>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d05a      	beq.n	8003efa <osMessageQueueNew+0xfe>
    mem = -1;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d029      	beq.n	8003ea4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d012      	beq.n	8003e7e <osMessageQueueNew+0x82>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b4f      	cmp	r3, #79	; 0x4f
 8003e5e:	d90e      	bls.n	8003e7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <osMessageQueueNew+0x82>
        mem = 1;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	e014      	b.n	8003ea8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d110      	bne.n	8003ea8 <osMessageQueueNew+0xac>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10c      	bne.n	8003ea8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d108      	bne.n	8003ea8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <osMessageQueueNew+0xac>
          mem = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	623b      	str	r3, [r7, #32]
 8003ea2:	e001      	b.n	8003ea8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10c      	bne.n	8003ec8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fa50 	bl	8004364 <xQueueGenericCreateStatic>
 8003ec4:	6278      	str	r0, [r7, #36]	; 0x24
 8003ec6:	e008      	b.n	8003eda <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d105      	bne.n	8003eda <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003ece:	2200      	movs	r2, #0
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fab8 	bl	8004448 <xQueueGenericCreate>
 8003ed8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00c      	beq.n	8003efa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <osMessageQueueNew+0xf2>
        name = attr->name;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e001      	b.n	8003ef2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003ef2:	69f9      	ldr	r1, [r7, #28]
 8003ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ef6:	f000 ff87 	bl	8004e08 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3728      	adds	r7, #40	; 0x28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	2000002c 	.word	0x2000002c

08003f08 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f20:	f3ef 8305 	mrs	r3, IPSR
 8003f24:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f26:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f30:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <osMessageQueuePut+0x44>
 8003f38:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <osMessageQueuePut+0xe0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d12e      	bne.n	8003f9e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f40:	f3ef 8311 	mrs	r3, BASEPRI
 8003f44:	617b      	str	r3, [r7, #20]
  return(result);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d028      	beq.n	8003f9e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <osMessageQueuePut+0x56>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <osMessageQueuePut+0x56>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003f5e:	f06f 0303 	mvn.w	r3, #3
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f64:	e039      	b.n	8003fda <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003f6a:	f107 0210 	add.w	r2, r7, #16
 8003f6e:	2300      	movs	r3, #0
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	6a38      	ldr	r0, [r7, #32]
 8003f74:	f000 fc28 	bl	80047c8 <xQueueGenericSendFromISR>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d003      	beq.n	8003f86 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003f7e:	f06f 0302 	mvn.w	r3, #2
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f84:	e029      	b.n	8003fda <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d026      	beq.n	8003fda <osMessageQueuePut+0xd2>
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <osMessageQueuePut+0xe4>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f9c:	e01d      	b.n	8003fda <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <osMessageQueuePut+0xa2>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003faa:	f06f 0303 	mvn.w	r3, #3
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb0:	e014      	b.n	8003fdc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	6a38      	ldr	r0, [r7, #32]
 8003fba:	f000 fb0b 	bl	80045d4 <xQueueGenericSend>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d00b      	beq.n	8003fdc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003fca:	f06f 0301 	mvn.w	r3, #1
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	e004      	b.n	8003fdc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003fd2:	f06f 0302 	mvn.w	r3, #2
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd8:	e000      	b.n	8003fdc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003fda:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3728      	adds	r7, #40	; 0x28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000002c 	.word	0x2000002c
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004006:	f3ef 8305 	mrs	r3, IPSR
 800400a:	61fb      	str	r3, [r7, #28]
  return(result);
 800400c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004012:	f3ef 8310 	mrs	r3, PRIMASK
 8004016:	61bb      	str	r3, [r7, #24]
  return(result);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <osMessageQueueGet+0x42>
 800401e:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <osMessageQueueGet+0xdc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d12e      	bne.n	8004084 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004026:	f3ef 8311 	mrs	r3, BASEPRI
 800402a:	617b      	str	r3, [r7, #20]
  return(result);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d028      	beq.n	8004084 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <osMessageQueueGet+0x54>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <osMessageQueueGet+0x54>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004044:	f06f 0303 	mvn.w	r3, #3
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800404a:	e038      	b.n	80040be <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004050:	f107 0310 	add.w	r3, r7, #16
 8004054:	461a      	mov	r2, r3
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	6a38      	ldr	r0, [r7, #32]
 800405a:	f000 fd25 	bl	8004aa8 <xQueueReceiveFromISR>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d003      	beq.n	800406c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004064:	f06f 0302 	mvn.w	r3, #2
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800406a:	e028      	b.n	80040be <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d025      	beq.n	80040be <osMessageQueueGet+0xce>
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <osMessageQueueGet+0xe0>)
 8004074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004082:	e01c      	b.n	80040be <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <osMessageQueueGet+0xa0>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d103      	bne.n	8004098 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004090:	f06f 0303 	mvn.w	r3, #3
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
 8004096:	e013      	b.n	80040c0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	6a38      	ldr	r0, [r7, #32]
 800409e:	f000 fc27 	bl	80048f0 <xQueueReceive>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d00b      	beq.n	80040c0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80040ae:	f06f 0301 	mvn.w	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
 80040b4:	e004      	b.n	80040c0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80040b6:	f06f 0302 	mvn.w	r3, #2
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
 80040bc:	e000      	b.n	80040c0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80040be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3728      	adds	r7, #40	; 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	2000002c 	.word	0x2000002c
 80040d0:	e000ed04 	.word	0xe000ed04

080040d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a06      	ldr	r2, [pc, #24]	; (80040fc <vApplicationGetIdleTaskMemory+0x28>)
 80040e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4a05      	ldr	r2, [pc, #20]	; (8004100 <vApplicationGetIdleTaskMemory+0x2c>)
 80040ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	601a      	str	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	20000030 	.word	0x20000030
 8004100:	20000094 	.word	0x20000094

08004104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a06      	ldr	r2, [pc, #24]	; (800412c <vApplicationGetTimerTaskMemory+0x28>)
 8004114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4a05      	ldr	r2, [pc, #20]	; (8004130 <vApplicationGetTimerTaskMemory+0x2c>)
 800411a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2280      	movs	r2, #128	; 0x80
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	20000194 	.word	0x20000194
 8004130:	200001f8 	.word	0x200001f8

08004134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f103 0208 	add.w	r2, r3, #8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f103 0208 	add.w	r2, r3, #8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f103 0208 	add.w	r2, r3, #8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d103      	bne.n	80041f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	e00c      	b.n	800420a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3308      	adds	r3, #8
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e002      	b.n	80041fe <vListInsert+0x2e>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	d2f6      	bcs.n	80041f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	601a      	str	r2, [r3, #0]
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6892      	ldr	r2, [r2, #8]
 8004256:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6852      	ldr	r2, [r2, #4]
 8004260:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	d103      	bne.n	8004274 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1e5a      	subs	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
	...

08004294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d109      	bne.n	80042bc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	e7fe      	b.n	80042ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80042bc:	f002 f97c 	bl	80065b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	68f9      	ldr	r1, [r7, #12]
 80042ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	441a      	add	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	3b01      	subs	r3, #1
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	441a      	add	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	22ff      	movs	r2, #255	; 0xff
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	22ff      	movs	r2, #255	; 0xff
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d114      	bne.n	800433c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01a      	beq.n	8004350 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3310      	adds	r3, #16
 800431e:	4618      	mov	r0, r3
 8004320:	f001 fabc 	bl	800589c <xTaskRemoveFromEventList>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d012      	beq.n	8004350 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <xQueueGenericReset+0xcc>)
 800432c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	e009      	b.n	8004350 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3310      	adds	r3, #16
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fef7 	bl	8004134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3324      	adds	r3, #36	; 0x24
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fef2 	bl	8004134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004350:	f002 f960 	bl	8006614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004354:	2301      	movs	r3, #1
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08e      	sub	sp, #56	; 0x38
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <xQueueGenericCreateStatic+0x28>
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
 800438a:	e7fe      	b.n	800438a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <xQueueGenericCreateStatic+0x42>
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
 80043a4:	e7fe      	b.n	80043a4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <xQueueGenericCreateStatic+0x4e>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <xQueueGenericCreateStatic+0x52>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueGenericCreateStatic+0x54>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <xQueueGenericCreateStatic+0x6c>
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	623b      	str	r3, [r7, #32]
 80043ce:	e7fe      	b.n	80043ce <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <xQueueGenericCreateStatic+0x78>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <xQueueGenericCreateStatic+0x7c>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <xQueueGenericCreateStatic+0x7e>
 80043e0:	2300      	movs	r3, #0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <xQueueGenericCreateStatic+0x96>
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	e7fe      	b.n	80043f8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043fa:	2350      	movs	r3, #80	; 0x50
 80043fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b50      	cmp	r3, #80	; 0x50
 8004402:	d009      	beq.n	8004418 <xQueueGenericCreateStatic+0xb4>
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e7fe      	b.n	8004416 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00d      	beq.n	800443e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800442a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f842 	bl	80044c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004440:	4618      	mov	r0, r3
 8004442:	3730      	adds	r7, #48	; 0x30
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <xQueueGenericCreate+0x28>
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	e7fe      	b.n	800446e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e004      	b.n	8004486 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	fb02 f303 	mul.w	r3, r2, r3
 8004484:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3350      	adds	r3, #80	; 0x50
 800448a:	4618      	mov	r0, r3
 800448c:	f002 f98a 	bl	80067a4 <pvPortMalloc>
 8004490:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00f      	beq.n	80044b8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	3350      	adds	r3, #80	; 0x50
 800449c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044a6:	79fa      	ldrb	r2, [r7, #7]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f805 	bl	80044c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80044b8:	69bb      	ldr	r3, [r7, #24]
	}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e002      	b.n	80044e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044f0:	2101      	movs	r1, #1
 80044f2:	69b8      	ldr	r0, [r7, #24]
 80044f4:	f7ff fece 	bl	8004294 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <xQueueCreateCountingSemaphoreStatic+0x26>
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e7fe      	b.n	800452c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	429a      	cmp	r2, r3
 8004534:	d909      	bls.n	800454a <xQueueCreateCountingSemaphoreStatic+0x42>
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e7fe      	b.n	8004548 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800454a:	2302      	movs	r3, #2
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	2100      	movs	r1, #0
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff ff05 	bl	8004364 <xQueueGenericCreateStatic>
 800455a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004568:	69fb      	ldr	r3, [r7, #28]
	}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <xQueueCreateCountingSemaphore+0x24>
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	e7fe      	b.n	8004594 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	429a      	cmp	r2, r3
 800459c:	d909      	bls.n	80045b2 <xQueueCreateCountingSemaphore+0x40>
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e7fe      	b.n	80045b0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80045b2:	2202      	movs	r2, #2
 80045b4:	2100      	movs	r1, #0
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff ff46 	bl	8004448 <xQueueGenericCreate>
 80045bc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80045ca:	697b      	ldr	r3, [r7, #20]
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08e      	sub	sp, #56	; 0x38
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045e2:	2300      	movs	r3, #0
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <xQueueGenericSend+0x30>
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
 8004602:	e7fe      	b.n	8004602 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <xQueueGenericSend+0x3e>
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <xQueueGenericSend+0x42>
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <xQueueGenericSend+0x44>
 8004616:	2300      	movs	r3, #0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <xQueueGenericSend+0x5c>
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	e7fe      	b.n	800462e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d103      	bne.n	800463e <xQueueGenericSend+0x6a>
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <xQueueGenericSend+0x6e>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <xQueueGenericSend+0x70>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <xQueueGenericSend+0x88>
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	e7fe      	b.n	800465a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800465c:	f001 fad8 	bl	8005c10 <xTaskGetSchedulerState>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <xQueueGenericSend+0x98>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <xQueueGenericSend+0x9c>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <xQueueGenericSend+0x9e>
 8004670:	2300      	movs	r3, #0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <xQueueGenericSend+0xb6>
 8004676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	e7fe      	b.n	8004688 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800468a:	f001 ff95 	bl	80065b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	429a      	cmp	r2, r3
 8004698:	d302      	bcc.n	80046a0 <xQueueGenericSend+0xcc>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d129      	bne.n	80046f4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a6:	f000 fa9e 	bl	8004be6 <prvCopyDataToQueue>
 80046aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d010      	beq.n	80046d6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	3324      	adds	r3, #36	; 0x24
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 f8ef 	bl	800589c <xTaskRemoveFromEventList>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d013      	beq.n	80046ec <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046c4:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <xQueueGenericSend+0x1f0>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	e00a      	b.n	80046ec <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046dc:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <xQueueGenericSend+0x1f0>)
 80046de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046ec:	f001 ff92 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e063      	b.n	80047bc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046fa:	f001 ff8b 	bl	8006614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	e05c      	b.n	80047bc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004708:	f107 0314 	add.w	r3, r7, #20
 800470c:	4618      	mov	r0, r3
 800470e:	f001 f927 	bl	8005960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004712:	2301      	movs	r3, #1
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004716:	f001 ff7d 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800471a:	f000 fe9f 	bl	800545c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800471e:	f001 ff4b 	bl	80065b8 <vPortEnterCritical>
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004728:	b25b      	sxtb	r3, r3
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d103      	bne.n	8004738 <xQueueGenericSend+0x164>
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800473e:	b25b      	sxtb	r3, r3
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d103      	bne.n	800474e <xQueueGenericSend+0x17a>
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800474e:	f001 ff61 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004752:	1d3a      	adds	r2, r7, #4
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f001 f916 	bl	800598c <xTaskCheckForTimeOut>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d124      	bne.n	80047b0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004768:	f000 fb35 	bl	8004dd6 <prvIsQueueFull>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d018      	beq.n	80047a4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	3310      	adds	r3, #16
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4611      	mov	r1, r2
 800477a:	4618      	mov	r0, r3
 800477c:	f001 f840 	bl	8005800 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004782:	f000 fac0 	bl	8004d06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004786:	f000 fe77 	bl	8005478 <xTaskResumeAll>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	f47f af7c 	bne.w	800468a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004792:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <xQueueGenericSend+0x1f0>)
 8004794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	e772      	b.n	800468a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a6:	f000 faae 	bl	8004d06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047aa:	f000 fe65 	bl	8005478 <xTaskResumeAll>
 80047ae:	e76c      	b.n	800468a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b2:	f000 faa8 	bl	8004d06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047b6:	f000 fe5f 	bl	8005478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ba:	2300      	movs	r3, #0
		}
	}
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3738      	adds	r7, #56	; 0x38
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	e000ed04 	.word	0xe000ed04

080047c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08e      	sub	sp, #56	; 0x38
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <xQueueGenericSendFromISR+0x2c>
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
 80047f2:	e7fe      	b.n	80047f2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <xQueueGenericSendFromISR+0x3a>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <xQueueGenericSendFromISR+0x3e>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <xQueueGenericSendFromISR+0x40>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <xQueueGenericSendFromISR+0x58>
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	623b      	str	r3, [r7, #32]
 800481e:	e7fe      	b.n	800481e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d103      	bne.n	800482e <xQueueGenericSendFromISR+0x66>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <xQueueGenericSendFromISR+0x6a>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <xQueueGenericSendFromISR+0x6c>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <xQueueGenericSendFromISR+0x84>
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	e7fe      	b.n	800484a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800484c:	f001 ff6e 	bl	800672c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004850:	f3ef 8211 	mrs	r2, BASEPRI
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	61ba      	str	r2, [r7, #24]
 8004866:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004868:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	429a      	cmp	r2, r3
 8004876:	d302      	bcc.n	800487e <xQueueGenericSendFromISR+0xb6>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d12c      	bne.n	80048d8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800488e:	f000 f9aa 	bl	8004be6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004892:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d112      	bne.n	80048c2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	3324      	adds	r3, #36	; 0x24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fff7 	bl	800589c <xTaskRemoveFromEventList>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00e      	beq.n	80048d2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e007      	b.n	80048d2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048c6:	3301      	adds	r3, #1
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	b25a      	sxtb	r2, r3
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048d2:	2301      	movs	r3, #1
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048d6:	e001      	b.n	80048dc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3738      	adds	r7, #56	; 0x38
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	; 0x30
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <xQueueReceive+0x2e>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	623b      	str	r3, [r7, #32]
 800491c:	e7fe      	b.n	800491c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <xQueueReceive+0x3c>
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <xQueueReceive+0x40>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <xQueueReceive+0x42>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <xQueueReceive+0x5a>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	e7fe      	b.n	8004948 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800494a:	f001 f961 	bl	8005c10 <xTaskGetSchedulerState>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <xQueueReceive+0x6a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <xQueueReceive+0x6e>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <xQueueReceive+0x70>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <xQueueReceive+0x88>
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e7fe      	b.n	8004976 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004978:	f001 fe1e 	bl	80065b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01f      	beq.n	80049c8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800498c:	f000 f995 	bl	8004cba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	1e5a      	subs	r2, r3, #1
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00f      	beq.n	80049c0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	3310      	adds	r3, #16
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 ff79 	bl	800589c <xTaskRemoveFromEventList>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049b0:	4b3c      	ldr	r3, [pc, #240]	; (8004aa4 <xQueueReceive+0x1b4>)
 80049b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049c0:	f001 fe28 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e069      	b.n	8004a9c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049ce:	f001 fe21 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e062      	b.n	8004a9c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049dc:	f107 0310 	add.w	r3, r7, #16
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 ffbd 	bl	8005960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049ea:	f001 fe13 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ee:	f000 fd35 	bl	800545c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f2:	f001 fde1 	bl	80065b8 <vPortEnterCritical>
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d103      	bne.n	8004a0c <xQueueReceive+0x11c>
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d103      	bne.n	8004a22 <xQueueReceive+0x132>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a22:	f001 fdf7 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a26:	1d3a      	adds	r2, r7, #4
 8004a28:	f107 0310 	add.w	r3, r7, #16
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 ffac 	bl	800598c <xTaskCheckForTimeOut>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d123      	bne.n	8004a82 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3c:	f000 f9b5 	bl	8004daa <prvIsQueueEmpty>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d017      	beq.n	8004a76 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	3324      	adds	r3, #36	; 0x24
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fed6 	bl	8005800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a56:	f000 f956 	bl	8004d06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a5a:	f000 fd0d 	bl	8005478 <xTaskResumeAll>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d189      	bne.n	8004978 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <xQueueReceive+0x1b4>)
 8004a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	e780      	b.n	8004978 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a78:	f000 f945 	bl	8004d06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a7c:	f000 fcfc 	bl	8005478 <xTaskResumeAll>
 8004a80:	e77a      	b.n	8004978 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a84:	f000 f93f 	bl	8004d06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a88:	f000 fcf6 	bl	8005478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8e:	f000 f98c 	bl	8004daa <prvIsQueueEmpty>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f43f af6f 	beq.w	8004978 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3730      	adds	r7, #48	; 0x30
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	e000ed04 	.word	0xe000ed04

08004aa8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08e      	sub	sp, #56	; 0x38
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <xQueueReceiveFromISR+0x2a>
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	623b      	str	r3, [r7, #32]
 8004ad0:	e7fe      	b.n	8004ad0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d103      	bne.n	8004ae0 <xQueueReceiveFromISR+0x38>
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <xQueueReceiveFromISR+0x3c>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <xQueueReceiveFromISR+0x3e>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <xQueueReceiveFromISR+0x56>
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e7fe      	b.n	8004afc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004afe:	f001 fe15 	bl	800672c <vPortValidateInterruptPriority>
	__asm volatile
 8004b02:	f3ef 8211 	mrs	r2, BASEPRI
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	61ba      	str	r2, [r7, #24]
 8004b18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004b1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d02f      	beq.n	8004b8a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b38:	f000 f8bf 	bl	8004cba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d112      	bne.n	8004b74 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d016      	beq.n	8004b84 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	3310      	adds	r3, #16
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fe9e 	bl	800589c <xTaskRemoveFromEventList>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00e      	beq.n	8004b84 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e007      	b.n	8004b84 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b78:	3301      	adds	r3, #1
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	b25a      	sxtb	r2, r3
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004b84:	2301      	movs	r3, #1
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
 8004b88:	e001      	b.n	8004b8e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3738      	adds	r7, #56	; 0x38
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <vQueueDelete+0x26>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	e7fe      	b.n	8004bc6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f945 	bl	8004e58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f001 fea5 	bl	8006928 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10d      	bne.n	8004c20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d14d      	bne.n	8004ca8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f81b 	bl	8005c4c <xTaskPriorityDisinherit>
 8004c16:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	e043      	b.n	8004ca8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d119      	bne.n	8004c5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6898      	ldr	r0, [r3, #8]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	f001 ffaf 	bl	8006b94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d32b      	bcc.n	8004ca8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	e026      	b.n	8004ca8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68d8      	ldr	r0, [r3, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	461a      	mov	r2, r3
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	f001 ff95 	bl	8006b94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	425b      	negs	r3, r3
 8004c74:	441a      	add	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d207      	bcs.n	8004c96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	425b      	negs	r3, r3
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d105      	bne.n	8004ca8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cb0:	697b      	ldr	r3, [r7, #20]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d018      	beq.n	8004cfe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d303      	bcc.n	8004cee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68d9      	ldr	r1, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6838      	ldr	r0, [r7, #0]
 8004cfa:	f001 ff4b 	bl	8006b94 <memcpy>
	}
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d0e:	f001 fc53 	bl	80065b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d1a:	e011      	b.n	8004d40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d012      	beq.n	8004d4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3324      	adds	r3, #36	; 0x24
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fdb7 	bl	800589c <xTaskRemoveFromEventList>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d34:	f000 fe8a 	bl	8005a4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	dce9      	bgt.n	8004d1c <prvUnlockQueue+0x16>
 8004d48:	e000      	b.n	8004d4c <prvUnlockQueue+0x46>
					break;
 8004d4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	22ff      	movs	r2, #255	; 0xff
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d54:	f001 fc5e 	bl	8006614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d58:	f001 fc2e 	bl	80065b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d64:	e011      	b.n	8004d8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d012      	beq.n	8004d94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3310      	adds	r3, #16
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fd92 	bl	800589c <xTaskRemoveFromEventList>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d7e:	f000 fe65 	bl	8005a4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d82:	7bbb      	ldrb	r3, [r7, #14]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	dce9      	bgt.n	8004d66 <prvUnlockQueue+0x60>
 8004d92:	e000      	b.n	8004d96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	22ff      	movs	r2, #255	; 0xff
 8004d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d9e:	f001 fc39 	bl	8006614 <vPortExitCritical>
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004db2:	f001 fc01 	bl	80065b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	e001      	b.n	8004dc8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dc8:	f001 fc24 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dde:	f001 fbeb 	bl	80065b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d102      	bne.n	8004df4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dee:	2301      	movs	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	e001      	b.n	8004df8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004df8:	f001 fc0c 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	e014      	b.n	8004e42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e18:	4a0e      	ldr	r2, [pc, #56]	; (8004e54 <vQueueAddToRegistry+0x4c>)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e24:	490b      	ldr	r1, [pc, #44]	; (8004e54 <vQueueAddToRegistry+0x4c>)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <vQueueAddToRegistry+0x4c>)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e3a:	e005      	b.n	8004e48 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b07      	cmp	r3, #7
 8004e46:	d9e7      	bls.n	8004e18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20003554 	.word	0x20003554

08004e58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e016      	b.n	8004e94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004e66:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <vQueueUnregisterQueue+0x4c>)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d10b      	bne.n	8004e8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004e76:	4a0b      	ldr	r2, [pc, #44]	; (8004ea4 <vQueueUnregisterQueue+0x4c>)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004e80:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <vQueueUnregisterQueue+0x4c>)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	2200      	movs	r2, #0
 8004e8a:	605a      	str	r2, [r3, #4]
				break;
 8004e8c:	e005      	b.n	8004e9a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3301      	adds	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b07      	cmp	r3, #7
 8004e98:	d9e5      	bls.n	8004e66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	20003554 	.word	0x20003554

08004ea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004eb8:	f001 fb7e 	bl	80065b8 <vPortEnterCritical>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d103      	bne.n	8004ed2 <vQueueWaitForMessageRestricted+0x2a>
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d103      	bne.n	8004ee8 <vQueueWaitForMessageRestricted+0x40>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ee8:	f001 fb94 	bl	8006614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3324      	adds	r3, #36	; 0x24
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fca3 	bl	8005848 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f7ff feff 	bl	8004d06 <prvUnlockQueue>
	}
 8004f08:	bf00      	nop
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08e      	sub	sp, #56	; 0x38
 8004f14:	af04      	add	r7, sp, #16
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <xTaskCreateStatic+0x28>
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	e7fe      	b.n	8004f36 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <xTaskCreateStatic+0x42>
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e7fe      	b.n	8004f50 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f52:	2364      	movs	r3, #100	; 0x64
 8004f54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b64      	cmp	r3, #100	; 0x64
 8004f5a:	d009      	beq.n	8004f70 <xTaskCreateStatic+0x60>
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	e7fe      	b.n	8004f6e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01e      	beq.n	8004fb4 <xTaskCreateStatic+0xa4>
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9303      	str	r3, [sp, #12]
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	9302      	str	r3, [sp, #8]
 8004f96:	f107 0314 	add.w	r3, r7, #20
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f850 	bl	800504c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fae:	f000 f8d3 	bl	8005158 <prvAddNewTaskToReadyList>
 8004fb2:	e001      	b.n	8004fb8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fb8:	697b      	ldr	r3, [r7, #20]
	}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3728      	adds	r7, #40	; 0x28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b08c      	sub	sp, #48	; 0x30
 8004fc6:	af04      	add	r7, sp, #16
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 fbe4 	bl	80067a4 <pvPortMalloc>
 8004fdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004fe4:	2064      	movs	r0, #100	; 0x64
 8004fe6:	f001 fbdd 	bl	80067a4 <pvPortMalloc>
 8004fea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff8:	e005      	b.n	8005006 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f001 fc94 	bl	8006928 <vPortFree>
 8005000:	e001      	b.n	8005006 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d017      	beq.n	800503c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	2300      	movs	r3, #0
 8005018:	9303      	str	r3, [sp, #12]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	9302      	str	r3, [sp, #8]
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f80e 	bl	800504c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005030:	69f8      	ldr	r0, [r7, #28]
 8005032:	f000 f891 	bl	8005158 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005036:	2301      	movs	r3, #1
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	e002      	b.n	8005042 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800503c:	f04f 33ff 	mov.w	r3, #4294967295
 8005040:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005042:	69bb      	ldr	r3, [r7, #24]
	}
 8005044:	4618      	mov	r0, r3
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	461a      	mov	r2, r3
 8005064:	21a5      	movs	r1, #165	; 0xa5
 8005066:	f001 fda0 	bl	8006baa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005074:	3b01      	subs	r3, #1
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f023 0307 	bic.w	r3, r3, #7
 8005082:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <prvInitialiseNewTask+0x56>
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e7fe      	b.n	80050a0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	e012      	b.n	80050ce <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	7819      	ldrb	r1, [r3, #0]
 80050b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	3334      	adds	r3, #52	; 0x34
 80050b8:	460a      	mov	r2, r1
 80050ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d006      	beq.n	80050d6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2b17      	cmp	r3, #23
 80050d2:	d9e9      	bls.n	80050a8 <prvInitialiseNewTask+0x5c>
 80050d4:	e000      	b.n	80050d8 <prvInitialiseNewTask+0x8c>
		{
			break;
 80050d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2b37      	cmp	r3, #55	; 0x37
 80050e4:	d901      	bls.n	80050ea <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050e6:	2337      	movs	r3, #55	; 0x37
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	2200      	movs	r2, #0
 80050fa:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	3304      	adds	r3, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff f836 	bl	8004172 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	3318      	adds	r3, #24
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f831 	bl	8004172 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005114:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005124:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	2200      	movs	r2, #0
 800512a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	69b8      	ldr	r0, [r7, #24]
 800513a:	f001 f951 	bl	80063e0 <pxPortInitialiseStack>
 800513e:	4602      	mov	r2, r0
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800514e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005150:	bf00      	nop
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005160:	f001 fa2a 	bl	80065b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005164:	4b2d      	ldr	r3, [pc, #180]	; (800521c <prvAddNewTaskToReadyList+0xc4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	4a2c      	ldr	r2, [pc, #176]	; (800521c <prvAddNewTaskToReadyList+0xc4>)
 800516c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800516e:	4b2c      	ldr	r3, [pc, #176]	; (8005220 <prvAddNewTaskToReadyList+0xc8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005176:	4a2a      	ldr	r2, [pc, #168]	; (8005220 <prvAddNewTaskToReadyList+0xc8>)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800517c:	4b27      	ldr	r3, [pc, #156]	; (800521c <prvAddNewTaskToReadyList+0xc4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d110      	bne.n	80051a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005184:	f000 fc86 	bl	8005a94 <prvInitialiseTaskLists>
 8005188:	e00d      	b.n	80051a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800518a:	4b26      	ldr	r3, [pc, #152]	; (8005224 <prvAddNewTaskToReadyList+0xcc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005192:	4b23      	ldr	r3, [pc, #140]	; (8005220 <prvAddNewTaskToReadyList+0xc8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	429a      	cmp	r2, r3
 800519e:	d802      	bhi.n	80051a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051a0:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <prvAddNewTaskToReadyList+0xc8>)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051a6:	4b20      	ldr	r3, [pc, #128]	; (8005228 <prvAddNewTaskToReadyList+0xd0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3301      	adds	r3, #1
 80051ac:	4a1e      	ldr	r2, [pc, #120]	; (8005228 <prvAddNewTaskToReadyList+0xd0>)
 80051ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <prvAddNewTaskToReadyList+0xd0>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4b1b      	ldr	r3, [pc, #108]	; (800522c <prvAddNewTaskToReadyList+0xd4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d903      	bls.n	80051cc <prvAddNewTaskToReadyList+0x74>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4a18      	ldr	r2, [pc, #96]	; (800522c <prvAddNewTaskToReadyList+0xd4>)
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4a15      	ldr	r2, [pc, #84]	; (8005230 <prvAddNewTaskToReadyList+0xd8>)
 80051da:	441a      	add	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7fe ffd1 	bl	800418a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051e8:	f001 fa14 	bl	8006614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <prvAddNewTaskToReadyList+0xcc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00e      	beq.n	8005212 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <prvAddNewTaskToReadyList+0xc8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	429a      	cmp	r2, r3
 8005200:	d207      	bcs.n	8005212 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005202:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <prvAddNewTaskToReadyList+0xdc>)
 8005204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	200008cc 	.word	0x200008cc
 8005220:	200003f8 	.word	0x200003f8
 8005224:	200008d8 	.word	0x200008d8
 8005228:	200008e8 	.word	0x200008e8
 800522c:	200008d4 	.word	0x200008d4
 8005230:	200003fc 	.word	0x200003fc
 8005234:	e000ed04 	.word	0xe000ed04

08005238 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005242:	2300      	movs	r3, #0
 8005244:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d109      	bne.n	8005260 <vTaskDelayUntil+0x28>
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e7fe      	b.n	800525e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <vTaskDelayUntil+0x42>
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	e7fe      	b.n	8005278 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <vTaskDelayUntil+0xe8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <vTaskDelayUntil+0x5e>
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e7fe      	b.n	8005294 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005296:	f000 f8e1 	bl	800545c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800529a:	4b22      	ldr	r3, [pc, #136]	; (8005324 <vTaskDelayUntil+0xec>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	4413      	add	r3, r2
 80052a8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6a3a      	ldr	r2, [r7, #32]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d20b      	bcs.n	80052cc <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d211      	bcs.n	80052e2 <vTaskDelayUntil+0xaa>
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d90d      	bls.n	80052e2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ca:	e00a      	b.n	80052e2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d303      	bcc.n	80052de <vTaskDelayUntil+0xa6>
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d901      	bls.n	80052e2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80052de:	2301      	movs	r3, #1
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d006      	beq.n	80052fc <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fd14 	bl	8005d24 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80052fc:	f000 f8bc 	bl	8005478 <xTaskResumeAll>
 8005300:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d107      	bne.n	8005318 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8005308:	4b07      	ldr	r3, [pc, #28]	; (8005328 <vTaskDelayUntil+0xf0>)
 800530a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005318:	bf00      	nop
 800531a:	3728      	adds	r7, #40	; 0x28
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	200008f4 	.word	0x200008f4
 8005324:	200008d0 	.word	0x200008d0
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d016      	beq.n	800536c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <vTaskDelay+0x60>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <vTaskDelay+0x2e>
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	e7fe      	b.n	8005358 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800535a:	f000 f87f 	bl	800545c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800535e:	2100      	movs	r1, #0
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fcdf 	bl	8005d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005366:	f000 f887 	bl	8005478 <xTaskResumeAll>
 800536a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d107      	bne.n	8005382 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005372:	4b07      	ldr	r3, [pc, #28]	; (8005390 <vTaskDelay+0x64>)
 8005374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	200008f4 	.word	0x200008f4
 8005390:	e000ed04 	.word	0xe000ed04

08005394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053a2:	463a      	mov	r2, r7
 80053a4:	1d39      	adds	r1, r7, #4
 80053a6:	f107 0308 	add.w	r3, r7, #8
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fe92 	bl	80040d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	9202      	str	r2, [sp, #8]
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	2300      	movs	r3, #0
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	460a      	mov	r2, r1
 80053c2:	4920      	ldr	r1, [pc, #128]	; (8005444 <vTaskStartScheduler+0xb0>)
 80053c4:	4820      	ldr	r0, [pc, #128]	; (8005448 <vTaskStartScheduler+0xb4>)
 80053c6:	f7ff fda3 	bl	8004f10 <xTaskCreateStatic>
 80053ca:	4602      	mov	r2, r0
 80053cc:	4b1f      	ldr	r3, [pc, #124]	; (800544c <vTaskStartScheduler+0xb8>)
 80053ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053d0:	4b1e      	ldr	r3, [pc, #120]	; (800544c <vTaskStartScheduler+0xb8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053d8:	2301      	movs	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e001      	b.n	80053e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d102      	bne.n	80053ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053e8:	f000 fcf0 	bl	8005dcc <xTimerCreateTimerTask>
 80053ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d115      	bne.n	8005420 <vTaskStartScheduler+0x8c>
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005406:	4b12      	ldr	r3, [pc, #72]	; (8005450 <vTaskStartScheduler+0xbc>)
 8005408:	f04f 32ff 	mov.w	r2, #4294967295
 800540c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800540e:	4b11      	ldr	r3, [pc, #68]	; (8005454 <vTaskStartScheduler+0xc0>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005414:	4b10      	ldr	r3, [pc, #64]	; (8005458 <vTaskStartScheduler+0xc4>)
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800541a:	f001 f85d 	bl	80064d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800541e:	e00d      	b.n	800543c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d109      	bne.n	800543c <vTaskStartScheduler+0xa8>
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	e7fe      	b.n	800543a <vTaskStartScheduler+0xa6>
}
 800543c:	bf00      	nop
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	08006dcc 	.word	0x08006dcc
 8005448:	08005a65 	.word	0x08005a65
 800544c:	200008f0 	.word	0x200008f0
 8005450:	200008ec 	.word	0x200008ec
 8005454:	200008d8 	.word	0x200008d8
 8005458:	200008d0 	.word	0x200008d0

0800545c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005460:	4b04      	ldr	r3, [pc, #16]	; (8005474 <vTaskSuspendAll+0x18>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3301      	adds	r3, #1
 8005466:	4a03      	ldr	r2, [pc, #12]	; (8005474 <vTaskSuspendAll+0x18>)
 8005468:	6013      	str	r3, [r2, #0]
}
 800546a:	bf00      	nop
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	200008f4 	.word	0x200008f4

08005478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005486:	4b41      	ldr	r3, [pc, #260]	; (800558c <xTaskResumeAll+0x114>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d109      	bne.n	80054a2 <xTaskResumeAll+0x2a>
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	e7fe      	b.n	80054a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054a2:	f001 f889 	bl	80065b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054a6:	4b39      	ldr	r3, [pc, #228]	; (800558c <xTaskResumeAll+0x114>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	4a37      	ldr	r2, [pc, #220]	; (800558c <xTaskResumeAll+0x114>)
 80054ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b0:	4b36      	ldr	r3, [pc, #216]	; (800558c <xTaskResumeAll+0x114>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d162      	bne.n	800557e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054b8:	4b35      	ldr	r3, [pc, #212]	; (8005590 <xTaskResumeAll+0x118>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d05e      	beq.n	800557e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054c0:	e02f      	b.n	8005522 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054c2:	4b34      	ldr	r3, [pc, #208]	; (8005594 <xTaskResumeAll+0x11c>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3318      	adds	r3, #24
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe feb6 	bl	8004240 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fe feb1 	bl	8004240 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	4b2d      	ldr	r3, [pc, #180]	; (8005598 <xTaskResumeAll+0x120>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d903      	bls.n	80054f2 <xTaskResumeAll+0x7a>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	4a2a      	ldr	r2, [pc, #168]	; (8005598 <xTaskResumeAll+0x120>)
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4a27      	ldr	r2, [pc, #156]	; (800559c <xTaskResumeAll+0x124>)
 8005500:	441a      	add	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3304      	adds	r3, #4
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f7fe fe3e 	bl	800418a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005512:	4b23      	ldr	r3, [pc, #140]	; (80055a0 <xTaskResumeAll+0x128>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	429a      	cmp	r2, r3
 800551a:	d302      	bcc.n	8005522 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800551c:	4b21      	ldr	r3, [pc, #132]	; (80055a4 <xTaskResumeAll+0x12c>)
 800551e:	2201      	movs	r2, #1
 8005520:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005522:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <xTaskResumeAll+0x11c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1cb      	bne.n	80054c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005530:	f000 fb4a 	bl	8005bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005534:	4b1c      	ldr	r3, [pc, #112]	; (80055a8 <xTaskResumeAll+0x130>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005540:	f000 f844 	bl	80055cc <xTaskIncrementTick>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800554a:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <xTaskResumeAll+0x12c>)
 800554c:	2201      	movs	r2, #1
 800554e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1f1      	bne.n	8005540 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800555c:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <xTaskResumeAll+0x130>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <xTaskResumeAll+0x12c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d009      	beq.n	800557e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800556a:	2301      	movs	r3, #1
 800556c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <xTaskResumeAll+0x134>)
 8005570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800557e:	f001 f849 	bl	8006614 <vPortExitCritical>

	return xAlreadyYielded;
 8005582:	68bb      	ldr	r3, [r7, #8]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200008f4 	.word	0x200008f4
 8005590:	200008cc 	.word	0x200008cc
 8005594:	2000088c 	.word	0x2000088c
 8005598:	200008d4 	.word	0x200008d4
 800559c:	200003fc 	.word	0x200003fc
 80055a0:	200003f8 	.word	0x200003f8
 80055a4:	200008e0 	.word	0x200008e0
 80055a8:	200008dc 	.word	0x200008dc
 80055ac:	e000ed04 	.word	0xe000ed04

080055b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <xTaskGetTickCount+0x18>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055bc:	687b      	ldr	r3, [r7, #4]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr
 80055c8:	200008d0 	.word	0x200008d0

080055cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055d6:	4b51      	ldr	r3, [pc, #324]	; (800571c <xTaskIncrementTick+0x150>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 808d 	bne.w	80056fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055e0:	4b4f      	ldr	r3, [pc, #316]	; (8005720 <xTaskIncrementTick+0x154>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055e8:	4a4d      	ldr	r2, [pc, #308]	; (8005720 <xTaskIncrementTick+0x154>)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11f      	bne.n	8005634 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80055f4:	4b4b      	ldr	r3, [pc, #300]	; (8005724 <xTaskIncrementTick+0x158>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <xTaskIncrementTick+0x46>
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	e7fe      	b.n	8005610 <xTaskIncrementTick+0x44>
 8005612:	4b44      	ldr	r3, [pc, #272]	; (8005724 <xTaskIncrementTick+0x158>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	4b43      	ldr	r3, [pc, #268]	; (8005728 <xTaskIncrementTick+0x15c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a41      	ldr	r2, [pc, #260]	; (8005724 <xTaskIncrementTick+0x158>)
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	4a41      	ldr	r2, [pc, #260]	; (8005728 <xTaskIncrementTick+0x15c>)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4b41      	ldr	r3, [pc, #260]	; (800572c <xTaskIncrementTick+0x160>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3301      	adds	r3, #1
 800562c:	4a3f      	ldr	r2, [pc, #252]	; (800572c <xTaskIncrementTick+0x160>)
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	f000 faca 	bl	8005bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005634:	4b3e      	ldr	r3, [pc, #248]	; (8005730 <xTaskIncrementTick+0x164>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	429a      	cmp	r2, r3
 800563c:	d34e      	bcc.n	80056dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800563e:	4b39      	ldr	r3, [pc, #228]	; (8005724 <xTaskIncrementTick+0x158>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <xTaskIncrementTick+0x80>
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <xTaskIncrementTick+0x82>
 800564c:	2300      	movs	r3, #0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005652:	4b37      	ldr	r3, [pc, #220]	; (8005730 <xTaskIncrementTick+0x164>)
 8005654:	f04f 32ff 	mov.w	r2, #4294967295
 8005658:	601a      	str	r2, [r3, #0]
					break;
 800565a:	e03f      	b.n	80056dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800565c:	4b31      	ldr	r3, [pc, #196]	; (8005724 <xTaskIncrementTick+0x158>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d203      	bcs.n	800567c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005674:	4a2e      	ldr	r2, [pc, #184]	; (8005730 <xTaskIncrementTick+0x164>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6013      	str	r3, [r2, #0]
						break;
 800567a:	e02f      	b.n	80056dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	3304      	adds	r3, #4
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe fddd 	bl	8004240 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	3318      	adds	r3, #24
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe fdd4 	bl	8004240 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <xTaskIncrementTick+0x168>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d903      	bls.n	80056ac <xTaskIncrementTick+0xe0>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	4a22      	ldr	r2, [pc, #136]	; (8005734 <xTaskIncrementTick+0x168>)
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <xTaskIncrementTick+0x16c>)
 80056ba:	441a      	add	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	3304      	adds	r3, #4
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f7fe fd61 	bl	800418a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	4b1b      	ldr	r3, [pc, #108]	; (800573c <xTaskIncrementTick+0x170>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d3b3      	bcc.n	800563e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056da:	e7b0      	b.n	800563e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056dc:	4b17      	ldr	r3, [pc, #92]	; (800573c <xTaskIncrementTick+0x170>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e2:	4915      	ldr	r1, [pc, #84]	; (8005738 <xTaskIncrementTick+0x16c>)
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d907      	bls.n	8005704 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e004      	b.n	8005704 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <xTaskIncrementTick+0x174>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3301      	adds	r3, #1
 8005700:	4a0f      	ldr	r2, [pc, #60]	; (8005740 <xTaskIncrementTick+0x174>)
 8005702:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <xTaskIncrementTick+0x178>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005710:	697b      	ldr	r3, [r7, #20]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	200008f4 	.word	0x200008f4
 8005720:	200008d0 	.word	0x200008d0
 8005724:	20000884 	.word	0x20000884
 8005728:	20000888 	.word	0x20000888
 800572c:	200008e4 	.word	0x200008e4
 8005730:	200008ec 	.word	0x200008ec
 8005734:	200008d4 	.word	0x200008d4
 8005738:	200003fc 	.word	0x200003fc
 800573c:	200003f8 	.word	0x200003f8
 8005740:	200008dc 	.word	0x200008dc
 8005744:	200008e0 	.word	0x200008e0

08005748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800574e:	4b27      	ldr	r3, [pc, #156]	; (80057ec <vTaskSwitchContext+0xa4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005756:	4b26      	ldr	r3, [pc, #152]	; (80057f0 <vTaskSwitchContext+0xa8>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800575c:	e040      	b.n	80057e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800575e:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <vTaskSwitchContext+0xa8>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005764:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <vTaskSwitchContext+0xac>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	e00f      	b.n	800578c <vTaskSwitchContext+0x44>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <vTaskSwitchContext+0x3e>
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	e7fe      	b.n	8005784 <vTaskSwitchContext+0x3c>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3b01      	subs	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	491a      	ldr	r1, [pc, #104]	; (80057f8 <vTaskSwitchContext+0xb0>)
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0e5      	beq.n	800576c <vTaskSwitchContext+0x24>
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4a13      	ldr	r2, [pc, #76]	; (80057f8 <vTaskSwitchContext+0xb0>)
 80057ac:	4413      	add	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	3308      	adds	r3, #8
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d104      	bne.n	80057d0 <vTaskSwitchContext+0x88>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	605a      	str	r2, [r3, #4]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4a09      	ldr	r2, [pc, #36]	; (80057fc <vTaskSwitchContext+0xb4>)
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	4a06      	ldr	r2, [pc, #24]	; (80057f4 <vTaskSwitchContext+0xac>)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6013      	str	r3, [r2, #0]
}
 80057e0:	bf00      	nop
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	200008f4 	.word	0x200008f4
 80057f0:	200008e0 	.word	0x200008e0
 80057f4:	200008d4 	.word	0x200008d4
 80057f8:	200003fc 	.word	0x200003fc
 80057fc:	200003f8 	.word	0x200003f8

08005800 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <vTaskPlaceOnEventList+0x24>
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e7fe      	b.n	8005822 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005824:	4b07      	ldr	r3, [pc, #28]	; (8005844 <vTaskPlaceOnEventList+0x44>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3318      	adds	r3, #24
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7fe fccf 	bl	80041d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005832:	2101      	movs	r1, #1
 8005834:	6838      	ldr	r0, [r7, #0]
 8005836:	f000 fa75 	bl	8005d24 <prvAddCurrentTaskToDelayedList>
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	200003f8 	.word	0x200003f8

08005848 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <vTaskPlaceOnEventListRestricted+0x26>
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e7fe      	b.n	800586c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <vTaskPlaceOnEventListRestricted+0x50>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3318      	adds	r3, #24
 8005874:	4619      	mov	r1, r3
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7fe fc87 	bl	800418a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	68b8      	ldr	r0, [r7, #8]
 800588c:	f000 fa4a 	bl	8005d24 <prvAddCurrentTaskToDelayedList>
	}
 8005890:	bf00      	nop
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	200003f8 	.word	0x200003f8

0800589c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <xTaskRemoveFromEventList+0x2a>
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e7fe      	b.n	80058c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3318      	adds	r3, #24
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fcb8 	bl	8004240 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058d0:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <xTaskRemoveFromEventList+0xac>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11d      	bne.n	8005914 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	3304      	adds	r3, #4
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe fcaf 	bl	8004240 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e6:	4b19      	ldr	r3, [pc, #100]	; (800594c <xTaskRemoveFromEventList+0xb0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d903      	bls.n	80058f6 <xTaskRemoveFromEventList+0x5a>
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	4a16      	ldr	r2, [pc, #88]	; (800594c <xTaskRemoveFromEventList+0xb0>)
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4a13      	ldr	r2, [pc, #76]	; (8005950 <xTaskRemoveFromEventList+0xb4>)
 8005904:	441a      	add	r2, r3
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3304      	adds	r3, #4
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f7fe fc3c 	bl	800418a <vListInsertEnd>
 8005912:	e005      	b.n	8005920 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	3318      	adds	r3, #24
 8005918:	4619      	mov	r1, r3
 800591a:	480e      	ldr	r0, [pc, #56]	; (8005954 <xTaskRemoveFromEventList+0xb8>)
 800591c:	f7fe fc35 	bl	800418a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <xTaskRemoveFromEventList+0xbc>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	429a      	cmp	r2, r3
 800592c:	d905      	bls.n	800593a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800592e:	2301      	movs	r3, #1
 8005930:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <xTaskRemoveFromEventList+0xc0>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e001      	b.n	800593e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800593e:	697b      	ldr	r3, [r7, #20]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	200008f4 	.word	0x200008f4
 800594c:	200008d4 	.word	0x200008d4
 8005950:	200003fc 	.word	0x200003fc
 8005954:	2000088c 	.word	0x2000088c
 8005958:	200003f8 	.word	0x200003f8
 800595c:	200008e0 	.word	0x200008e0

08005960 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <vTaskInternalSetTimeOutState+0x24>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <vTaskInternalSetTimeOutState+0x28>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	605a      	str	r2, [r3, #4]
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	200008e4 	.word	0x200008e4
 8005988:	200008d0 	.word	0x200008d0

0800598c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <xTaskCheckForTimeOut+0x24>
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	e7fe      	b.n	80059ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <xTaskCheckForTimeOut+0x3e>
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e7fe      	b.n	80059c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80059ca:	f000 fdf5 	bl	80065b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059ce:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <xTaskCheckForTimeOut+0xb8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d102      	bne.n	80059ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	e023      	b.n	8005a36 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <xTaskCheckForTimeOut+0xbc>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d007      	beq.n	8005a0a <xTaskCheckForTimeOut+0x7e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d302      	bcc.n	8005a0a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	e015      	b.n	8005a36 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d20b      	bcs.n	8005a2c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	1ad2      	subs	r2, r2, r3
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff ff9d 	bl	8005960 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
 8005a2a:	e004      	b.n	8005a36 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a36:	f000 fded 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3720      	adds	r7, #32
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	200008d0 	.word	0x200008d0
 8005a48:	200008e4 	.word	0x200008e4

08005a4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <vTaskMissedYield+0x14>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
}
 8005a56:	bf00      	nop
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	200008e0 	.word	0x200008e0

08005a64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a6c:	f000 f852 	bl	8005b14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <prvIdleTask+0x28>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d9f9      	bls.n	8005a6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <prvIdleTask+0x2c>)
 8005a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a88:	e7f0      	b.n	8005a6c <prvIdleTask+0x8>
 8005a8a:	bf00      	nop
 8005a8c:	200003fc 	.word	0x200003fc
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	e00c      	b.n	8005aba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4a12      	ldr	r2, [pc, #72]	; (8005af4 <prvInitialiseTaskLists+0x60>)
 8005aac:	4413      	add	r3, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fb40 	bl	8004134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	607b      	str	r3, [r7, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b37      	cmp	r3, #55	; 0x37
 8005abe:	d9ef      	bls.n	8005aa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ac0:	480d      	ldr	r0, [pc, #52]	; (8005af8 <prvInitialiseTaskLists+0x64>)
 8005ac2:	f7fe fb37 	bl	8004134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ac6:	480d      	ldr	r0, [pc, #52]	; (8005afc <prvInitialiseTaskLists+0x68>)
 8005ac8:	f7fe fb34 	bl	8004134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005acc:	480c      	ldr	r0, [pc, #48]	; (8005b00 <prvInitialiseTaskLists+0x6c>)
 8005ace:	f7fe fb31 	bl	8004134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ad2:	480c      	ldr	r0, [pc, #48]	; (8005b04 <prvInitialiseTaskLists+0x70>)
 8005ad4:	f7fe fb2e 	bl	8004134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ad8:	480b      	ldr	r0, [pc, #44]	; (8005b08 <prvInitialiseTaskLists+0x74>)
 8005ada:	f7fe fb2b 	bl	8004134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <prvInitialiseTaskLists+0x78>)
 8005ae0:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <prvInitialiseTaskLists+0x64>)
 8005ae2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	; (8005b10 <prvInitialiseTaskLists+0x7c>)
 8005ae6:	4a05      	ldr	r2, [pc, #20]	; (8005afc <prvInitialiseTaskLists+0x68>)
 8005ae8:	601a      	str	r2, [r3, #0]
}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200003fc 	.word	0x200003fc
 8005af8:	2000085c 	.word	0x2000085c
 8005afc:	20000870 	.word	0x20000870
 8005b00:	2000088c 	.word	0x2000088c
 8005b04:	200008a0 	.word	0x200008a0
 8005b08:	200008b8 	.word	0x200008b8
 8005b0c:	20000884 	.word	0x20000884
 8005b10:	20000888 	.word	0x20000888

08005b14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b1a:	e019      	b.n	8005b50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b1c:	f000 fd4c 	bl	80065b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b20:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <prvCheckTasksWaitingTermination+0x4c>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe fb87 	bl	8004240 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <prvCheckTasksWaitingTermination+0x50>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <prvCheckTasksWaitingTermination+0x50>)
 8005b3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <prvCheckTasksWaitingTermination+0x54>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	4a09      	ldr	r2, [pc, #36]	; (8005b68 <prvCheckTasksWaitingTermination+0x54>)
 8005b44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b46:	f000 fd65 	bl	8006614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f80e 	bl	8005b6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <prvCheckTasksWaitingTermination+0x54>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e1      	bne.n	8005b1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	200008a0 	.word	0x200008a0
 8005b64:	200008cc 	.word	0x200008cc
 8005b68:	200008b4 	.word	0x200008b4

08005b6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d108      	bne.n	8005b90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fed0 	bl	8006928 <vPortFree>
				vPortFree( pxTCB );
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fecd 	bl	8006928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b8e:	e017      	b.n	8005bc0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d103      	bne.n	8005ba2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fec4 	bl	8006928 <vPortFree>
	}
 8005ba0:	e00e      	b.n	8005bc0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d009      	beq.n	8005bc0 <prvDeleteTCB+0x54>
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e7fe      	b.n	8005bbe <prvDeleteTCB+0x52>
	}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <prvResetNextTaskUnblockTime+0x40>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <prvResetNextTaskUnblockTime+0x14>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <prvResetNextTaskUnblockTime+0x16>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <prvResetNextTaskUnblockTime+0x44>)
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bea:	e008      	b.n	8005bfe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <prvResetNextTaskUnblockTime+0x40>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <prvResetNextTaskUnblockTime+0x44>)
 8005bfc:	6013      	str	r3, [r2, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr
 8005c08:	20000884 	.word	0x20000884
 8005c0c:	200008ec 	.word	0x200008ec

08005c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <xTaskGetSchedulerState+0x34>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	e008      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <xTaskGetSchedulerState+0x38>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	e001      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c36:	687b      	ldr	r3, [r7, #4]
	}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	200008d8 	.word	0x200008d8
 8005c48:	200008f4 	.word	0x200008f4

08005c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d054      	beq.n	8005d0c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c62:	4b2d      	ldr	r3, [pc, #180]	; (8005d18 <xTaskPriorityDisinherit+0xcc>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d009      	beq.n	8005c80 <xTaskPriorityDisinherit+0x34>
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	e7fe      	b.n	8005c7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <xTaskPriorityDisinherit+0x50>
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	e7fe      	b.n	8005c9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca0:	1e5a      	subs	r2, r3, #1
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d02c      	beq.n	8005d0c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d128      	bne.n	8005d0c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe fabe 	bl	8004240 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <xTaskPriorityDisinherit+0xd0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d903      	bls.n	8005cec <xTaskPriorityDisinherit+0xa0>
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	4a0c      	ldr	r2, [pc, #48]	; (8005d1c <xTaskPriorityDisinherit+0xd0>)
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <xTaskPriorityDisinherit+0xd4>)
 8005cfa:	441a      	add	r2, r3
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4619      	mov	r1, r3
 8005d02:	4610      	mov	r0, r2
 8005d04:	f7fe fa41 	bl	800418a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d0c:	697b      	ldr	r3, [r7, #20]
	}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200003f8 	.word	0x200003f8
 8005d1c:	200008d4 	.word	0x200008d4
 8005d20:	200003fc 	.word	0x200003fc

08005d24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d2e:	4b21      	ldr	r3, [pc, #132]	; (8005db4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d34:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fa80 	bl	8004240 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d10a      	bne.n	8005d5e <prvAddCurrentTaskToDelayedList+0x3a>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d4e:	4b1a      	ldr	r3, [pc, #104]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4819      	ldr	r0, [pc, #100]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x98>)
 8005d58:	f7fe fa17 	bl	800418a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d5c:	e026      	b.n	8005dac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d209      	bcs.n	8005d8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d76:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f7fe fa24 	bl	80041d0 <vListInsert>
}
 8005d88:	e010      	b.n	8005dac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d8a:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7fe fa1a 	bl	80041d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d202      	bcs.n	8005dac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005da6:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	6013      	str	r3, [r2, #0]
}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	200008d0 	.word	0x200008d0
 8005db8:	200003f8 	.word	0x200003f8
 8005dbc:	200008b8 	.word	0x200008b8
 8005dc0:	20000888 	.word	0x20000888
 8005dc4:	20000884 	.word	0x20000884
 8005dc8:	200008ec 	.word	0x200008ec

08005dcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dd6:	f000 fac3 	bl	8006360 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dda:	4b1c      	ldr	r3, [pc, #112]	; (8005e4c <xTimerCreateTimerTask+0x80>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d021      	beq.n	8005e26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dea:	1d3a      	adds	r2, r7, #4
 8005dec:	f107 0108 	add.w	r1, r7, #8
 8005df0:	f107 030c 	add.w	r3, r7, #12
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe f985 	bl	8004104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	9202      	str	r2, [sp, #8]
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	2302      	movs	r3, #2
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	460a      	mov	r2, r1
 8005e0c:	4910      	ldr	r1, [pc, #64]	; (8005e50 <xTimerCreateTimerTask+0x84>)
 8005e0e:	4811      	ldr	r0, [pc, #68]	; (8005e54 <xTimerCreateTimerTask+0x88>)
 8005e10:	f7ff f87e 	bl	8004f10 <xTaskCreateStatic>
 8005e14:	4602      	mov	r2, r0
 8005e16:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <xTimerCreateTimerTask+0x8c>)
 8005e18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e1a:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <xTimerCreateTimerTask+0x8c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e22:	2301      	movs	r3, #1
 8005e24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d109      	bne.n	8005e40 <xTimerCreateTimerTask+0x74>
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	e7fe      	b.n	8005e3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005e40:	697b      	ldr	r3, [r7, #20]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000928 	.word	0x20000928
 8005e50:	08006dd4 	.word	0x08006dd4
 8005e54:	08005f75 	.word	0x08005f75
 8005e58:	2000092c 	.word	0x2000092c

08005e5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d109      	bne.n	8005e88 <xTimerGenericCommand+0x2c>
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	623b      	str	r3, [r7, #32]
 8005e86:	e7fe      	b.n	8005e86 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e88:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <xTimerGenericCommand+0x94>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02a      	beq.n	8005ee6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	dc18      	bgt.n	8005ed4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ea2:	f7ff feb5 	bl	8005c10 <xTaskGetSchedulerState>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d109      	bne.n	8005ec0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <xTimerGenericCommand+0x94>)
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	f107 0110 	add.w	r1, r7, #16
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb8:	f7fe fb8c 	bl	80045d4 <xQueueGenericSend>
 8005ebc:	6278      	str	r0, [r7, #36]	; 0x24
 8005ebe:	e012      	b.n	8005ee6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <xTimerGenericCommand+0x94>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	f107 0110 	add.w	r1, r7, #16
 8005ec8:	2300      	movs	r3, #0
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f7fe fb82 	bl	80045d4 <xQueueGenericSend>
 8005ed0:	6278      	str	r0, [r7, #36]	; 0x24
 8005ed2:	e008      	b.n	8005ee6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <xTimerGenericCommand+0x94>)
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	f107 0110 	add.w	r1, r7, #16
 8005edc:	2300      	movs	r3, #0
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	f7fe fc72 	bl	80047c8 <xQueueGenericSendFromISR>
 8005ee4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3728      	adds	r7, #40	; 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000928 	.word	0x20000928

08005ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005efe:	4b1c      	ldr	r3, [pc, #112]	; (8005f70 <prvProcessExpiredTimer+0x7c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe f997 	bl	8004240 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d121      	bne.n	8005f5e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	18d1      	adds	r1, r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	6978      	ldr	r0, [r7, #20]
 8005f28:	f000 f8c8 	bl	80060bc <prvInsertTimerInActiveList>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d015      	beq.n	8005f5e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f32:	2300      	movs	r3, #0
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	2300      	movs	r3, #0
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6978      	ldr	r0, [r7, #20]
 8005f3e:	f7ff ff8d 	bl	8005e5c <xTimerGenericCommand>
 8005f42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <prvProcessExpiredTimer+0x6a>
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e7fe      	b.n	8005f5c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	6978      	ldr	r0, [r7, #20]
 8005f64:	4798      	blx	r3
}
 8005f66:	bf00      	nop
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000920 	.word	0x20000920

08005f74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f7c:	f107 0308 	add.w	r3, r7, #8
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f857 	bl	8006034 <prvGetNextExpireTime>
 8005f86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f803 	bl	8005f98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f92:	f000 f8d5 	bl	8006140 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f96:	e7f1      	b.n	8005f7c <prvTimerTask+0x8>

08005f98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fa2:	f7ff fa5b 	bl	800545c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fa6:	f107 0308 	add.w	r3, r7, #8
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f866 	bl	800607c <prvSampleTimeNow>
 8005fb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d130      	bne.n	800601a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <prvProcessTimerOrBlockTask+0x3c>
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d806      	bhi.n	8005fd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fc6:	f7ff fa57 	bl	8005478 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fca:	68f9      	ldr	r1, [r7, #12]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff ff91 	bl	8005ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fd2:	e024      	b.n	800601e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d008      	beq.n	8005fec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fda:	4b13      	ldr	r3, [pc, #76]	; (8006028 <prvProcessTimerOrBlockTask+0x90>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fec:	4b0f      	ldr	r3, [pc, #60]	; (800602c <prvProcessTimerOrBlockTask+0x94>)
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f7fe ff55 	bl	8004ea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ffe:	f7ff fa3b 	bl	8005478 <xTaskResumeAll>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <prvProcessTimerOrBlockTask+0x98>)
 800600a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	f3bf 8f6f 	isb	sy
}
 8006018:	e001      	b.n	800601e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800601a:	f7ff fa2d 	bl	8005478 <xTaskResumeAll>
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000924 	.word	0x20000924
 800602c:	20000928 	.word	0x20000928
 8006030:	e000ed04 	.word	0xe000ed04

08006034 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800603c:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <prvGetNextExpireTime+0x44>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <prvGetNextExpireTime+0x44>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e001      	b.n	800606a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800606a:	68fb      	ldr	r3, [r7, #12]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000920 	.word	0x20000920

0800607c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006084:	f7ff fa94 	bl	80055b0 <xTaskGetTickCount>
 8006088:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800608a:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <prvSampleTimeNow+0x3c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	429a      	cmp	r2, r3
 8006092:	d205      	bcs.n	80060a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006094:	f000 f904 	bl	80062a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e002      	b.n	80060a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060a6:	4a04      	ldr	r2, [pc, #16]	; (80060b8 <prvSampleTimeNow+0x3c>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060ac:	68fb      	ldr	r3, [r7, #12]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000930 	.word	0x20000930

080060bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d812      	bhi.n	8006108 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	1ad2      	subs	r2, r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d302      	bcc.n	80060f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e01b      	b.n	800612e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060f6:	4b10      	ldr	r3, [pc, #64]	; (8006138 <prvInsertTimerInActiveList+0x7c>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3304      	adds	r3, #4
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f7fe f865 	bl	80041d0 <vListInsert>
 8006106:	e012      	b.n	800612e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d206      	bcs.n	800611e <prvInsertTimerInActiveList+0x62>
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d302      	bcc.n	800611e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006118:	2301      	movs	r3, #1
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	e007      	b.n	800612e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800611e:	4b07      	ldr	r3, [pc, #28]	; (800613c <prvInsertTimerInActiveList+0x80>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3304      	adds	r3, #4
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f7fe f851 	bl	80041d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800612e:	697b      	ldr	r3, [r7, #20]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20000924 	.word	0x20000924
 800613c:	20000920 	.word	0x20000920

08006140 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	; 0x38
 8006144:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006146:	e099      	b.n	800627c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da17      	bge.n	800617e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800614e:	1d3b      	adds	r3, r7, #4
 8006150:	3304      	adds	r3, #4
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <prvProcessReceivedCommands+0x2e>
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	e7fe      	b.n	800616c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006174:	6850      	ldr	r0, [r2, #4]
 8006176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006178:	6892      	ldr	r2, [r2, #8]
 800617a:	4611      	mov	r1, r2
 800617c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	db7a      	blt.n	800627a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	3304      	adds	r3, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe f853 	bl	8004240 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800619a:	463b      	mov	r3, r7
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff ff6d 	bl	800607c <prvSampleTimeNow>
 80061a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b09      	cmp	r3, #9
 80061a8:	d868      	bhi.n	800627c <prvProcessReceivedCommands+0x13c>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <prvProcessReceivedCommands+0x70>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061d9 	.word	0x080061d9
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	080061d9 	.word	0x080061d9
 80061bc:	0800627d 	.word	0x0800627d
 80061c0:	08006233 	.word	0x08006233
 80061c4:	08006269 	.word	0x08006269
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	080061d9 	.word	0x080061d9
 80061d0:	0800627d 	.word	0x0800627d
 80061d4:	08006233 	.word	0x08006233
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	18d1      	adds	r1, r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e6:	f7ff ff69 	bl	80060bc <prvInsertTimerInActiveList>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d045      	beq.n	800627c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d13d      	bne.n	800627c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	441a      	add	r2, r3
 8006208:	2300      	movs	r3, #0
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2300      	movs	r3, #0
 800620e:	2100      	movs	r1, #0
 8006210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006212:	f7ff fe23 	bl	8005e5c <xTimerGenericCommand>
 8006216:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d12e      	bne.n	800627c <prvProcessReceivedCommands+0x13c>
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e7fe      	b.n	8006230 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <prvProcessReceivedCommands+0x114>
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e7fe      	b.n	8006252 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	18d1      	adds	r1, r2, r3
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006262:	f7ff ff2b 	bl	80060bc <prvInsertTimerInActiveList>
					break;
 8006266:	e009      	b.n	800627c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006274:	f000 fb58 	bl	8006928 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006278:	e000      	b.n	800627c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800627a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800627c:	4b07      	ldr	r3, [pc, #28]	; (800629c <prvProcessReceivedCommands+0x15c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	1d39      	adds	r1, r7, #4
 8006282:	2200      	movs	r2, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fb33 	bl	80048f0 <xQueueReceive>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	f47f af5b 	bne.w	8006148 <prvProcessReceivedCommands+0x8>
	}
}
 8006292:	bf00      	nop
 8006294:	3730      	adds	r7, #48	; 0x30
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000928 	.word	0x20000928

080062a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062a6:	e044      	b.n	8006332 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062a8:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <prvSwitchTimerLists+0xb8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062b2:	4b29      	ldr	r3, [pc, #164]	; (8006358 <prvSwitchTimerLists+0xb8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fd ffbd 	bl	8004240 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d12d      	bne.n	8006332 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4413      	add	r3, r2
 80062de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d90e      	bls.n	8006306 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062f4:	4b18      	ldr	r3, [pc, #96]	; (8006358 <prvSwitchTimerLists+0xb8>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7fd ff66 	bl	80041d0 <vListInsert>
 8006304:	e015      	b.n	8006332 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006306:	2300      	movs	r3, #0
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	2100      	movs	r1, #0
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7ff fda3 	bl	8005e5c <xTimerGenericCommand>
 8006316:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <prvSwitchTimerLists+0x92>
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	e7fe      	b.n	8006330 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006332:	4b09      	ldr	r3, [pc, #36]	; (8006358 <prvSwitchTimerLists+0xb8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1b5      	bne.n	80062a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <prvSwitchTimerLists+0xb8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006342:	4b06      	ldr	r3, [pc, #24]	; (800635c <prvSwitchTimerLists+0xbc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a04      	ldr	r2, [pc, #16]	; (8006358 <prvSwitchTimerLists+0xb8>)
 8006348:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800634a:	4a04      	ldr	r2, [pc, #16]	; (800635c <prvSwitchTimerLists+0xbc>)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	6013      	str	r3, [r2, #0]
}
 8006350:	bf00      	nop
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000920 	.word	0x20000920
 800635c:	20000924 	.word	0x20000924

08006360 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006366:	f000 f927 	bl	80065b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800636a:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <prvCheckForValidListAndQueue+0x60>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d120      	bne.n	80063b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006372:	4814      	ldr	r0, [pc, #80]	; (80063c4 <prvCheckForValidListAndQueue+0x64>)
 8006374:	f7fd fede 	bl	8004134 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006378:	4813      	ldr	r0, [pc, #76]	; (80063c8 <prvCheckForValidListAndQueue+0x68>)
 800637a:	f7fd fedb 	bl	8004134 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <prvCheckForValidListAndQueue+0x6c>)
 8006380:	4a10      	ldr	r2, [pc, #64]	; (80063c4 <prvCheckForValidListAndQueue+0x64>)
 8006382:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006384:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <prvCheckForValidListAndQueue+0x70>)
 8006386:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <prvCheckForValidListAndQueue+0x68>)
 8006388:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <prvCheckForValidListAndQueue+0x74>)
 8006390:	4a11      	ldr	r2, [pc, #68]	; (80063d8 <prvCheckForValidListAndQueue+0x78>)
 8006392:	2110      	movs	r1, #16
 8006394:	200a      	movs	r0, #10
 8006396:	f7fd ffe5 	bl	8004364 <xQueueGenericCreateStatic>
 800639a:	4602      	mov	r2, r0
 800639c:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <prvCheckForValidListAndQueue+0x60>)
 800639e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <prvCheckForValidListAndQueue+0x60>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <prvCheckForValidListAndQueue+0x60>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	490b      	ldr	r1, [pc, #44]	; (80063dc <prvCheckForValidListAndQueue+0x7c>)
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fd2a 	bl	8004e08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063b4:	f000 f92e 	bl	8006614 <vPortExitCritical>
}
 80063b8:	bf00      	nop
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000928 	.word	0x20000928
 80063c4:	200008f8 	.word	0x200008f8
 80063c8:	2000090c 	.word	0x2000090c
 80063cc:	20000920 	.word	0x20000920
 80063d0:	20000924 	.word	0x20000924
 80063d4:	200009d4 	.word	0x200009d4
 80063d8:	20000934 	.word	0x20000934
 80063dc:	08006ddc 	.word	0x08006ddc

080063e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3b04      	subs	r3, #4
 80063f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3b04      	subs	r3, #4
 80063fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f023 0201 	bic.w	r2, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3b04      	subs	r3, #4
 800640e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006410:	4a08      	ldr	r2, [pc, #32]	; (8006434 <pxPortInitialiseStack+0x54>)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3b14      	subs	r3, #20
 800641a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3b20      	subs	r3, #32
 8006426:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr
 8006434:	08006439 	.word	0x08006439

08006438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006442:	4b10      	ldr	r3, [pc, #64]	; (8006484 <prvTaskExitError+0x4c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d009      	beq.n	8006460 <prvTaskExitError+0x28>
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e7fe      	b.n	800645e <prvTaskExitError+0x26>
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006472:	bf00      	nop
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0fc      	beq.n	8006474 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800647a:	bf00      	nop
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr
 8006484:	2000000c 	.word	0x2000000c
	...

08006490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <pxCurrentTCBConst2>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800649a:	f380 8809 	msr	PSP, r0
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8811 	msr	BASEPRI, r0
 80064aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80064ae:	4770      	bx	lr

080064b0 <pxCurrentTCBConst2>:
 80064b0:	200003f8 	.word	0x200003f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80064b8:	4806      	ldr	r0, [pc, #24]	; (80064d4 <prvPortStartFirstTask+0x1c>)
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f380 8808 	msr	MSP, r0
 80064c2:	b662      	cpsie	i
 80064c4:	b661      	cpsie	f
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	df00      	svc	0
 80064d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064d2:	bf00      	nop
 80064d4:	e000ed08 	.word	0xe000ed08

080064d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xPortStartScheduler+0xcc>)
 80064e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006500:	b2da      	uxtb	r2, r3
 8006502:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <xPortStartScheduler+0xd0>)
 8006504:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006506:	4b29      	ldr	r3, [pc, #164]	; (80065ac <xPortStartScheduler+0xd4>)
 8006508:	2207      	movs	r2, #7
 800650a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800650c:	e009      	b.n	8006522 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800650e:	4b27      	ldr	r3, [pc, #156]	; (80065ac <xPortStartScheduler+0xd4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3b01      	subs	r3, #1
 8006514:	4a25      	ldr	r2, [pc, #148]	; (80065ac <xPortStartScheduler+0xd4>)
 8006516:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b80      	cmp	r3, #128	; 0x80
 800652c:	d0ef      	beq.n	800650e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800652e:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <xPortStartScheduler+0xd4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1c3 0307 	rsb	r3, r3, #7
 8006536:	2b04      	cmp	r3, #4
 8006538:	d009      	beq.n	800654e <xPortStartScheduler+0x76>
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	e7fe      	b.n	800654c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800654e:	4b17      	ldr	r3, [pc, #92]	; (80065ac <xPortStartScheduler+0xd4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	4a15      	ldr	r2, [pc, #84]	; (80065ac <xPortStartScheduler+0xd4>)
 8006556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006558:	4b14      	ldr	r3, [pc, #80]	; (80065ac <xPortStartScheduler+0xd4>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006560:	4a12      	ldr	r2, [pc, #72]	; (80065ac <xPortStartScheduler+0xd4>)
 8006562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xPortStartScheduler+0xd8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <xPortStartScheduler+0xd8>)
 8006572:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006578:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <xPortStartScheduler+0xd8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a0c      	ldr	r2, [pc, #48]	; (80065b0 <xPortStartScheduler+0xd8>)
 800657e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006584:	f000 f8b0 	bl	80066e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <xPortStartScheduler+0xdc>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800658e:	f7ff ff93 	bl	80064b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006592:	f7ff f8d9 	bl	8005748 <vTaskSwitchContext>
	prvTaskExitError();
 8006596:	f7ff ff4f 	bl	8006438 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	e000e400 	.word	0xe000e400
 80065a8:	20000a24 	.word	0x20000a24
 80065ac:	20000a28 	.word	0x20000a28
 80065b0:	e000ed20 	.word	0xe000ed20
 80065b4:	2000000c 	.word	0x2000000c

080065b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065d0:	4b0e      	ldr	r3, [pc, #56]	; (800660c <vPortEnterCritical+0x54>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	4a0d      	ldr	r2, [pc, #52]	; (800660c <vPortEnterCritical+0x54>)
 80065d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065da:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vPortEnterCritical+0x54>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d10e      	bne.n	8006600 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <vPortEnterCritical+0x58>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <vPortEnterCritical+0x48>
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	e7fe      	b.n	80065fe <vPortEnterCritical+0x46>
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	2000000c 	.word	0x2000000c
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661a:	4b10      	ldr	r3, [pc, #64]	; (800665c <vPortExitCritical+0x48>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <vPortExitCritical+0x22>
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	e7fe      	b.n	8006634 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006636:	4b09      	ldr	r3, [pc, #36]	; (800665c <vPortExitCritical+0x48>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3b01      	subs	r3, #1
 800663c:	4a07      	ldr	r2, [pc, #28]	; (800665c <vPortExitCritical+0x48>)
 800663e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <vPortExitCritical+0x48>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <vPortExitCritical+0x3e>
 8006648:	2300      	movs	r3, #0
 800664a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr
 800665c:	2000000c 	.word	0x2000000c

08006660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006660:	f3ef 8009 	mrs	r0, PSP
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <pxCurrentTCBConst>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006670:	6010      	str	r0, [r2, #0]
 8006672:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006676:	f04f 0050 	mov.w	r0, #80	; 0x50
 800667a:	f380 8811 	msr	BASEPRI, r0
 800667e:	f7ff f863 	bl	8005748 <vTaskSwitchContext>
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800668e:	6819      	ldr	r1, [r3, #0]
 8006690:	6808      	ldr	r0, [r1, #0]
 8006692:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006696:	f380 8809 	msr	PSP, r0
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	4770      	bx	lr

080066a0 <pxCurrentTCBConst>:
 80066a0:	200003f8 	.word	0x200003f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066c0:	f7fe ff84 	bl	80055cc <xTaskIncrementTick>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066ca:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <SysTick_Handler+0x3c>)
 80066cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	2300      	movs	r3, #0
 80066d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	e000ed04 	.word	0xe000ed04

080066e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <vPortSetupTimerInterrupt+0x30>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <vPortSetupTimerInterrupt+0x34>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066f8:	4b09      	ldr	r3, [pc, #36]	; (8006720 <vPortSetupTimerInterrupt+0x38>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a09      	ldr	r2, [pc, #36]	; (8006724 <vPortSetupTimerInterrupt+0x3c>)
 80066fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006702:	099b      	lsrs	r3, r3, #6
 8006704:	4a08      	ldr	r2, [pc, #32]	; (8006728 <vPortSetupTimerInterrupt+0x40>)
 8006706:	3b01      	subs	r3, #1
 8006708:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <vPortSetupTimerInterrupt+0x30>)
 800670c:	2207      	movs	r2, #7
 800670e:	601a      	str	r2, [r3, #0]
}
 8006710:	bf00      	nop
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr
 8006718:	e000e010 	.word	0xe000e010
 800671c:	e000e018 	.word	0xe000e018
 8006720:	20000000 	.word	0x20000000
 8006724:	10624dd3 	.word	0x10624dd3
 8006728:	e000e014 	.word	0xe000e014

0800672c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006732:	f3ef 8305 	mrs	r3, IPSR
 8006736:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b0f      	cmp	r3, #15
 800673c:	d913      	bls.n	8006766 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800673e:	4a15      	ldr	r2, [pc, #84]	; (8006794 <vPortValidateInterruptPriority+0x68>)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006748:	4b13      	ldr	r3, [pc, #76]	; (8006798 <vPortValidateInterruptPriority+0x6c>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	7afa      	ldrb	r2, [r7, #11]
 800674e:	429a      	cmp	r2, r3
 8006750:	d209      	bcs.n	8006766 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	e7fe      	b.n	8006764 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <vPortValidateInterruptPriority+0x70>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800676e:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <vPortValidateInterruptPriority+0x74>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d909      	bls.n	800678a <vPortValidateInterruptPriority+0x5e>
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	e7fe      	b.n	8006788 <vPortValidateInterruptPriority+0x5c>
	}
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr
 8006794:	e000e3f0 	.word	0xe000e3f0
 8006798:	20000a24 	.word	0x20000a24
 800679c:	e000ed0c 	.word	0xe000ed0c
 80067a0:	20000a28 	.word	0x20000a28

080067a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067b0:	f7fe fe54 	bl	800545c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067b4:	4b57      	ldr	r3, [pc, #348]	; (8006914 <pvPortMalloc+0x170>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067bc:	f000 f90c 	bl	80069d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067c0:	4b55      	ldr	r3, [pc, #340]	; (8006918 <pvPortMalloc+0x174>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f040 808c 	bne.w	80068e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01c      	beq.n	800680e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80067d4:	2208      	movs	r2, #8
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4413      	add	r3, r2
 80067da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d013      	beq.n	800680e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f023 0307 	bic.w	r3, r3, #7
 80067ec:	3308      	adds	r3, #8
 80067ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d009      	beq.n	800680e <pvPortMalloc+0x6a>
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e7fe      	b.n	800680c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d068      	beq.n	80068e6 <pvPortMalloc+0x142>
 8006814:	4b41      	ldr	r3, [pc, #260]	; (800691c <pvPortMalloc+0x178>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	429a      	cmp	r2, r3
 800681c:	d863      	bhi.n	80068e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800681e:	4b40      	ldr	r3, [pc, #256]	; (8006920 <pvPortMalloc+0x17c>)
 8006820:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006822:	4b3f      	ldr	r3, [pc, #252]	; (8006920 <pvPortMalloc+0x17c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006828:	e004      	b.n	8006834 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d903      	bls.n	8006846 <pvPortMalloc+0xa2>
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f1      	bne.n	800682a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006846:	4b33      	ldr	r3, [pc, #204]	; (8006914 <pvPortMalloc+0x170>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684c:	429a      	cmp	r2, r3
 800684e:	d04a      	beq.n	80068e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2208      	movs	r2, #8
 8006856:	4413      	add	r3, r2
 8006858:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	1ad2      	subs	r2, r2, r3
 800686a:	2308      	movs	r3, #8
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	429a      	cmp	r2, r3
 8006870:	d91e      	bls.n	80068b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4413      	add	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	2b00      	cmp	r3, #0
 8006882:	d009      	beq.n	8006898 <pvPortMalloc+0xf4>
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	e7fe      	b.n	8006896 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068aa:	69b8      	ldr	r0, [r7, #24]
 80068ac:	f000 f8f6 	bl	8006a9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068b0:	4b1a      	ldr	r3, [pc, #104]	; (800691c <pvPortMalloc+0x178>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	4a18      	ldr	r2, [pc, #96]	; (800691c <pvPortMalloc+0x178>)
 80068bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068be:	4b17      	ldr	r3, [pc, #92]	; (800691c <pvPortMalloc+0x178>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b18      	ldr	r3, [pc, #96]	; (8006924 <pvPortMalloc+0x180>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d203      	bcs.n	80068d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <pvPortMalloc+0x178>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a15      	ldr	r2, [pc, #84]	; (8006924 <pvPortMalloc+0x180>)
 80068d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	4b10      	ldr	r3, [pc, #64]	; (8006918 <pvPortMalloc+0x174>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	431a      	orrs	r2, r3
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068e6:	f7fe fdc7 	bl	8005478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <pvPortMalloc+0x164>
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e7fe      	b.n	8006906 <pvPortMalloc+0x162>
	return pvReturn;
 8006908:	69fb      	ldr	r3, [r7, #28]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3728      	adds	r7, #40	; 0x28
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20003234 	.word	0x20003234
 8006918:	20003240 	.word	0x20003240
 800691c:	20003238 	.word	0x20003238
 8006920:	2000322c 	.word	0x2000322c
 8006924:	2000323c 	.word	0x2000323c

08006928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d046      	beq.n	80069c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800693a:	2308      	movs	r3, #8
 800693c:	425b      	negs	r3, r3
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4413      	add	r3, r2
 8006942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <vPortFree+0xa8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4013      	ands	r3, r2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d109      	bne.n	800696a <vPortFree+0x42>
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e7fe      	b.n	8006968 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <vPortFree+0x5e>
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	60bb      	str	r3, [r7, #8]
 8006984:	e7fe      	b.n	8006984 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <vPortFree+0xa8>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4013      	ands	r3, r2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d019      	beq.n	80069c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d115      	bne.n	80069c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <vPortFree+0xa8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	401a      	ands	r2, r3
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069ac:	f7fe fd56 	bl	800545c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <vPortFree+0xac>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4413      	add	r3, r2
 80069ba:	4a06      	ldr	r2, [pc, #24]	; (80069d4 <vPortFree+0xac>)
 80069bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069be:	6938      	ldr	r0, [r7, #16]
 80069c0:	f000 f86c 	bl	8006a9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069c4:	f7fe fd58 	bl	8005478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069c8:	bf00      	nop
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20003240 	.word	0x20003240
 80069d4:	20003238 	.word	0x20003238

080069d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80069e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069e4:	4b27      	ldr	r3, [pc, #156]	; (8006a84 <prvHeapInit+0xac>)
 80069e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00c      	beq.n	8006a0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3307      	adds	r3, #7
 80069f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	4a1f      	ldr	r2, [pc, #124]	; (8006a84 <prvHeapInit+0xac>)
 8006a08:	4413      	add	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <prvHeapInit+0xb0>)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a16:	4b1c      	ldr	r3, [pc, #112]	; (8006a88 <prvHeapInit+0xb0>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a24:	2208      	movs	r2, #8
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0307 	bic.w	r3, r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <prvHeapInit+0xb4>)
 8006a38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a3a:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <prvHeapInit+0xb4>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <prvHeapInit+0xb4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <prvHeapInit+0xb4>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4a0a      	ldr	r2, [pc, #40]	; (8006a90 <prvHeapInit+0xb8>)
 8006a66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <prvHeapInit+0xbc>)
 8006a6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a70:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <prvHeapInit+0xc0>)
 8006a72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a76:	601a      	str	r2, [r3, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20000a2c 	.word	0x20000a2c
 8006a88:	2000322c 	.word	0x2000322c
 8006a8c:	20003234 	.word	0x20003234
 8006a90:	2000323c 	.word	0x2000323c
 8006a94:	20003238 	.word	0x20003238
 8006a98:	20003240 	.word	0x20003240

08006a9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006aa4:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <prvInsertBlockIntoFreeList+0xa8>)
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e002      	b.n	8006ab0 <prvInsertBlockIntoFreeList+0x14>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d8f7      	bhi.n	8006aaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d108      	bne.n	8006ade <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	441a      	add	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	441a      	add	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d118      	bne.n	8006b24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvInsertBlockIntoFreeList+0xac>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d00d      	beq.n	8006b1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e008      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <prvInsertBlockIntoFreeList+0xac>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	e003      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d002      	beq.n	8006b3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr
 8006b44:	2000322c 	.word	0x2000322c
 8006b48:	20003234 	.word	0x20003234

08006b4c <__libc_init_array>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	2500      	movs	r5, #0
 8006b50:	4e0c      	ldr	r6, [pc, #48]	; (8006b84 <__libc_init_array+0x38>)
 8006b52:	4c0d      	ldr	r4, [pc, #52]	; (8006b88 <__libc_init_array+0x3c>)
 8006b54:	1ba4      	subs	r4, r4, r6
 8006b56:	10a4      	asrs	r4, r4, #2
 8006b58:	42a5      	cmp	r5, r4
 8006b5a:	d109      	bne.n	8006b70 <__libc_init_array+0x24>
 8006b5c:	f000 f82e 	bl	8006bbc <_init>
 8006b60:	2500      	movs	r5, #0
 8006b62:	4e0a      	ldr	r6, [pc, #40]	; (8006b8c <__libc_init_array+0x40>)
 8006b64:	4c0a      	ldr	r4, [pc, #40]	; (8006b90 <__libc_init_array+0x44>)
 8006b66:	1ba4      	subs	r4, r4, r6
 8006b68:	10a4      	asrs	r4, r4, #2
 8006b6a:	42a5      	cmp	r5, r4
 8006b6c:	d105      	bne.n	8006b7a <__libc_init_array+0x2e>
 8006b6e:	bd70      	pop	{r4, r5, r6, pc}
 8006b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b74:	4798      	blx	r3
 8006b76:	3501      	adds	r5, #1
 8006b78:	e7ee      	b.n	8006b58 <__libc_init_array+0xc>
 8006b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b7e:	4798      	blx	r3
 8006b80:	3501      	adds	r5, #1
 8006b82:	e7f2      	b.n	8006b6a <__libc_init_array+0x1e>
 8006b84:	08007184 	.word	0x08007184
 8006b88:	08007184 	.word	0x08007184
 8006b8c:	08007184 	.word	0x08007184
 8006b90:	08007188 	.word	0x08007188

08006b94 <memcpy>:
 8006b94:	b510      	push	{r4, lr}
 8006b96:	1e43      	subs	r3, r0, #1
 8006b98:	440a      	add	r2, r1
 8006b9a:	4291      	cmp	r1, r2
 8006b9c:	d100      	bne.n	8006ba0 <memcpy+0xc>
 8006b9e:	bd10      	pop	{r4, pc}
 8006ba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ba8:	e7f7      	b.n	8006b9a <memcpy+0x6>

08006baa <memset>:
 8006baa:	4603      	mov	r3, r0
 8006bac:	4402      	add	r2, r0
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d100      	bne.n	8006bb4 <memset+0xa>
 8006bb2:	4770      	bx	lr
 8006bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8006bb8:	e7f9      	b.n	8006bae <memset+0x4>
	...

08006bbc <_init>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	bf00      	nop
 8006bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc2:	bc08      	pop	{r3}
 8006bc4:	469e      	mov	lr, r3
 8006bc6:	4770      	bx	lr

08006bc8 <_fini>:
 8006bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bca:	bf00      	nop
 8006bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bce:	bc08      	pop	{r3}
 8006bd0:	469e      	mov	lr, r3
 8006bd2:	4770      	bx	lr
